
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	40 17 00 20 79 26 00 08 57 4c 00 08 4d 26 00 08     @.. y&..WL..M&..
 8000010:	4d 26 00 08 4d 26 00 08 4d 26 00 08 00 00 00 00     M&..M&..M&......
	...
 800002c:	cd 22 00 08 4d 26 00 08 00 00 00 00 79 22 00 08     ."..M&......y"..
 800003c:	19 38 00 08                                         .8..

08000040 <_irq_vector_table>:
 8000040:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000050:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000060:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000070:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000080:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000090:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000a0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000b0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000c0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000d0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000e0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 80000f0:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000100:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000110:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000120:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000130:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000140:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000150:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000160:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000170:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000180:	7d 23 00 08 7d 23 00 08 7d 23 00 08 7d 23 00 08     }#..}#..}#..}#..
 8000190:	7d 23 00 08                                         }#..

Disassembly of section text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	; 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__aeabi_d2iz>:
 8000934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000938:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800093c:	d215      	bcs.n	800096a <__aeabi_d2iz+0x36>
 800093e:	d511      	bpl.n	8000964 <__aeabi_d2iz+0x30>
 8000940:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000944:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000948:	d912      	bls.n	8000970 <__aeabi_d2iz+0x3c>
 800094a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000952:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000956:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800095a:	fa23 f002 	lsr.w	r0, r3, r2
 800095e:	bf18      	it	ne
 8000960:	4240      	negne	r0, r0
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d105      	bne.n	800097c <__aeabi_d2iz+0x48>
 8000970:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000974:	bf08      	it	eq
 8000976:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_ldivmod>:
 8000a24:	b97b      	cbnz	r3, 8000a46 <__aeabi_ldivmod+0x22>
 8000a26:	b972      	cbnz	r2, 8000a46 <__aeabi_ldivmod+0x22>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bfbe      	ittt	lt
 8000a2c:	2000      	movlt	r0, #0
 8000a2e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a32:	e006      	blt.n	8000a42 <__aeabi_ldivmod+0x1e>
 8000a34:	bf08      	it	eq
 8000a36:	2800      	cmpeq	r0, #0
 8000a38:	bf1c      	itt	ne
 8000a3a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a3e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a42:	f000 b857 	b.w	8000af4 <__aeabi_idiv0>
 8000a46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	db09      	blt.n	8000a66 <__aeabi_ldivmod+0x42>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db1a      	blt.n	8000a8c <__aeabi_ldivmod+0x68>
 8000a56:	f000 f84f 	bl	8000af8 <__udivmoddi4>
 8000a5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a62:	b004      	add	sp, #16
 8000a64:	4770      	bx	lr
 8000a66:	4240      	negs	r0, r0
 8000a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db1b      	blt.n	8000aa8 <__aeabi_ldivmod+0x84>
 8000a70:	f000 f842 	bl	8000af8 <__udivmoddi4>
 8000a74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a7c:	b004      	add	sp, #16
 8000a7e:	4240      	negs	r0, r0
 8000a80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a84:	4252      	negs	r2, r2
 8000a86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a8a:	4770      	bx	lr
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a92:	f000 f831 	bl	8000af8 <__udivmoddi4>
 8000a96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9e:	b004      	add	sp, #16
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa6:	4770      	bx	lr
 8000aa8:	4252      	negs	r2, r2
 8000aaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aae:	f000 f823 	bl	8000af8 <__udivmoddi4>
 8000ab2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aba:	b004      	add	sp, #16
 8000abc:	4252      	negs	r2, r2
 8000abe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f000 b80c 	b.w	8000af4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f808 	bl	8000af8 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__udivmoddi4>:
 8000af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000afc:	4686      	mov	lr, r0
 8000afe:	468c      	mov	ip, r1
 8000b00:	4608      	mov	r0, r1
 8000b02:	9e08      	ldr	r6, [sp, #32]
 8000b04:	4615      	mov	r5, r2
 8000b06:	4674      	mov	r4, lr
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f040 80c2 	bne.w	8000c94 <__udivmoddi4+0x19c>
 8000b10:	4285      	cmp	r5, r0
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	d945      	bls.n	8000ba4 <__udivmoddi4+0xac>
 8000b18:	b14a      	cbz	r2, 8000b2e <__udivmoddi4+0x36>
 8000b1a:	f1c2 0320 	rsb	r3, r2, #32
 8000b1e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b22:	fa2e f303 	lsr.w	r3, lr, r3
 8000b26:	4095      	lsls	r5, r2
 8000b28:	ea43 0c0c 	orr.w	ip, r3, ip
 8000b2c:	4094      	lsls	r4, r2
 8000b2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b32:	b2a8      	uxth	r0, r5
 8000b34:	fbbc f8fe 	udiv	r8, ip, lr
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000b3e:	fb08 f900 	mul.w	r9, r8, r0
 8000b42:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000b46:	4599      	cmp	r9, r3
 8000b48:	d928      	bls.n	8000b9c <__udivmoddi4+0xa4>
 8000b4a:	18eb      	adds	r3, r5, r3
 8000b4c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000b50:	d204      	bcs.n	8000b5c <__udivmoddi4+0x64>
 8000b52:	4599      	cmp	r9, r3
 8000b54:	d902      	bls.n	8000b5c <__udivmoddi4+0x64>
 8000b56:	f1a8 0702 	sub.w	r7, r8, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	eba3 0309 	sub.w	r3, r3, r9
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b66:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b6a:	fb0c f000 	mul.w	r0, ip, r0
 8000b6e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b72:	42a0      	cmp	r0, r4
 8000b74:	d914      	bls.n	8000ba0 <__udivmoddi4+0xa8>
 8000b76:	192c      	adds	r4, r5, r4
 8000b78:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000b7c:	d204      	bcs.n	8000b88 <__udivmoddi4+0x90>
 8000b7e:	42a0      	cmp	r0, r4
 8000b80:	d902      	bls.n	8000b88 <__udivmoddi4+0x90>
 8000b82:	f1ac 0302 	sub.w	r3, ip, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	1a24      	subs	r4, r4, r0
 8000b8a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000b8e:	b11e      	cbz	r6, 8000b98 <__udivmoddi4+0xa0>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	6034      	str	r4, [r6, #0]
 8000b96:	6073      	str	r3, [r6, #4]
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	4647      	mov	r7, r8
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0x64>
 8000ba0:	4663      	mov	r3, ip
 8000ba2:	e7f1      	b.n	8000b88 <__udivmoddi4+0x90>
 8000ba4:	bb92      	cbnz	r2, 8000c0c <__udivmoddi4+0x114>
 8000ba6:	1b43      	subs	r3, r0, r5
 8000ba8:	2101      	movs	r1, #1
 8000baa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bae:	b2af      	uxth	r7, r5
 8000bb0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bb4:	0c20      	lsrs	r0, r4, #16
 8000bb6:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bba:	fb0c f807 	mul.w	r8, ip, r7
 8000bbe:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc2:	4598      	cmp	r8, r3
 8000bc4:	d962      	bls.n	8000c8c <__udivmoddi4+0x194>
 8000bc6:	18eb      	adds	r3, r5, r3
 8000bc8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bcc:	d204      	bcs.n	8000bd8 <__udivmoddi4+0xe0>
 8000bce:	4598      	cmp	r8, r3
 8000bd0:	d902      	bls.n	8000bd8 <__udivmoddi4+0xe0>
 8000bd2:	f1ac 0002 	sub.w	r0, ip, #2
 8000bd6:	442b      	add	r3, r5
 8000bd8:	eba3 0308 	sub.w	r3, r3, r8
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb3 fcfe 	udiv	ip, r3, lr
 8000be2:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be6:	fb0c f707 	mul.w	r7, ip, r7
 8000bea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bee:	42a7      	cmp	r7, r4
 8000bf0:	d94e      	bls.n	8000c90 <__udivmoddi4+0x198>
 8000bf2:	192c      	adds	r4, r5, r4
 8000bf4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000bf8:	d204      	bcs.n	8000c04 <__udivmoddi4+0x10c>
 8000bfa:	42a7      	cmp	r7, r4
 8000bfc:	d902      	bls.n	8000c04 <__udivmoddi4+0x10c>
 8000bfe:	f1ac 0302 	sub.w	r3, ip, #2
 8000c02:	442c      	add	r4, r5
 8000c04:	1be4      	subs	r4, r4, r7
 8000c06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c0a:	e7c0      	b.n	8000b8e <__udivmoddi4+0x96>
 8000c0c:	f1c2 0320 	rsb	r3, r2, #32
 8000c10:	fa20 f103 	lsr.w	r1, r0, r3
 8000c14:	4095      	lsls	r5, r2
 8000c16:	4090      	lsls	r0, r2
 8000c18:	fa2e f303 	lsr.w	r3, lr, r3
 8000c1c:	4303      	orrs	r3, r0
 8000c1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c22:	b2af      	uxth	r7, r5
 8000c24:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c28:	fb0e 101c 	mls	r0, lr, ip, r1
 8000c2c:	0c19      	lsrs	r1, r3, #16
 8000c2e:	fb0c f807 	mul.w	r8, ip, r7
 8000c32:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c36:	4588      	cmp	r8, r1
 8000c38:	fa04 f402 	lsl.w	r4, r4, r2
 8000c3c:	d922      	bls.n	8000c84 <__udivmoddi4+0x18c>
 8000c3e:	1869      	adds	r1, r5, r1
 8000c40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c44:	d204      	bcs.n	8000c50 <__udivmoddi4+0x158>
 8000c46:	4588      	cmp	r8, r1
 8000c48:	d902      	bls.n	8000c50 <__udivmoddi4+0x158>
 8000c4a:	f1ac 0002 	sub.w	r0, ip, #2
 8000c4e:	4429      	add	r1, r5
 8000c50:	eba1 0108 	sub.w	r1, r1, r8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5a:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c5e:	fb0c f707 	mul.w	r7, ip, r7
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d90e      	bls.n	8000c88 <__udivmoddi4+0x190>
 8000c6a:	18eb      	adds	r3, r5, r3
 8000c6c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000c70:	d204      	bcs.n	8000c7c <__udivmoddi4+0x184>
 8000c72:	429f      	cmp	r7, r3
 8000c74:	d902      	bls.n	8000c7c <__udivmoddi4+0x184>
 8000c76:	f1ac 0102 	sub.w	r1, ip, #2
 8000c7a:	442b      	add	r3, r5
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c82:	e792      	b.n	8000baa <__udivmoddi4+0xb2>
 8000c84:	4660      	mov	r0, ip
 8000c86:	e7e3      	b.n	8000c50 <__udivmoddi4+0x158>
 8000c88:	4661      	mov	r1, ip
 8000c8a:	e7f7      	b.n	8000c7c <__udivmoddi4+0x184>
 8000c8c:	4660      	mov	r0, ip
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0xe0>
 8000c90:	4663      	mov	r3, ip
 8000c92:	e7b7      	b.n	8000c04 <__udivmoddi4+0x10c>
 8000c94:	4283      	cmp	r3, r0
 8000c96:	d906      	bls.n	8000ca6 <__udivmoddi4+0x1ae>
 8000c98:	b916      	cbnz	r6, 8000ca0 <__udivmoddi4+0x1a8>
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000ca0:	e9c6 e000 	strd	lr, r0, [r6]
 8000ca4:	e7f9      	b.n	8000c9a <__udivmoddi4+0x1a2>
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	b98f      	cbnz	r7, 8000cd0 <__udivmoddi4+0x1d8>
 8000cac:	4283      	cmp	r3, r0
 8000cae:	d301      	bcc.n	8000cb4 <__udivmoddi4+0x1bc>
 8000cb0:	4572      	cmp	r2, lr
 8000cb2:	d808      	bhi.n	8000cc6 <__udivmoddi4+0x1ce>
 8000cb4:	ebbe 0402 	subs.w	r4, lr, r2
 8000cb8:	eb60 0303 	sbc.w	r3, r0, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	b91e      	cbnz	r6, 8000cca <__udivmoddi4+0x1d2>
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e768      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	e7fa      	b.n	8000cc0 <__udivmoddi4+0x1c8>
 8000cca:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cce:	e7f8      	b.n	8000cc2 <__udivmoddi4+0x1ca>
 8000cd0:	f1c7 0c20 	rsb	ip, r7, #32
 8000cd4:	40bb      	lsls	r3, r7
 8000cd6:	fa22 f40c 	lsr.w	r4, r2, ip
 8000cda:	431c      	orrs	r4, r3
 8000cdc:	fa2e f10c 	lsr.w	r1, lr, ip
 8000ce0:	fa20 f30c 	lsr.w	r3, r0, ip
 8000ce4:	40b8      	lsls	r0, r7
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000cec:	fa0e f507 	lsl.w	r5, lr, r7
 8000cf0:	fbb3 f8f9 	udiv	r8, r3, r9
 8000cf4:	fa1f fe84 	uxth.w	lr, r4
 8000cf8:	fb09 3018 	mls	r0, r9, r8, r3
 8000cfc:	0c0b      	lsrs	r3, r1, #16
 8000cfe:	fb08 fa0e 	mul.w	sl, r8, lr
 8000d02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000d06:	459a      	cmp	sl, r3
 8000d08:	fa02 f207 	lsl.w	r2, r2, r7
 8000d0c:	d940      	bls.n	8000d90 <__udivmoddi4+0x298>
 8000d0e:	18e3      	adds	r3, r4, r3
 8000d10:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d14:	d204      	bcs.n	8000d20 <__udivmoddi4+0x228>
 8000d16:	459a      	cmp	sl, r3
 8000d18:	d902      	bls.n	8000d20 <__udivmoddi4+0x228>
 8000d1a:	f1a8 0002 	sub.w	r0, r8, #2
 8000d1e:	4423      	add	r3, r4
 8000d20:	eba3 030a 	sub.w	r3, r3, sl
 8000d24:	b289      	uxth	r1, r1
 8000d26:	fbb3 f8f9 	udiv	r8, r3, r9
 8000d2a:	fb09 3318 	mls	r3, r9, r8, r3
 8000d2e:	fb08 fe0e 	mul.w	lr, r8, lr
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d92c      	bls.n	8000d94 <__udivmoddi4+0x29c>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000d40:	d204      	bcs.n	8000d4c <__udivmoddi4+0x254>
 8000d42:	458e      	cmp	lr, r1
 8000d44:	d902      	bls.n	8000d4c <__udivmoddi4+0x254>
 8000d46:	f1a8 0302 	sub.w	r3, r8, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d50:	fba0 9802 	umull	r9, r8, r0, r2
 8000d54:	eba1 010e 	sub.w	r1, r1, lr
 8000d58:	4541      	cmp	r1, r8
 8000d5a:	46ce      	mov	lr, r9
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0x26e>
 8000d60:	d106      	bne.n	8000d70 <__udivmoddi4+0x278>
 8000d62:	454d      	cmp	r5, r9
 8000d64:	d204      	bcs.n	8000d70 <__udivmoddi4+0x278>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb68 0304 	sbc.w	r3, r8, r4
 8000d6e:	3801      	subs	r0, #1
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0a6      	beq.n	8000cc2 <__udivmoddi4+0x1ca>
 8000d74:	ebb5 020e 	subs.w	r2, r5, lr
 8000d78:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000d80:	fa22 f307 	lsr.w	r3, r2, r7
 8000d84:	ea4c 0303 	orr.w	r3, ip, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	e9c6 3100 	strd	r3, r1, [r6]
 8000d8e:	e798      	b.n	8000cc2 <__udivmoddi4+0x1ca>
 8000d90:	4640      	mov	r0, r8
 8000d92:	e7c5      	b.n	8000d20 <__udivmoddi4+0x228>
 8000d94:	4643      	mov	r3, r8
 8000d96:	e7d9      	b.n	8000d4c <__udivmoddi4+0x254>

08000d98 <sensor_value_to_double>:
 *
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4604      	mov	r4, r0
	return (double)val->val1 + (double)val->val2 / 1000000;
 8000d9c:	6840      	ldr	r0, [r0, #4]
 8000d9e:	f7ff fb4d 	bl	800043c <__aeabi_i2d>
 8000da2:	a309      	add	r3, pc, #36	; (adr r3, 8000dc8 <sensor_value_to_double+0x30>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f7ff fcdc 	bl	8000764 <__aeabi_ddiv>
 8000dac:	4606      	mov	r6, r0
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fb43 	bl	800043c <__aeabi_i2d>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4630      	mov	r0, r6
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	f7ff f9f1 	bl	80001a4 <__adddf3>
}
 8000dc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	412e8480 	.word	0x412e8480

08000dd0 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
 8000dd0:	2903      	cmp	r1, #3
{
 8000dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	4614      	mov	r4, r2
	switch (chan) {
 8000dd8:	d860      	bhi.n	8000e9c <lis2dh_attr_set+0xcc>
	switch (attr) {
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	d040      	beq.n	8000e60 <lis2dh_attr_set+0x90>
 8000dde:	2a07      	cmp	r2, #7
 8000de0:	d15c      	bne.n	8000e9c <lis2dh_attr_set+0xcc>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	681c      	ldr	r4, [r3, #0]
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <lis2dh_attr_set+0xf8>)
 8000de8:	17d1      	asrs	r1, r2, #31
 8000dea:	4613      	mov	r3, r2
 8000dec:	fbc4 3100 	smlal	r3, r1, r4, r0
	if (micro_ms2 > 0) {
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	f171 0200 	sbcs.w	r2, r1, #0
 8000df6:	db25      	blt.n	8000e44 <lis2dh_attr_set+0x74>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
 8000df8:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
 8000dfc:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
 8000e00:	1818      	adds	r0, r3, r0
 8000e02:	a32f      	add	r3, pc, #188	; (adr r3, 8000ec0 <lis2dh_attr_set+0xf0>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
 8000e0c:	f7ff fe0a 	bl	8000a24 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
 8000e10:	b280      	uxth	r0, r0
 8000e12:	2802      	cmp	r0, #2
 8000e14:	d01e      	beq.n	8000e54 <lis2dh_attr_set+0x84>
 8000e16:	2804      	cmp	r0, #4
 8000e18:	d01e      	beq.n	8000e58 <lis2dh_attr_set+0x88>
 8000e1a:	2808      	cmp	r0, #8
 8000e1c:	d01e      	beq.n	8000e5c <lis2dh_attr_set+0x8c>
 8000e1e:	2810      	cmp	r0, #16
 8000e20:	d133      	bne.n	8000e8a <lis2dh_attr_set+0xba>
 8000e22:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
 8000e24:	4929      	ldr	r1, [pc, #164]	; (8000ecc <lis2dh_attr_set+0xfc>)
	struct lis2dh_data *lis2dh = dev->data;
 8000e26:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
 8000e28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000e2c:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
 8000e2e:	6852      	ldr	r2, [r2, #4]
 8000e30:	6914      	ldr	r4, [r2, #16]
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	2230      	movs	r2, #48	; 0x30
 8000e36:	2123      	movs	r1, #35	; 0x23
 8000e38:	4628      	mov	r0, r5
 8000e3a:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
 8000e3c:	b002      	add	sp, #8
 8000e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
 8000e42:	4760      	bx	ip
 8000e44:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <lis2dh_attr_set+0x100>)
 8000e46:	1818      	adds	r0, r3, r0
 8000e48:	f161 0100 	sbc.w	r1, r1, #0
 8000e4c:	a31c      	add	r3, pc, #112	; (adr r3, 8000ec0 <lis2dh_attr_set+0xf0>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	e7db      	b.n	8000e0c <lis2dh_attr_set+0x3c>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	e7e5      	b.n	8000e24 <lis2dh_attr_set+0x54>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e7e3      	b.n	8000e24 <lis2dh_attr_set+0x54>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e7e1      	b.n	8000e24 <lis2dh_attr_set+0x54>
		return lis2dh_acc_odr_set(dev, val->val1);
 8000e60:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <lis2dh_attr_set+0x104>)
		if (freq == lis2dh_odr_map[i]) {
 8000e64:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d10b      	bne.n	8000e84 <lis2dh_attr_set+0xb4>
	struct lis2dh_data *data = dev->data;
 8000e6c:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
 8000e6e:	6873      	ldr	r3, [r6, #4]
 8000e70:	f10d 0207 	add.w	r2, sp, #7
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2120      	movs	r1, #32
 8000e78:	4628      	mov	r0, r5
 8000e7a:	4798      	blx	r3
	if (status < 0) {
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	da07      	bge.n	8000e90 <lis2dh_attr_set+0xc0>
}
 8000e80:	b002      	add	sp, #8
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
 8000e84:	3401      	adds	r4, #1
 8000e86:	2c0b      	cmp	r4, #11
 8000e88:	d1ec      	bne.n	8000e64 <lis2dh_attr_set+0x94>
	return -EINVAL;
 8000e8a:	f06f 0015 	mvn.w	r0, #21
 8000e8e:	e7f7      	b.n	8000e80 <lis2dh_attr_set+0xb0>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
 8000e90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e94:	0713      	lsls	r3, r2, #28
 8000e96:	d404      	bmi.n	8000ea2 <lis2dh_attr_set+0xd2>
 8000e98:	2c08      	cmp	r4, #8
 8000e9a:	d105      	bne.n	8000ea8 <lis2dh_attr_set+0xd8>
	switch (attr) {
 8000e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8000ea0:	e7ee      	b.n	8000e80 <lis2dh_attr_set+0xb0>
	if (((value & LIS2DH_LP_EN_BIT_MASK) == LIS2DH_LP_EN_BIT_MASK) &&
 8000ea2:	2c0a      	cmp	r4, #10
		odr--;
 8000ea4:	bf08      	it	eq
 8000ea6:	2409      	moveq	r4, #9
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
 8000ea8:	6873      	ldr	r3, [r6, #4]
				      (value & ~LIS2DH_ODR_MASK) |
 8000eaa:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
 8000eae:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4628      	mov	r0, r5
 8000eba:	4798      	blx	r3
 8000ebc:	e7e0      	b.n	8000e80 <lis2dh_attr_set+0xb0>
 8000ebe:	bf00      	nop
 8000ec0:	0095a33a 	.word	0x0095a33a
 8000ec4:	00000000 	.word	0x00000000
 8000ec8:	000f4240 	.word	0x000f4240
 8000ecc:	20000024 	.word	0x20000024
 8000ed0:	ffb52e63 	.word	0xffb52e63
 8000ed4:	08006db0 	.word	0x08006db0

08000ed8 <lsm6dsl_accel_convert>:
	return 0;
}

static inline void lsm6dsl_accel_convert(struct sensor_value *val, int raw_val,
					 float sensitivity)
{
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	4604      	mov	r4, r0
	double dval;

	/* Sensitivity is exposed in mg/LSB */
	/* Convert to m/s^2 */
	dval = (double)(raw_val) * (double)sensitivity * SENSOR_G_DOUBLE / 1000;
 8000edc:	4608      	mov	r0, r1
{
 8000ede:	4615      	mov	r5, r2
	dval = (double)(raw_val) * (double)sensitivity * SENSOR_G_DOUBLE / 1000;
 8000ee0:	f7ff faac 	bl	800043c <__aeabi_i2d>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	460f      	mov	r7, r1
 8000eea:	f7ff fab9 	bl	8000460 <__aeabi_f2d>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	f7ff fb0b 	bl	8000510 <__aeabi_dmul>
 8000efa:	a30f      	add	r3, pc, #60	; (adr r3, 8000f38 <lsm6dsl_accel_convert+0x60>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fb06 	bl	8000510 <__aeabi_dmul>
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <lsm6dsl_accel_convert+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f7ff fc2c 	bl	8000764 <__aeabi_ddiv>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
 8000f10:	f7ff fd10 	bl	8000934 <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <lsm6dsl_accel_convert+0x68>)
	val->val1 = (int32_t)dval;
 8000f16:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	f7ff faf7 	bl	8000510 <__aeabi_dmul>
 8000f22:	f7ff fd07 	bl	8000934 <__aeabi_d2iz>
 8000f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2a:	fb90 f3f2 	sdiv	r3, r0, r2
 8000f2e:	fb03 0312 	mls	r3, r3, r2, r0
 8000f32:	4353      	muls	r3, r2
 8000f34:	6063      	str	r3, [r4, #4]

}
 8000f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f38:	3a92a305 	.word	0x3a92a305
 8000f3c:	40239d01 	.word	0x40239d01
 8000f40:	408f4000 	.word	0x408f4000
 8000f44:	00000000 	.word	0x00000000

08000f48 <lsm6dsl_gyro_convert.constprop.0>:
{
	return lsm6dsl_accel_get_channel(chan, val, data,
					data->accel_sensitivity);
}

static inline void lsm6dsl_gyro_convert(struct sensor_value *val, int raw_val,
 8000f48:	b5d0      	push	{r4, r6, r7, lr}
 8000f4a:	4604      	mov	r4, r0
{
	double dval;

	/* Sensitivity is exposed in mdps/LSB */
	/* Convert to rad/s */
	dval = (double)(raw_val * (double)sensitivity * SENSOR_DEG2RAD_DOUBLE / 1000);
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	f7ff fa75 	bl	800043c <__aeabi_i2d>
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <lsm6dsl_gyro_convert.constprop.0+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f7ff fadb 	bl	8000510 <__aeabi_dmul>
 8000f5a:	a30f      	add	r3, pc, #60	; (adr r3, 8000f98 <lsm6dsl_gyro_convert.constprop.0+0x50>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fad6 	bl	8000510 <__aeabi_dmul>
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <lsm6dsl_gyro_convert.constprop.0+0x5c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f7ff fbfc 	bl	8000764 <__aeabi_ddiv>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
 8000f70:	f7ff fce0 	bl	8000934 <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <lsm6dsl_gyro_convert.constprop.0+0x5c>)
	val->val1 = (int32_t)dval;
 8000f76:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	4639      	mov	r1, r7
 8000f7e:	f7ff fac7 	bl	8000510 <__aeabi_dmul>
 8000f82:	f7ff fcd7 	bl	8000934 <__aeabi_d2iz>
 8000f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8a:	fb90 f3f2 	sdiv	r3, r0, r2
 8000f8e:	fb03 0312 	mls	r3, r3, r2, r0
 8000f92:	4353      	muls	r3, r2
 8000f94:	6063      	str	r3, [r4, #4]
}
 8000f96:	bdd0      	pop	{r4, r6, r7, pc}
 8000f98:	63f11168 	.word	0x63f11168
 8000f9c:	3f91df46 	.word	0x3f91df46
 8000fa0:	40118000 	.word	0x40118000
 8000fa4:	408f4000 	.word	0x408f4000

08000fa8 <lsm6dsl_attr_set>:
	switch (chan) {
 8000fa8:	2903      	cmp	r1, #3
{
 8000faa:	b570      	push	{r4, r5, r6, lr}
 8000fac:	4604      	mov	r4, r0
 8000fae:	460d      	mov	r5, r1
	switch (chan) {
 8000fb0:	d004      	beq.n	8000fbc <lsm6dsl_attr_set+0x14>
 8000fb2:	2907      	cmp	r1, #7
 8000fb4:	d053      	beq.n	800105e <lsm6dsl_attr_set+0xb6>
	switch (attr) {
 8000fb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8000fba:	e027      	b.n	800100c <lsm6dsl_attr_set+0x64>
	switch (attr) {
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d03b      	beq.n	8001038 <lsm6dsl_attr_set+0x90>
 8000fc0:	2a07      	cmp	r2, #7
 8000fc2:	d1f8      	bne.n	8000fb6 <lsm6dsl_attr_set+0xe>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
 8000fc4:	6858      	ldr	r0, [r3, #4]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <lsm6dsl_attr_set+0x190>)
 8000fca:	17c1      	asrs	r1, r0, #31
 8000fcc:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (micro_ms2 > 0) {
 8000fd0:	2801      	cmp	r0, #1
 8000fd2:	f171 0300 	sbcs.w	r3, r1, #0
 8000fd6:	db3f      	blt.n	8001058 <lsm6dsl_attr_set+0xb0>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
 8000fd8:	4b58      	ldr	r3, [pc, #352]	; (800113c <lsm6dsl_attr_set+0x194>)
 8000fda:	18c0      	adds	r0, r0, r3
 8000fdc:	f141 0100 	adc.w	r1, r1, #0
 8000fe0:	a34f      	add	r3, pc, #316	; (adr r3, 8001120 <lsm6dsl_attr_set+0x178>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fd1d 	bl	8000a24 <__aeabi_ldivmod>
		if (range == lsm6dsl_accel_fs_map[i]) {
 8000fea:	2802      	cmp	r0, #2
	struct lsm6dsl_data *data = dev->data;
 8000fec:	6926      	ldr	r6, [r4, #16]
		if (range == lsm6dsl_accel_fs_map[i]) {
 8000fee:	d00e      	beq.n	800100e <lsm6dsl_attr_set+0x66>
 8000ff0:	2810      	cmp	r0, #16
 8000ff2:	d00e      	beq.n	8001012 <lsm6dsl_attr_set+0x6a>
 8000ff4:	2804      	cmp	r0, #4
 8000ff6:	d00e      	beq.n	8001016 <lsm6dsl_attr_set+0x6e>
 8000ff8:	2808      	cmp	r0, #8
 8000ffa:	d12d      	bne.n	8001058 <lsm6dsl_attr_set+0xb0>
	if (lsm6dsl_accel_set_fs_raw(dev, fs) < 0) {
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	4620      	mov	r0, r4
 8001000:	f004 fe20 	bl	8005c44 <lsm6dsl_accel_set_fs_raw>
 8001004:	2800      	cmp	r0, #0
 8001006:	da08      	bge.n	800101a <lsm6dsl_attr_set+0x72>
		return -EIO;
 8001008:	f06f 0004 	mvn.w	r0, #4
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_accel_fs_map); i++) {
 800100e:	2500      	movs	r5, #0
 8001010:	e7f4      	b.n	8000ffc <lsm6dsl_attr_set+0x54>
 8001012:	2501      	movs	r5, #1
 8001014:	e7f2      	b.n	8000ffc <lsm6dsl_attr_set+0x54>
 8001016:	2502      	movs	r5, #2
 8001018:	e7f0      	b.n	8000ffc <lsm6dsl_attr_set+0x54>
						    * SENSI_GRAIN_XL);
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <lsm6dsl_attr_set+0x198>)
 800101c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8001020:	f7ff fa0c 	bl	800043c <__aeabi_i2d>
 8001024:	a340      	add	r3, pc, #256	; (adr r3, 8001128 <lsm6dsl_attr_set+0x180>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fa71 	bl	8000510 <__aeabi_dmul>
	data->accel_sensitivity = (float)(lsm6dsl_accel_fs_sens[fs]
 800102e:	f7ff fca9 	bl	8000984 <__aeabi_d2f>
 8001032:	60f0      	str	r0, [r6, #12]
	return 0;
 8001034:	2000      	movs	r0, #0
 8001036:	e7e9      	b.n	800100c <lsm6dsl_attr_set+0x64>
		return lsm6dsl_accel_odr_set(dev, val->val1);
 8001038:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <lsm6dsl_attr_set+0x19c>)
		if (freq == lsm6dsl_odr_map[i]) {
 800103c:	f833 0b02 	ldrh.w	r0, [r3], #2
 8001040:	4281      	cmp	r1, r0
 8001042:	d106      	bne.n	8001052 <lsm6dsl_attr_set+0xaa>
	if (lsm6dsl_accel_set_odr_raw(dev, odr) < 0) {
 8001044:	b2d1      	uxtb	r1, r2
 8001046:	4620      	mov	r0, r4
 8001048:	f002 f97a 	bl	8003340 <lsm6dsl_accel_set_odr_raw>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
 800104c:	2800      	cmp	r0, #0
 800104e:	daf1      	bge.n	8001034 <lsm6dsl_attr_set+0x8c>
 8001050:	e7da      	b.n	8001008 <lsm6dsl_attr_set+0x60>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 8001052:	3201      	adds	r2, #1
 8001054:	2a0b      	cmp	r2, #11
 8001056:	d1f1      	bne.n	800103c <lsm6dsl_attr_set+0x94>
	return -EINVAL;
 8001058:	f06f 0015 	mvn.w	r0, #21
 800105c:	e7d6      	b.n	800100c <lsm6dsl_attr_set+0x64>
	switch (attr) {
 800105e:	2a00      	cmp	r2, #0
 8001060:	d04d      	beq.n	80010fe <lsm6dsl_attr_set+0x156>
 8001062:	2a07      	cmp	r2, #7
 8001064:	d1a7      	bne.n	8000fb6 <lsm6dsl_attr_set+0xe>
	int64_t micro_rad_s = rad->val1 * 1000000LL + rad->val2;
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	681d      	ldr	r5, [r3, #0]
 800106a:	4833      	ldr	r0, [pc, #204]	; (8001138 <lsm6dsl_attr_set+0x190>)
 800106c:	17d1      	asrs	r1, r2, #31
 800106e:	4613      	mov	r3, r2
 8001070:	460a      	mov	r2, r1
 8001072:	fbc5 3200 	smlal	r3, r2, r5, r0
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 8001076:	25b4      	movs	r5, #180	; 0xb4
 8001078:	fba3 0105 	umull	r0, r1, r3, r5
	if (micro_rad_s > 0) {
 800107c:	2b01      	cmp	r3, #1
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 800107e:	fb05 1102 	mla	r1, r5, r2, r1
	if (micro_rad_s > 0) {
 8001082:	f172 0200 	sbcs.w	r2, r2, #0
 8001086:	db2a      	blt.n	80010de <lsm6dsl_attr_set+0x136>
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <lsm6dsl_attr_set+0x1a0>)
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	a328      	add	r3, pc, #160	; (adr r3, 8001130 <lsm6dsl_attr_set+0x188>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f141 0100 	adc.w	r1, r1, #0
		return (micro_rad_s * 180LL - SENSOR_PI / 2) / SENSOR_PI;
 8001096:	f7ff fcc5 	bl	8000a24 <__aeabi_ldivmod>
		if (range == lsm6dsl_gyro_fs_map[i]) {
 800109a:	28f5      	cmp	r0, #245	; 0xf5
 800109c:	d027      	beq.n	80010ee <lsm6dsl_attr_set+0x146>
 800109e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80010a2:	d026      	beq.n	80010f2 <lsm6dsl_attr_set+0x14a>
 80010a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010a8:	d025      	beq.n	80010f6 <lsm6dsl_attr_set+0x14e>
 80010aa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80010ae:	d024      	beq.n	80010fa <lsm6dsl_attr_set+0x152>
 80010b0:	287d      	cmp	r0, #125	; 0x7d
 80010b2:	d1d1      	bne.n	8001058 <lsm6dsl_attr_set+0xb0>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
 80010b4:	2504      	movs	r5, #4
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
 80010b6:	4629      	mov	r1, r5
 80010b8:	4620      	mov	r0, r4
	struct lsm6dsl_data *data = dev->data;
 80010ba:	6926      	ldr	r6, [r4, #16]
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
 80010bc:	f004 fdd5 	bl	8005c6a <lsm6dsl_gyro_set_fs_raw>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	dba1      	blt.n	8001008 <lsm6dsl_attr_set+0x60>
						    * SENSI_GRAIN_G);
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <lsm6dsl_attr_set+0x1a4>)
 80010c6:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80010ca:	f7ff f9b7 	bl	800043c <__aeabi_i2d>
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <lsm6dsl_attr_set+0x1a8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f7ff fa1d 	bl	8000510 <__aeabi_dmul>
	data->gyro_sensitivity = (float)(lsm6dsl_gyro_fs_sens[fs]
 80010d6:	f7ff fc55 	bl	8000984 <__aeabi_d2f>
 80010da:	61f0      	str	r0, [r6, #28]
	return 0;
 80010dc:	e7aa      	b.n	8001034 <lsm6dsl_attr_set+0x8c>
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <lsm6dsl_attr_set+0x1ac>)
 80010e0:	18c0      	adds	r0, r0, r3
 80010e2:	f161 0100 	sbc.w	r1, r1, #0
 80010e6:	a312      	add	r3, pc, #72	; (adr r3, 8001130 <lsm6dsl_attr_set+0x188>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	e7d3      	b.n	8001096 <lsm6dsl_attr_set+0xee>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
 80010ee:	2500      	movs	r5, #0
 80010f0:	e7e1      	b.n	80010b6 <lsm6dsl_attr_set+0x10e>
 80010f2:	2501      	movs	r5, #1
 80010f4:	e7df      	b.n	80010b6 <lsm6dsl_attr_set+0x10e>
 80010f6:	2502      	movs	r5, #2
 80010f8:	e7dd      	b.n	80010b6 <lsm6dsl_attr_set+0x10e>
 80010fa:	2503      	movs	r5, #3
 80010fc:	e7db      	b.n	80010b6 <lsm6dsl_attr_set+0x10e>
		return lsm6dsl_gyro_odr_set(dev, val->val1);
 80010fe:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <lsm6dsl_attr_set+0x19c>)
		if (freq == lsm6dsl_odr_map[i]) {
 8001102:	f833 0b02 	ldrh.w	r0, [r3], #2
 8001106:	4281      	cmp	r1, r0
 8001108:	d104      	bne.n	8001114 <lsm6dsl_attr_set+0x16c>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
 800110a:	b2d1      	uxtb	r1, r2
 800110c:	4620      	mov	r0, r4
 800110e:	f004 fdc1 	bl	8005c94 <lsm6dsl_gyro_set_odr_raw>
 8001112:	e79b      	b.n	800104c <lsm6dsl_attr_set+0xa4>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
 8001114:	3201      	adds	r2, #1
 8001116:	2a0b      	cmp	r2, #11
 8001118:	d1f3      	bne.n	8001102 <lsm6dsl_attr_set+0x15a>
 800111a:	e79d      	b.n	8001058 <lsm6dsl_attr_set+0xb0>
 800111c:	f3af 8000 	nop.w
 8001120:	0095a33a 	.word	0x0095a33a
 8001124:	00000000 	.word	0x00000000
 8001128:	5a1cac08 	.word	0x5a1cac08
 800112c:	3faf3b64 	.word	0x3faf3b64
 8001130:	002fefd8 	.word	0x002fefd8
 8001134:	00000000 	.word	0x00000000
 8001138:	000f4240 	.word	0x000f4240
 800113c:	004ad19d 	.word	0x004ad19d
 8001140:	08006dd0 	.word	0x08006dd0
 8001144:	08006dd8 	.word	0x08006dd8
 8001148:	0017f7ec 	.word	0x0017f7ec
 800114c:	08006dc6 	.word	0x08006dc6
 8001150:	40118000 	.word	0x40118000
 8001154:	ffe80814 	.word	0xffe80814

08001158 <lsm6dsl_trigger_handler>:
#ifdef CONFIG_LSM6DSL_TRIGGER
static int lsm6dsl_trig_cnt;

static void lsm6dsl_trigger_handler(const struct device *dev,
				    const struct sensor_trigger *trig)
{
 8001158:	b508      	push	{r3, lr}
	return api->sample_fetch(dev, type);
 800115a:	6883      	ldr	r3, [r0, #8]
 800115c:	2139      	movs	r1, #57	; 0x39
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4798      	blx	r3
	sensor_sample_fetch_chan(dev, SENSOR_CHAN_ALL);
	lsm6dsl_trig_cnt++;
 8001162:	4a02      	ldr	r2, [pc, #8]	; (800116c <lsm6dsl_trigger_handler+0x14>)
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	6013      	str	r3, [r2, #0]
}
 800116a:	bd08      	pop	{r3, pc}
 800116c:	20000760 	.word	0x20000760

08001170 <main>:
#endif

void main(void)
{
 8001170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001174:	b0ab      	sub	sp, #172	; 0xac
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001176:	4c95      	ldr	r4, [pc, #596]	; (80013cc <main+0x25c>)
 8001178:	4620      	mov	r0, r4
 800117a:	f005 f841 	bl	8006200 <z_device_is_ready>
	const struct device *const lsm303agr_m = DEVICE_DT_GET_ONE(st_lis2mdl);
#ifdef CONFIG_LSM6DSL_TRIGGER
	int cnt = 1;
#endif

	if (!device_is_ready(hts221)) {
 800117e:	b930      	cbnz	r0, 800118e <main+0x1e>
	if (!device_is_ready(lps22hb)) {
		printk("%s: device not ready.\n", lps22hb->name);
		return;
	}
	if (!device_is_ready(lsm6dsl)) {
		printk("%s: device not ready.\n", lsm6dsl->name);
 8001180:	6821      	ldr	r1, [r4, #0]
	if (!device_is_ready(lsm303agr_a)) {
		printk("%s: device not ready.\n", lsm303agr_a->name);
		return;
	}
	if (!device_is_ready(lsm303agr_m)) {
		printk("%s: device not ready.\n", lsm303agr_m->name);
 8001182:	4893      	ldr	r0, [pc, #588]	; (80013d0 <main+0x260>)
		       sensor_value_to_double(&magn[1]),
		       sensor_value_to_double(&magn[2]));

		k_sleep(K_MSEC(2000));
	}
}
 8001184:	b02b      	add	sp, #172	; 0xac
 8001186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("%s: device not ready.\n", lsm303agr_m->name);
 800118a:	f003 bb27 	b.w	80047dc <printk>
 800118e:	4c91      	ldr	r4, [pc, #580]	; (80013d4 <main+0x264>)
 8001190:	4620      	mov	r0, r4
 8001192:	f005 f835 	bl	8006200 <z_device_is_ready>
	if (!device_is_ready(lps22hb)) {
 8001196:	2800      	cmp	r0, #0
 8001198:	d0f2      	beq.n	8001180 <main+0x10>
 800119a:	4c8f      	ldr	r4, [pc, #572]	; (80013d8 <main+0x268>)
 800119c:	4620      	mov	r0, r4
 800119e:	f005 f82f 	bl	8006200 <z_device_is_ready>
	if (!device_is_ready(lsm6dsl)) {
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d0ec      	beq.n	8001180 <main+0x10>
 80011a6:	4d8d      	ldr	r5, [pc, #564]	; (80013dc <main+0x26c>)
 80011a8:	4628      	mov	r0, r5
 80011aa:	f005 f829 	bl	8006200 <z_device_is_ready>
	if (!device_is_ready(lsm303agr_a)) {
 80011ae:	b908      	cbnz	r0, 80011b4 <main+0x44>
		printk("%s: device not ready.\n", lsm303agr_m->name);
 80011b0:	6829      	ldr	r1, [r5, #0]
 80011b2:	e7e6      	b.n	8001182 <main+0x12>
 80011b4:	4d8a      	ldr	r5, [pc, #552]	; (80013e0 <main+0x270>)
 80011b6:	4628      	mov	r0, r5
 80011b8:	f005 f822 	bl	8006200 <z_device_is_ready>
	if (!device_is_ready(lsm303agr_m)) {
 80011bc:	2800      	cmp	r0, #0
 80011be:	d0f7      	beq.n	80011b0 <main+0x40>
	odr_attr.val2 = 0;
 80011c0:	23d0      	movs	r3, #208	; 0xd0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
	if (api->attr_set == NULL) {
 80011c8:	68a5      	ldr	r5, [r4, #8]
 80011ca:	682f      	ldr	r7, [r5, #0]
 80011cc:	b92f      	cbnz	r7, 80011da <main+0x6a>
		printk("Cannot set sampling frequency for accelerometer.\n");
 80011ce:	4885      	ldr	r0, [pc, #532]	; (80013e4 <main+0x274>)
		printk("Cannot set sampling frequency for gyro.\n");
 80011d0:	f003 fb04 	bl	80047dc <printk>
}
 80011d4:	b02b      	add	sp, #172	; 0xac
 80011d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->attr_set(dev, chan, attr, val);
 80011da:	ab10      	add	r3, sp, #64	; 0x40
 80011dc:	4632      	mov	r2, r6
 80011de:	2103      	movs	r1, #3
 80011e0:	4620      	mov	r0, r4
 80011e2:	47b8      	blx	r7
	if (sensor_attr_set(lsm6dsl, SENSOR_CHAN_ACCEL_XYZ,
 80011e4:	2800      	cmp	r0, #0
 80011e6:	dbf2      	blt.n	80011ce <main+0x5e>
	if (api->attr_set == NULL) {
 80011e8:	682f      	ldr	r7, [r5, #0]
 80011ea:	b90f      	cbnz	r7, 80011f0 <main+0x80>
		printk("Cannot set sampling frequency for gyro.\n");
 80011ec:	487e      	ldr	r0, [pc, #504]	; (80013e8 <main+0x278>)
 80011ee:	e7ef      	b.n	80011d0 <main+0x60>
	return api->attr_set(dev, chan, attr, val);
 80011f0:	ab10      	add	r3, sp, #64	; 0x40
 80011f2:	4632      	mov	r2, r6
 80011f4:	2107      	movs	r1, #7
 80011f6:	4620      	mov	r0, r4
 80011f8:	47b8      	blx	r7
	if (sensor_attr_set(lsm6dsl, SENSOR_CHAN_GYRO_XYZ,
 80011fa:	2800      	cmp	r0, #0
 80011fc:	dbf6      	blt.n	80011ec <main+0x7c>
	trig.type = SENSOR_TRIG_DATA_READY;
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <main+0x27c>)
 8001200:	9307      	str	r3, [sp, #28]
	if (api->trigger_set == NULL) {
 8001202:	68ab      	ldr	r3, [r5, #8]
 8001204:	b11b      	cbz	r3, 800120e <main+0x9e>
	return api->trigger_set(dev, trig, handler);
 8001206:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <main+0x280>)
 8001208:	4873      	ldr	r0, [pc, #460]	; (80013d8 <main+0x268>)
 800120a:	a907      	add	r1, sp, #28
 800120c:	4798      	blx	r3
		if (sensor_sample_fetch(hts221) < 0) {
 800120e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80013cc <main+0x25c>
		if (sensor_sample_fetch(lps22hb) < 0) {
 8001212:	4d70      	ldr	r5, [pc, #448]	; (80013d4 <main+0x264>)
		ret = sensor_sample_fetch(lsm303agr_a);
 8001214:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80013dc <main+0x26c>
{
 8001218:	2401      	movs	r4, #1
		if (sensor_sample_fetch(hts221) < 0) {
 800121a:	4640      	mov	r0, r8
 800121c:	f003 fad5 	bl	80047ca <sensor_sample_fetch>
 8001220:	2800      	cmp	r0, #0
 8001222:	da03      	bge.n	800122c <main+0xbc>
			printf("HTS221 Sensor sample update error\n");
 8001224:	4873      	ldr	r0, [pc, #460]	; (80013f4 <main+0x284>)
			printf("LSM303AGR Magn Sensor sample update error\n");
 8001226:	f001 fb2d 	bl	8002884 <printf>
			return;
 800122a:	e7d3      	b.n	80011d4 <main+0x64>
		if (sensor_sample_fetch(lps22hb) < 0) {
 800122c:	4628      	mov	r0, r5
 800122e:	f003 facc 	bl	80047ca <sensor_sample_fetch>
 8001232:	2800      	cmp	r0, #0
 8001234:	da01      	bge.n	800123a <main+0xca>
			printf("LPS22HB Sensor sample update error\n");
 8001236:	4870      	ldr	r0, [pc, #448]	; (80013f8 <main+0x288>)
 8001238:	e7f5      	b.n	8001226 <main+0xb6>
		ret = sensor_sample_fetch(lsm303agr_a);
 800123a:	4648      	mov	r0, r9
 800123c:	f003 fac5 	bl	80047ca <sensor_sample_fetch>
		if (ret < 0 && ret != -EBADMSG) {
 8001240:	2800      	cmp	r0, #0
 8001242:	da03      	bge.n	800124c <main+0xdc>
 8001244:	304d      	adds	r0, #77	; 0x4d
 8001246:	d001      	beq.n	800124c <main+0xdc>
			printf("LSM303AGR Accel Sensor sample update error\n");
 8001248:	486c      	ldr	r0, [pc, #432]	; (80013fc <main+0x28c>)
 800124a:	e7ec      	b.n	8001226 <main+0xb6>
		if (sensor_sample_fetch(lsm303agr_m) < 0) {
 800124c:	4864      	ldr	r0, [pc, #400]	; (80013e0 <main+0x270>)
 800124e:	f003 fabc 	bl	80047ca <sensor_sample_fetch>
 8001252:	2800      	cmp	r0, #0
 8001254:	da01      	bge.n	800125a <main+0xea>
			printf("LSM303AGR Magn Sensor sample update error\n");
 8001256:	486a      	ldr	r0, [pc, #424]	; (8001400 <main+0x290>)
 8001258:	e7e5      	b.n	8001226 <main+0xb6>
		sensor_channel_get(hts221, SENSOR_CHAN_AMBIENT_TEMP, &temp1);
 800125a:	aa08      	add	r2, sp, #32
 800125c:	4640      	mov	r0, r8
 800125e:	210d      	movs	r1, #13
 8001260:	f003 fab7 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(hts221, SENSOR_CHAN_HUMIDITY, &hum);
 8001264:	aa0c      	add	r2, sp, #48	; 0x30
 8001266:	4640      	mov	r0, r8
 8001268:	2110      	movs	r1, #16
 800126a:	f003 fab2 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lps22hb, SENSOR_CHAN_PRESS, &press);
 800126e:	aa0e      	add	r2, sp, #56	; 0x38
 8001270:	4628      	mov	r0, r5
 8001272:	210e      	movs	r1, #14
 8001274:	f003 faad 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lps22hb, SENSOR_CHAN_AMBIENT_TEMP, &temp2);
 8001278:	aa0a      	add	r2, sp, #40	; 0x28
 800127a:	4628      	mov	r0, r5
 800127c:	210d      	movs	r1, #13
 800127e:	f003 faa8 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lsm6dsl, SENSOR_CHAN_ACCEL_XYZ, accel1);
 8001282:	aa12      	add	r2, sp, #72	; 0x48
 8001284:	4854      	ldr	r0, [pc, #336]	; (80013d8 <main+0x268>)
 8001286:	2103      	movs	r1, #3
 8001288:	f003 faa3 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lsm6dsl, SENSOR_CHAN_GYRO_XYZ, gyro);
 800128c:	aa1e      	add	r2, sp, #120	; 0x78
 800128e:	4852      	ldr	r0, [pc, #328]	; (80013d8 <main+0x268>)
 8001290:	2107      	movs	r1, #7
 8001292:	f003 fa9e 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lsm303agr_a, SENSOR_CHAN_ACCEL_XYZ, accel2);
 8001296:	aa18      	add	r2, sp, #96	; 0x60
 8001298:	4648      	mov	r0, r9
 800129a:	2103      	movs	r1, #3
 800129c:	f003 fa99 	bl	80047d2 <sensor_channel_get.isra.0>
		sensor_channel_get(lsm303agr_m, SENSOR_CHAN_MAGN_XYZ, magn);
 80012a0:	aa24      	add	r2, sp, #144	; 0x90
 80012a2:	210b      	movs	r1, #11
 80012a4:	484e      	ldr	r0, [pc, #312]	; (80013e0 <main+0x270>)
 80012a6:	f003 fa94 	bl	80047d2 <sensor_channel_get.isra.0>
		printf("\0033\014");
 80012aa:	4856      	ldr	r0, [pc, #344]	; (8001404 <main+0x294>)
 80012ac:	f001 faea 	bl	8002884 <printf>
		printf("X-NUCLEO-IKS01A2 sensor dashboard\n\n");
 80012b0:	4855      	ldr	r0, [pc, #340]	; (8001408 <main+0x298>)
 80012b2:	f001 fae7 	bl	8002884 <printf>
		printf("HTS221: Temperature: %.1f C\n",
 80012b6:	a808      	add	r0, sp, #32
 80012b8:	f7ff fd6e 	bl	8000d98 <sensor_value_to_double>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4852      	ldr	r0, [pc, #328]	; (800140c <main+0x29c>)
 80012c2:	f001 fadf 	bl	8002884 <printf>
		printf("HTS221: Relative Humidity: %.1f%%\n",
 80012c6:	a80c      	add	r0, sp, #48	; 0x30
 80012c8:	f7ff fd66 	bl	8000d98 <sensor_value_to_double>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	484f      	ldr	r0, [pc, #316]	; (8001410 <main+0x2a0>)
 80012d2:	f001 fad7 	bl	8002884 <printf>
		printf("LPS22HB: Pressure:%.3f kpa\n",
 80012d6:	a80e      	add	r0, sp, #56	; 0x38
 80012d8:	f7ff fd5e 	bl	8000d98 <sensor_value_to_double>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	484c      	ldr	r0, [pc, #304]	; (8001414 <main+0x2a4>)
 80012e2:	f001 facf 	bl	8002884 <printf>
		printf("LPS22HB: Temperature: %.1f C\n",
 80012e6:	a80a      	add	r0, sp, #40	; 0x28
 80012e8:	f7ff fd56 	bl	8000d98 <sensor_value_to_double>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4849      	ldr	r0, [pc, #292]	; (8001418 <main+0x2a8>)
 80012f2:	f001 fac7 	bl	8002884 <printf>
		printf("LSM6DSL: Accel (m.s-2): x: %.1f, y: %.1f, z: %.1f\n",
 80012f6:	a812      	add	r0, sp, #72	; 0x48
 80012f8:	f7ff fd4e 	bl	8000d98 <sensor_value_to_double>
 80012fc:	4682      	mov	sl, r0
 80012fe:	a814      	add	r0, sp, #80	; 0x50
 8001300:	468b      	mov	fp, r1
 8001302:	f7ff fd49 	bl	8000d98 <sensor_value_to_double>
 8001306:	4606      	mov	r6, r0
 8001308:	a816      	add	r0, sp, #88	; 0x58
 800130a:	460f      	mov	r7, r1
 800130c:	f7ff fd44 	bl	8000d98 <sensor_value_to_double>
 8001310:	4652      	mov	r2, sl
 8001312:	465b      	mov	r3, fp
 8001314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001318:	e9cd 6700 	strd	r6, r7, [sp]
 800131c:	483f      	ldr	r0, [pc, #252]	; (800141c <main+0x2ac>)
 800131e:	f001 fab1 	bl	8002884 <printf>
		printf("LSM6DSL: Gyro (dps): x: %.3f, y: %.3f, z: %.3f\n",
 8001322:	a81e      	add	r0, sp, #120	; 0x78
 8001324:	f7ff fd38 	bl	8000d98 <sensor_value_to_double>
 8001328:	4682      	mov	sl, r0
 800132a:	a820      	add	r0, sp, #128	; 0x80
 800132c:	468b      	mov	fp, r1
 800132e:	f7ff fd33 	bl	8000d98 <sensor_value_to_double>
 8001332:	4606      	mov	r6, r0
 8001334:	a822      	add	r0, sp, #136	; 0x88
 8001336:	460f      	mov	r7, r1
 8001338:	f7ff fd2e 	bl	8000d98 <sensor_value_to_double>
 800133c:	e9cd 6700 	strd	r6, r7, [sp]
 8001340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001344:	4652      	mov	r2, sl
 8001346:	465b      	mov	r3, fp
 8001348:	4835      	ldr	r0, [pc, #212]	; (8001420 <main+0x2b0>)
 800134a:	f001 fa9b 	bl	8002884 <printf>
		printf("%d:: lsm6dsl trig %d\n", cnt++, lsm6dsl_trig_cnt);
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <main+0x2b4>)
 8001350:	4835      	ldr	r0, [pc, #212]	; (8001428 <main+0x2b8>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4621      	mov	r1, r4
 8001356:	f001 fa95 	bl	8002884 <printf>
		printf("LSM303AGR: Accel (m.s-2): x: %.1f, y: %.1f, z: %.1f\n",
 800135a:	a818      	add	r0, sp, #96	; 0x60
 800135c:	f7ff fd1c 	bl	8000d98 <sensor_value_to_double>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	a81a      	add	r0, sp, #104	; 0x68
 8001366:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800136a:	f7ff fd15 	bl	8000d98 <sensor_value_to_double>
 800136e:	4606      	mov	r6, r0
 8001370:	a81c      	add	r0, sp, #112	; 0x70
 8001372:	460f      	mov	r7, r1
 8001374:	f7ff fd10 	bl	8000d98 <sensor_value_to_double>
 8001378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800137c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001380:	e9cd 6700 	strd	r6, r7, [sp]
 8001384:	4829      	ldr	r0, [pc, #164]	; (800142c <main+0x2bc>)
 8001386:	f001 fa7d 	bl	8002884 <printf>
		printf("LSM303AGR: Magn (gauss): x: %.3f, y: %.3f, z: %.3f\n",
 800138a:	a824      	add	r0, sp, #144	; 0x90
 800138c:	f7ff fd04 	bl	8000d98 <sensor_value_to_double>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	a826      	add	r0, sp, #152	; 0x98
 8001396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139a:	f7ff fcfd 	bl	8000d98 <sensor_value_to_double>
 800139e:	4606      	mov	r6, r0
 80013a0:	a828      	add	r0, sp, #160	; 0xa0
 80013a2:	460f      	mov	r7, r1
 80013a4:	f7ff fcf8 	bl	8000d98 <sensor_value_to_double>
 80013a8:	e9cd 6700 	strd	r6, r7, [sp]
 80013ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <main+0x2c0>)
 80013b6:	f001 fa65 	bl	8002884 <printf>
		printf("%d:: lsm6dsl trig %d\n", cnt++, lsm6dsl_trig_cnt);
 80013ba:	f104 0a01 	add.w	sl, r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80013be:	f644 6020 	movw	r0, #20000	; 0x4e20
 80013c2:	2100      	movs	r1, #0
 80013c4:	f003 f80a 	bl	80043dc <z_impl_k_sleep>
 80013c8:	4654      	mov	r4, sl
	while (1) {
 80013ca:	e726      	b.n	800121a <main+0xaa>
 80013cc:	08006624 	.word	0x08006624
 80013d0:	08006df4 	.word	0x08006df4
 80013d4:	0800666c 	.word	0x0800666c
 80013d8:	08006684 	.word	0x08006684
 80013dc:	0800663c 	.word	0x0800663c
 80013e0:	08006654 	.word	0x08006654
 80013e4:	08006e0b 	.word	0x08006e0b
 80013e8:	08006e3d 	.word	0x08006e3d
 80013ec:	00030001 	.word	0x00030001
 80013f0:	08001159 	.word	0x08001159
 80013f4:	08006e66 	.word	0x08006e66
 80013f8:	08006e89 	.word	0x08006e89
 80013fc:	08006ead 	.word	0x08006ead
 8001400:	08006ed9 	.word	0x08006ed9
 8001404:	08006f04 	.word	0x08006f04
 8001408:	08006f08 	.word	0x08006f08
 800140c:	08006f2c 	.word	0x08006f2c
 8001410:	08006f49 	.word	0x08006f49
 8001414:	08006f6c 	.word	0x08006f6c
 8001418:	08006f88 	.word	0x08006f88
 800141c:	08006fa6 	.word	0x08006fa6
 8001420:	08006fd9 	.word	0x08006fd9
 8001424:	20000760 	.word	0x20000760
 8001428:	08007009 	.word	0x08007009
 800142c:	0800701f 	.word	0x0800701f
 8001430:	08007054 	.word	0x08007054

08001434 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <char_out+0x8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4718      	bx	r3
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <__printk_hook_install>:
	_char_out = fn;
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <__printk_hook_install+0x8>)
 8001442:	6018      	str	r0, [r3, #0]
}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000

0800144c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 800144c:	b507      	push	{r0, r1, r2, lr}
 800144e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	4602      	mov	r2, r0
 8001454:	9100      	str	r1, [sp, #0]
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <vprintk+0x18>)
 8001458:	f000 f806 	bl	8001468 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800145c:	b003      	add	sp, #12
 800145e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001462:	bf00      	nop
 8001464:	08001435 	.word	0x08001435

08001468 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b09f      	sub	sp, #124	; 0x7c
 800146e:	4682      	mov	sl, r0
 8001470:	9103      	str	r1, [sp, #12]
 8001472:	4616      	mov	r6, r2
 8001474:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8001476:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8001478:	7830      	ldrb	r0, [r6, #0]
 800147a:	b910      	cbnz	r0, 8001482 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800147c:	4628      	mov	r0, r5
 800147e:	f000 bd8b 	b.w	8001f98 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
 8001482:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 8001484:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8001486:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8001488:	d006      	beq.n	8001498 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 800148a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 800148c:	47d0      	blx	sl
 800148e:	2800      	cmp	r0, #0
 8001490:	f2c0 8582 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 8001494:	3501      	adds	r5, #1
		if (bps == NULL) {
 8001496:	e22b      	b.n	80018f0 <z_cbvprintf_impl+0x488>
		} state = {
 8001498:	2218      	movs	r2, #24
 800149a:	2100      	movs	r1, #0
 800149c:	a810      	add	r0, sp, #64	; 0x40
 800149e:	f003 fc08 	bl	8004cb2 <memset>
	if (*sp == '%') {
 80014a2:	7873      	ldrb	r3, [r6, #1]
 80014a4:	2b25      	cmp	r3, #37	; 0x25
 80014a6:	d07d      	beq.n	80015a4 <z_cbvprintf_impl+0x13c>
 80014a8:	2300      	movs	r3, #0
 80014aa:	1c70      	adds	r0, r6, #1
 80014ac:	4698      	mov	r8, r3
 80014ae:	469e      	mov	lr, r3
 80014b0:	469c      	mov	ip, r3
 80014b2:	461f      	mov	r7, r3
 80014b4:	4601      	mov	r1, r0
		switch (*sp) {
 80014b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ba:	2a2b      	cmp	r2, #43	; 0x2b
 80014bc:	f000 80a1 	beq.w	8001602 <z_cbvprintf_impl+0x19a>
 80014c0:	f200 8098 	bhi.w	80015f4 <z_cbvprintf_impl+0x18c>
 80014c4:	2a20      	cmp	r2, #32
 80014c6:	f000 809f 	beq.w	8001608 <z_cbvprintf_impl+0x1a0>
 80014ca:	2a23      	cmp	r2, #35	; 0x23
 80014cc:	f000 809f 	beq.w	800160e <z_cbvprintf_impl+0x1a6>
 80014d0:	b12b      	cbz	r3, 80014de <z_cbvprintf_impl+0x76>
 80014d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80014d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014da:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80014de:	f1b8 0f00 	cmp.w	r8, #0
 80014e2:	d005      	beq.n	80014f0 <z_cbvprintf_impl+0x88>
 80014e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80014f0:	f1be 0f00 	cmp.w	lr, #0
 80014f4:	d005      	beq.n	8001502 <z_cbvprintf_impl+0x9a>
 80014f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001502:	f1bc 0f00 	cmp.w	ip, #0
 8001506:	d005      	beq.n	8001514 <z_cbvprintf_impl+0xac>
 8001508:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001514:	b12f      	cbz	r7, 8001522 <z_cbvprintf_impl+0xba>
 8001516:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 8001522:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001526:	f003 0044 	and.w	r0, r3, #68	; 0x44
 800152a:	2844      	cmp	r0, #68	; 0x44
 800152c:	d103      	bne.n	8001536 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
 800152e:	f36f 1386 	bfc	r3, #6, #1
 8001532:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 8001536:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 800153a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 800153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001540:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 8001544:	d17f      	bne.n	8001646 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
 8001546:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800154a:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 800154e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8001550:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	2a2e      	cmp	r2, #46	; 0x2e
 8001558:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800155c:	bf0c      	ite	eq
 800155e:	2101      	moveq	r1, #1
 8001560:	2100      	movne	r1, #0
 8001562:	f361 0241 	bfi	r2, r1, #1, #1
 8001566:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 800156a:	d178      	bne.n	800165e <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
 800156c:	785a      	ldrb	r2, [r3, #1]
 800156e:	2a2a      	cmp	r2, #42	; 0x2a
 8001570:	d06e      	beq.n	8001650 <z_cbvprintf_impl+0x1e8>
	++sp;
 8001572:	3301      	adds	r3, #1
	size_t val = 0;
 8001574:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8001576:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800157a:	4619      	mov	r1, r3
 800157c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001580:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001584:	2f09      	cmp	r7, #9
 8001586:	f240 80af 	bls.w	80016e8 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
 800158a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
 800158e:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 8001590:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8001594:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8001598:	460a      	mov	r2, r1
 800159a:	f360 0241 	bfi	r2, r0, #1, #1
 800159e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 80015a2:	e05c      	b.n	800165e <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
 80015a4:	1cb2      	adds	r2, r6, #2
 80015a6:	9206      	str	r2, [sp, #24]
 80015a8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 80015ac:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80015b0:	07df      	lsls	r7, r3, #31
 80015b2:	f140 8154 	bpl.w	800185e <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
 80015b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80015ba:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 80015bc:	2a00      	cmp	r2, #0
 80015be:	da08      	bge.n	80015d2 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
 80015c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80015c4:	f042 0204 	orr.w	r2, r2, #4
 80015c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 80015cc:	9a04      	ldr	r2, [sp, #16]
 80015ce:	4252      	negs	r2, r2
		int width = -1;
 80015d0:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 80015d2:	0758      	lsls	r0, r3, #29
 80015d4:	f140 814b 	bpl.w	800186e <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
 80015d8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 80015dc:	2f00      	cmp	r7, #0
 80015de:	f280 814a 	bge.w	8001876 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
 80015e2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80015e6:	f36f 0341 	bfc	r3, #1, #1
 80015ea:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 80015ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80015f2:	e140      	b.n	8001876 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
 80015f4:	2a2d      	cmp	r2, #45	; 0x2d
 80015f6:	d00d      	beq.n	8001614 <z_cbvprintf_impl+0x1ac>
 80015f8:	2a30      	cmp	r2, #48	; 0x30
 80015fa:	f47f af69 	bne.w	80014d0 <z_cbvprintf_impl+0x68>
 80015fe:	2301      	movs	r3, #1
	} while (loop);
 8001600:	e758      	b.n	80014b4 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
 8001602:	f04f 0c01 	mov.w	ip, #1
 8001606:	e755      	b.n	80014b4 <z_cbvprintf_impl+0x4c>
 8001608:	f04f 0e01 	mov.w	lr, #1
 800160c:	e752      	b.n	80014b4 <z_cbvprintf_impl+0x4c>
 800160e:	f04f 0801 	mov.w	r8, #1
 8001612:	e74f      	b.n	80014b4 <z_cbvprintf_impl+0x4c>
 8001614:	2701      	movs	r7, #1
 8001616:	e74d      	b.n	80014b4 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
 8001618:	fb0e 7202 	mla	r2, lr, r2, r7
 800161c:	3a30      	subs	r2, #48	; 0x30
 800161e:	4603      	mov	r3, r0
 8001620:	4618      	mov	r0, r3
 8001622:	f810 7b01 	ldrb.w	r7, [r0], #1
 8001626:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800162a:	f1bc 0f09 	cmp.w	ip, #9
 800162e:	d9f3      	bls.n	8001618 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
 8001630:	4299      	cmp	r1, r3
 8001632:	d08f      	beq.n	8001554 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
 8001634:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
 8001638:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 800163a:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 800163c:	f362 0141 	bfi	r1, r2, #1, #1
 8001640:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
 8001644:	e786      	b.n	8001554 <z_cbvprintf_impl+0xec>
 8001646:	460b      	mov	r3, r1
	size_t val = 0;
 8001648:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 800164a:	f04f 0e0a 	mov.w	lr, #10
 800164e:	e7e7      	b.n	8001620 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
 8001650:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001654:	f042 0204 	orr.w	r2, r2, #4
 8001658:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 800165c:	3302      	adds	r3, #2
	switch (*sp) {
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	2a6c      	cmp	r2, #108	; 0x6c
 8001662:	d061      	beq.n	8001728 <z_cbvprintf_impl+0x2c0>
 8001664:	d845      	bhi.n	80016f2 <z_cbvprintf_impl+0x28a>
 8001666:	2a68      	cmp	r2, #104	; 0x68
 8001668:	d04b      	beq.n	8001702 <z_cbvprintf_impl+0x29a>
 800166a:	2a6a      	cmp	r2, #106	; 0x6a
 800166c:	d065      	beq.n	800173a <z_cbvprintf_impl+0x2d2>
 800166e:	2a4c      	cmp	r2, #76	; 0x4c
 8001670:	d06b      	beq.n	800174a <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
 8001672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001676:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 8001678:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 800167a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 800167e:	f200 80ad 	bhi.w	80017dc <z_cbvprintf_impl+0x374>
 8001682:	2a6d      	cmp	r2, #109	; 0x6d
 8001684:	d86e      	bhi.n	8001764 <z_cbvprintf_impl+0x2fc>
 8001686:	2a69      	cmp	r2, #105	; 0x69
 8001688:	f200 80a8 	bhi.w	80017dc <z_cbvprintf_impl+0x374>
 800168c:	2a57      	cmp	r2, #87	; 0x57
 800168e:	f200 8088 	bhi.w	80017a2 <z_cbvprintf_impl+0x33a>
 8001692:	2a41      	cmp	r2, #65	; 0x41
 8001694:	d004      	beq.n	80016a0 <z_cbvprintf_impl+0x238>
 8001696:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 800169a:	2b02      	cmp	r3, #2
 800169c:	f200 809e 	bhi.w	80017dc <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
 80016a0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 80016a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 80016a8:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 80016aa:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 80016ae:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 80016b2:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 80016b6:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 80016ba:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 80016be:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 80016c2:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 80016c6:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 80016c8:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 80016cc:	b2cb      	uxtb	r3, r1
 80016ce:	f100 80c4 	bmi.w	800185a <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
 80016d2:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80016d6:	2a18      	cmp	r2, #24
 80016d8:	f040 80ae 	bne.w	8001838 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
 80016dc:	f36f 03c6 	bfc	r3, #3, #4
 80016e0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e09d      	b.n	8001824 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
 80016e8:	fb0c 0202 	mla	r2, ip, r2, r0
 80016ec:	3a30      	subs	r2, #48	; 0x30
 80016ee:	460b      	mov	r3, r1
 80016f0:	e743      	b.n	800157a <z_cbvprintf_impl+0x112>
	switch (*sp) {
 80016f2:	2a74      	cmp	r2, #116	; 0x74
 80016f4:	d025      	beq.n	8001742 <z_cbvprintf_impl+0x2da>
 80016f6:	2a7a      	cmp	r2, #122	; 0x7a
 80016f8:	d1bb      	bne.n	8001672 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
 80016fa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80016fe:	2106      	movs	r1, #6
 8001700:	e00c      	b.n	800171c <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
 8001702:	785a      	ldrb	r2, [r3, #1]
 8001704:	2a68      	cmp	r2, #104	; 0x68
 8001706:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800170a:	d106      	bne.n	800171a <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
 800170c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 800170e:	f361 02c6 	bfi	r2, r1, #3, #4
 8001712:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 8001716:	3302      	adds	r3, #2
 8001718:	e7ab      	b.n	8001672 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
 800171a:	2102      	movs	r1, #2
 800171c:	f361 02c6 	bfi	r2, r1, #3, #4
 8001720:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 8001724:	3301      	adds	r3, #1
 8001726:	e7a4      	b.n	8001672 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
 8001728:	785a      	ldrb	r2, [r3, #1]
 800172a:	2a6c      	cmp	r2, #108	; 0x6c
 800172c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001730:	d101      	bne.n	8001736 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
 8001732:	2104      	movs	r1, #4
 8001734:	e7eb      	b.n	800170e <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
 8001736:	2103      	movs	r1, #3
 8001738:	e7f0      	b.n	800171c <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
 800173a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800173e:	2105      	movs	r1, #5
 8001740:	e7ec      	b.n	800171c <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
 8001742:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001746:	2107      	movs	r1, #7
 8001748:	e7e8      	b.n	800171c <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
 800174a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800174e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001752:	f022 0202 	bic.w	r2, r2, #2
 8001756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800175a:	f042 0202 	orr.w	r2, r2, #2
 800175e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 8001762:	e7df      	b.n	8001724 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
 8001764:	3a6e      	subs	r2, #110	; 0x6e
 8001766:	b2d3      	uxtb	r3, r2
 8001768:	2201      	movs	r2, #1
 800176a:	409a      	lsls	r2, r3
 800176c:	f240 4382 	movw	r3, #1154	; 0x482
 8001770:	421a      	tst	r2, r3
 8001772:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001776:	d138      	bne.n	80017ea <z_cbvprintf_impl+0x382>
 8001778:	f012 0f24 	tst.w	r2, #36	; 0x24
 800177c:	d160      	bne.n	8001840 <z_cbvprintf_impl+0x3d8>
 800177e:	07d1      	lsls	r1, r2, #31
 8001780:	d52c      	bpl.n	80017dc <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
 8001782:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001786:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800178a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 800178e:	2103      	movs	r1, #3
 8001790:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001794:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
 8001798:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800179c:	eb43 030c 	adc.w	r3, r3, ip
 80017a0:	e040      	b.n	8001824 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
 80017a2:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80017a6:	b2c9      	uxtb	r1, r1
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f101 	lsl.w	r1, r0, r1
 80017ae:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80017b2:	f47f af75 	bne.w	80016a0 <z_cbvprintf_impl+0x238>
 80017b6:	f640 0301 	movw	r3, #2049	; 0x801
 80017ba:	4219      	tst	r1, r3
 80017bc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80017c0:	d119      	bne.n	80017f6 <z_cbvprintf_impl+0x38e>
 80017c2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 80017c6:	d009      	beq.n	80017dc <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
 80017c8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80017cc:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80017d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80017d4:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80017d6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80017da:	d183      	bne.n	80016e4 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
 80017dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 80017e8:	e77c      	b.n	80016e4 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
 80017ea:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80017ee:	2102      	movs	r1, #2
 80017f0:	f361 0202 	bfi	r2, r1, #0, #3
 80017f4:	e7ec      	b.n	80017d0 <z_cbvprintf_impl+0x368>
 80017f6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 80017fa:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 80017fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8001800:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001804:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8001806:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 800180a:	bf02      	ittt	eq
 800180c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8001810:	f041 0101 	orreq.w	r1, r1, #1
 8001814:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8001818:	2a63      	cmp	r2, #99	; 0x63
 800181a:	f47f af63 	bne.w	80016e4 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800181e:	3b00      	subs	r3, #0
 8001820:	bf18      	it	ne
 8001822:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001824:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001828:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800182c:	430b      	orrs	r3, r1
 800182e:	f363 0241 	bfi	r2, r3, #1, #1
 8001832:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 8001836:	e6b9      	b.n	80015ac <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
 8001838:	f013 0f38 	tst.w	r3, #56	; 0x38
 800183c:	d1ce      	bne.n	80017dc <z_cbvprintf_impl+0x374>
 800183e:	e751      	b.n	80016e4 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
 8001840:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001844:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8001846:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800184a:	f361 0202 	bfi	r2, r1, #0, #3
 800184e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	e7e4      	b.n	8001824 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
 800185a:	2301      	movs	r3, #1
 800185c:	e7e2      	b.n	8001824 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
 800185e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 8001862:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001864:	bfb4      	ite	lt
 8001866:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8001868:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
 800186c:	e6b0      	b.n	80015d0 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
 800186e:	0799      	lsls	r1, r3, #30
 8001870:	f57f aebd 	bpl.w	80015ee <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
 8001874:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 8001876:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
 800187a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 800187c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8001880:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	2a04      	cmp	r2, #4
 800188a:	d107      	bne.n	800189c <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
 800188c:	078a      	lsls	r2, r1, #30
 800188e:	d405      	bmi.n	800189c <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
 8001890:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 8001894:	2a00      	cmp	r2, #0
 8001896:	bfac      	ite	ge
 8001898:	2706      	movge	r7, #6
 800189a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 800189c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80018a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80018a2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80018a6:	d133      	bne.n	8001910 <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
 80018a8:	1ecb      	subs	r3, r1, #3
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d804      	bhi.n	80018b8 <z_cbvprintf_impl+0x450>
 80018ae:	e8df f003 	tbb	[pc, r3]
 80018b2:	4621      	.short	0x4621
 80018b4:	2146      	.short	0x2146
 80018b6:	21          	.byte	0x21
 80018b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80018b8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80018ba:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 80018bc:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80018c0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 80018c4:	d11c      	bne.n	8001900 <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
 80018c6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 80018ca:	17da      	asrs	r2, r3, #31
 80018cc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 80018d0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80018d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80018d6:	9307      	str	r3, [sp, #28]
 80018d8:	079b      	lsls	r3, r3, #30
 80018da:	d050      	beq.n	800197e <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
 80018dc:	9b06      	ldr	r3, [sp, #24]
 80018de:	9903      	ldr	r1, [sp, #12]
 80018e0:	4632      	mov	r2, r6
 80018e2:	4650      	mov	r0, sl
 80018e4:	f003 f806 	bl	80048f4 <outs>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f2c0 8355 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 80018ee:	4405      	add	r5, r0
			continue;
 80018f0:	9e06      	ldr	r6, [sp, #24]
 80018f2:	e5c1      	b.n	8001478 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80018f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80018f8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 80018fa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80018fe:	e7e8      	b.n	80018d2 <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
 8001900:	2902      	cmp	r1, #2
 8001902:	d1e5      	bne.n	80018d0 <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
 8001904:	b21a      	sxth	r2, r3
 8001906:	f343 33c0 	sbfx	r3, r3, #15, #1
 800190a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800190e:	e7df      	b.n	80018d0 <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001910:	2b02      	cmp	r3, #2
 8001912:	d124      	bne.n	800195e <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
 8001914:	1ecb      	subs	r3, r1, #3
 8001916:	2b04      	cmp	r3, #4
 8001918:	d804      	bhi.n	8001924 <z_cbvprintf_impl+0x4bc>
 800191a:	e8df f003 	tbb	[pc, r3]
 800191e:	1018      	.short	0x1018
 8001920:	1810      	.short	0x1810
 8001922:	18          	.byte	0x18
 8001923:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8001924:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8001926:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	d014      	beq.n	800195a <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
 8001930:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8001932:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 8001936:	d1cc      	bne.n	80018d2 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
 8001938:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 800193a:	9310      	str	r3, [sp, #64]	; 0x40
 800193c:	e7c9      	b.n	80018d2 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
 800193e:	3407      	adds	r4, #7
 8001940:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8001944:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8001948:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 800194c:	e7c1      	b.n	80018d2 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
 800194e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001952:	9310      	str	r3, [sp, #64]	; 0x40
 8001954:	2300      	movs	r3, #0
 8001956:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8001958:	e7bb      	b.n	80018d2 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
 800195a:	b2db      	uxtb	r3, r3
 800195c:	e7cd      	b.n	80018fa <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
 800195e:	2b04      	cmp	r3, #4
 8001960:	d108      	bne.n	8001974 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
 8001962:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8001964:	f024 0407 	bic.w	r4, r4, #7
 8001968:	e9d4 2300 	ldrd	r2, r3, [r4]
 800196c:	3408      	adds	r4, #8
 800196e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001972:	e7ae      	b.n	80018d2 <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8001974:	2b03      	cmp	r3, #3
 8001976:	d1ac      	bne.n	80018d2 <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
 8001978:	f854 3b04 	ldr.w	r3, [r4], #4
 800197c:	e7dd      	b.n	800193a <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
 800197e:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 8001982:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 8001986:	d8b3      	bhi.n	80018f0 <z_cbvprintf_impl+0x488>
 8001988:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 800198c:	d849      	bhi.n	8001a22 <z_cbvprintf_impl+0x5ba>
 800198e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001992:	f000 8091 	beq.w	8001ab8 <z_cbvprintf_impl+0x650>
 8001996:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 800199a:	d9a9      	bls.n	80018f0 <z_cbvprintf_impl+0x488>
 800199c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 80019a0:	d003      	beq.n	80019aa <z_cbvprintf_impl+0x542>
 80019a2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 80019a6:	2a02      	cmp	r2, #2
 80019a8:	d8a2      	bhi.n	80018f0 <z_cbvprintf_impl+0x488>
	} u = {
 80019aa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	f2c0 8136 	blt.w	8001c20 <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
 80019b4:	9b07      	ldr	r3, [sp, #28]
 80019b6:	0718      	lsls	r0, r3, #28
 80019b8:	f100 8135 	bmi.w	8001c26 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
 80019bc:	f3c3 1900 	ubfx	r9, r3, #4, #1
 80019c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80019c4:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80019c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 80019cc:	2800      	cmp	r0, #0
 80019ce:	f040 812d 	bne.w	8001c2c <z_cbvprintf_impl+0x7c4>
 80019d2:	ea51 0602 	orrs.w	r6, r1, r2
 80019d6:	bf14      	ite	ne
 80019d8:	2601      	movne	r6, #1
 80019da:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 80019dc:	02d2      	lsls	r2, r2, #11
 80019de:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 80019e2:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80019e4:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 80019e8:	ea40 0e01 	orr.w	lr, r0, r1
 80019ec:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 80019f0:	bf08      	it	eq
 80019f2:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 80019f6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 80019fa:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 80019fe:	f000 8199 	beq.w	8001d34 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	f040 8144 	bne.w	8001c90 <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
 8001a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001a0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001a0e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 8001a12:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001a14:	2000      	movs	r0, #0
 8001a16:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8001a1a:	4606      	mov	r6, r0
		fract *= 5U;
 8001a1c:	f04f 0c05 	mov.w	ip, #5
 8001a20:	e150      	b.n	8001cc4 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
 8001a22:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
 8001a26:	2a20      	cmp	r2, #32
 8001a28:	f63f af62 	bhi.w	80018f0 <z_cbvprintf_impl+0x488>
 8001a2c:	a001      	add	r0, pc, #4	; (adr r0, 8001a34 <z_cbvprintf_impl+0x5cc>)
 8001a2e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001bbf 	.word	0x08001bbf
 8001a38:	080018f1 	.word	0x080018f1
 8001a3c:	080018f1 	.word	0x080018f1
 8001a40:	080018f1 	.word	0x080018f1
 8001a44:	080018f1 	.word	0x080018f1
 8001a48:	080018f1 	.word	0x080018f1
 8001a4c:	080018f1 	.word	0x080018f1
 8001a50:	080018f1 	.word	0x080018f1
 8001a54:	080018f1 	.word	0x080018f1
 8001a58:	080019ab 	.word	0x080019ab
 8001a5c:	080018f1 	.word	0x080018f1
 8001a60:	08001b43 	.word	0x08001b43
 8001a64:	08001b57 	.word	0x08001b57
 8001a68:	080019ab 	.word	0x080019ab
 8001a6c:	080019ab 	.word	0x080019ab
 8001a70:	080019ab 	.word	0x080019ab
 8001a74:	080018f1 	.word	0x080018f1
 8001a78:	08001b57 	.word	0x08001b57
 8001a7c:	080018f1 	.word	0x080018f1
 8001a80:	080018f1 	.word	0x080018f1
 8001a84:	080018f1 	.word	0x080018f1
 8001a88:	080018f1 	.word	0x080018f1
 8001a8c:	08001bf9 	.word	0x08001bf9
 8001a90:	08001bbf 	.word	0x08001bbf
 8001a94:	08001bc5 	.word	0x08001bc5
 8001a98:	080018f1 	.word	0x080018f1
 8001a9c:	080018f1 	.word	0x080018f1
 8001aa0:	08001abf 	.word	0x08001abf
 8001aa4:	080018f1 	.word	0x080018f1
 8001aa8:	08001bbf 	.word	0x08001bbf
 8001aac:	080018f1 	.word	0x080018f1
 8001ab0:	080018f1 	.word	0x080018f1
 8001ab4:	08001bbf 	.word	0x08001bbf
			OUTC('%');
 8001ab8:	9903      	ldr	r1, [sp, #12]
 8001aba:	4658      	mov	r0, fp
 8001abc:	e4e6      	b.n	800148c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 8001abe:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 8001ac0:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 8001ac2:	db3a      	blt.n	8001b3a <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f003 f8d3 	bl	8004c72 <strnlen>
			bpe = bps + len;
 8001acc:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 8001ace:	2e00      	cmp	r6, #0
 8001ad0:	f43f af0e 	beq.w	80018f0 <z_cbvprintf_impl+0x488>
		char sign = 0;
 8001ad4:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 8001ad8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8001adc:	f013 0210 	ands.w	r2, r3, #16
 8001ae0:	9205      	str	r2, [sp, #20]
 8001ae2:	f000 824e 	beq.w	8001f82 <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
 8001ae6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8001ae8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 8001aec:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 8001af0:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 8001af2:	bf18      	it	ne
 8001af4:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 8001af6:	f8cd 801c 	str.w	r8, [sp, #28]
 8001afa:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 8001afc:	bf18      	it	ne
 8001afe:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 8001b00:	9b04      	ldr	r3, [sp, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f340 8258 	ble.w	8001fb8 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
 8001b08:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8001b0c:	1a1b      	subs	r3, r3, r0
 8001b0e:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 8001b10:	0753      	lsls	r3, r2, #29
 8001b12:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 8001b16:	f100 824f 	bmi.w	8001fb8 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
 8001b1a:	0650      	lsls	r0, r2, #25
 8001b1c:	f140 823f 	bpl.w	8001f9e <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
 8001b20:	f1b9 0f00 	cmp.w	r9, #0
 8001b24:	d007      	beq.n	8001b36 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
 8001b26:	9903      	ldr	r1, [sp, #12]
 8001b28:	4648      	mov	r0, r9
 8001b2a:	47d0      	blx	sl
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	f2c0 8233 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 8001b32:	3501      	adds	r5, #1
						sign = 0;
 8001b34:	46d9      	mov	r9, fp
					pad = '0';
 8001b36:	2230      	movs	r2, #48	; 0x30
 8001b38:	e232      	b.n	8001fa0 <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	f003 f892 	bl	8004c64 <strlen>
 8001b40:	e7c4      	b.n	8001acc <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001b44:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 8001b48:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 8001b4c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 8001b50:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8001b52:	2001      	movs	r0, #1
 8001b54:	e7c0      	b.n	8001ad8 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
 8001b56:	9b07      	ldr	r3, [sp, #28]
 8001b58:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
 8001b5a:	bf58      	it	pl
 8001b5c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 8001b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 8001b64:	bf54      	ite	pl
 8001b66:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 8001b6a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da06      	bge.n	8001b80 <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
 8001b72:	4252      	negs	r2, r2
 8001b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8001b7c:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8001b80:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8001b8c:	aa12      	add	r2, sp, #72	; 0x48
 8001b8e:	f002 fe6b 	bl	8004868 <encode_uint>
 8001b92:	4606      	mov	r6, r0
			if (precision >= 0) {
 8001b94:	2f00      	cmp	r7, #0
 8001b96:	db0c      	blt.n	8001bb2 <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
 8001b98:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 8001b9c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001ba0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 8001ba2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8001ba6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8001ba8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 8001bac:	d901      	bls.n	8001bb2 <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
 8001bae:	1afb      	subs	r3, r7, r3
 8001bb0:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 8001bb2:	2e00      	cmp	r6, #0
 8001bb4:	f43f ae9c 	beq.w	80018f0 <z_cbvprintf_impl+0x488>
 8001bb8:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 8001bbc:	e056      	b.n	8001c6c <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
 8001bbe:	f04f 0900 	mov.w	r9, #0
 8001bc2:	e7dd      	b.n	8001b80 <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
 8001bc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	f000 81d6 	beq.w	8001f78 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001bcc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	aa12      	add	r2, sp, #72	; 0x48
 8001bd4:	ab17      	add	r3, sp, #92	; 0x5c
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f002 fe46 	bl	8004868 <encode_uint>
				conv->altform_0c = true;
 8001bdc:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8001be0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001be4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8001be8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001bec:	4606      	mov	r6, r0
				conv->altform_0c = true;
 8001bee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 8001bf2:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 8001bf6:	e7cd      	b.n	8001b94 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
 8001bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 8001bfa:	2907      	cmp	r1, #7
 8001bfc:	f63f ae78 	bhi.w	80018f0 <z_cbvprintf_impl+0x488>
 8001c00:	e8df f001 	tbb	[pc, r1]
 8001c04:	0c06040c 	.word	0x0c06040c
 8001c08:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8001c0c:	701d      	strb	r5, [r3, #0]
		break;
 8001c0e:	e66f      	b.n	80018f0 <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
 8001c10:	801d      	strh	r5, [r3, #0]
		break;
 8001c12:	e66d      	b.n	80018f0 <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
 8001c14:	17ea      	asrs	r2, r5, #31
 8001c16:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8001c1a:	e669      	b.n	80018f0 <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8001c1c:	601d      	str	r5, [r3, #0]
		break;
 8001c1e:	e667      	b.n	80018f0 <z_cbvprintf_impl+0x488>
		*sign = '-';
 8001c20:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8001c24:	e6ce      	b.n	80019c4 <z_cbvprintf_impl+0x55c>
		*sign = '+';
 8001c26:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8001c2a:	e6cb      	b.n	80019c4 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8001c2c:	f240 76ff 	movw	r6, #2047	; 0x7ff
 8001c30:	42b0      	cmp	r0, r6
 8001c32:	d12a      	bne.n	8001c8a <z_cbvprintf_impl+0x822>
		if (fract == 0) {
 8001c34:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8001c36:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
 8001c3a:	d11e      	bne.n	8001c7a <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c)) {
 8001c3c:	2b1a      	cmp	r3, #26
 8001c3e:	bf35      	itete	cc
 8001c40:	2349      	movcc	r3, #73	; 0x49
 8001c42:	2369      	movcs	r3, #105	; 0x69
 8001c44:	214e      	movcc	r1, #78	; 0x4e
 8001c46:	216e      	movcs	r1, #110	; 0x6e
 8001c48:	bf34      	ite	cc
 8001c4a:	2246      	movcc	r2, #70	; 0x46
 8001c4c:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
 8001c4e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 8001c52:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 8001c56:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 8001c5a:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 8001c5e:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 8001c62:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 8001c66:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 8001c6a:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8001c6c:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8001c6e:	f1b9 0f00 	cmp.w	r9, #0
 8001c72:	f43f af31 	beq.w	8001ad8 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
 8001c76:	3001      	adds	r0, #1
 8001c78:	e72e      	b.n	8001ad8 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c)) {
 8001c7a:	2b19      	cmp	r3, #25
 8001c7c:	bf8b      	itete	hi
 8001c7e:	236e      	movhi	r3, #110	; 0x6e
 8001c80:	234e      	movls	r3, #78	; 0x4e
 8001c82:	2161      	movhi	r1, #97	; 0x61
 8001c84:	2141      	movls	r1, #65	; 0x41
 8001c86:	461a      	mov	r2, r3
 8001c88:	e7e1      	b.n	8001c4e <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8001c8a:	2600      	movs	r6, #0
 8001c8c:	e6a6      	b.n	80019dc <z_cbvprintf_impl+0x574>
				expo--;
 8001c8e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8001c90:	1849      	adds	r1, r1, r1
 8001c92:	4152      	adcs	r2, r2
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	dafa      	bge.n	8001c8e <z_cbvprintf_impl+0x826>
 8001c98:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8001c9c:	e6b4      	b.n	8001a08 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
 8001c9e:	0849      	lsrs	r1, r1, #1
 8001ca0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8001ca4:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8001ca6:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 8001caa:	4640      	mov	r0, r8
			expo++;
 8001cac:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8001cb0:	d2f5      	bcs.n	8001c9e <z_cbvprintf_impl+0x836>
		fract *= 5U;
 8001cb2:	fb0c fe02 	mul.w	lr, ip, r2
 8001cb6:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 8001cba:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 8001cbe:	4472      	add	r2, lr
		decexp--;
 8001cc0:	3e01      	subs	r6, #1
 8001cc2:	2001      	movs	r0, #1
	while (expo < -2) {
 8001cc4:	f118 0f02 	cmn.w	r8, #2
 8001cc8:	dbe9      	blt.n	8001c9e <z_cbvprintf_impl+0x836>
 8001cca:	b108      	cbz	r0, 8001cd0 <z_cbvprintf_impl+0x868>
 8001ccc:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 8001cd0:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 8001cd4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 8001cd8:	dc2f      	bgt.n	8001d3a <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
 8001cda:	f1c8 0004 	rsb	r0, r8, #4
 8001cde:	f108 081c 	add.w	r8, r8, #28
 8001ce2:	f1a0 0c20 	sub.w	ip, r0, #32
 8001ce6:	40c2      	lsrs	r2, r0
 8001ce8:	fa21 f300 	lsr.w	r3, r1, r0
 8001cec:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
 8001cf0:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 8001cf4:	ea42 0208 	orr.w	r2, r2, r8
 8001cf8:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
 8001cfc:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 8001cfe:	ea42 020c 	orr.w	r2, r2, ip
 8001d02:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8001d04:	d13a      	bne.n	8001d7c <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
 8001d06:	1cf3      	adds	r3, r6, #3
 8001d08:	db01      	blt.n	8001d0e <z_cbvprintf_impl+0x8a6>
 8001d0a:	42b7      	cmp	r7, r6
 8001d0c:	da2b      	bge.n	8001d66 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
 8001d0e:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 8001d12:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 8001d14:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 8001d18:	dd7f      	ble.n	8001e1a <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
 8001d1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8001d1e:	0680      	lsls	r0, r0, #26
				precision--;
 8001d20:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8001d24:	d479      	bmi.n	8001e1a <z_cbvprintf_impl+0x9b2>
 8001d26:	1e3b      	subs	r3, r7, #0
 8001d28:	bf18      	it	ne
 8001d2a:	2301      	movne	r3, #1
	bool prune_zero = false;
 8001d2c:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 8001d2e:	f107 0801 	add.w	r8, r7, #1
 8001d32:	e02d      	b.n	8001d90 <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001d34:	f04f 0800 	mov.w	r8, #0
 8001d38:	e66c      	b.n	8001a14 <z_cbvprintf_impl+0x5ac>
		fract += 2;
 8001d3a:	3202      	adds	r2, #2
 8001d3c:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 8001d40:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 8001d42:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 8001d46:	f002 fd60 	bl	800480a <_ldiv5>
		expo--;
 8001d4a:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8001d4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
 8001d52:	3601      	adds	r6, #1
			fract <<= 1;
 8001d54:	1892      	adds	r2, r2, r2
 8001d56:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 8001d58:	2900      	cmp	r1, #0
			expo--;
 8001d5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8001d5e:	daf9      	bge.n	8001d54 <z_cbvprintf_impl+0x8ec>
 8001d60:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8001d64:	e7b4      	b.n	8001cd0 <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
 8001d66:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001d6a:	0699      	lsls	r1, r3, #26
			precision -= decexp;
 8001d6c:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 8001d70:	d451      	bmi.n	8001e16 <z_cbvprintf_impl+0x9ae>
 8001d72:	1e3b      	subs	r3, r7, #0
 8001d74:	bf18      	it	ne
 8001d76:	2301      	movne	r3, #1
	bool prune_zero = false;
 8001d78:	9305      	str	r3, [sp, #20]
 8001d7a:	e004      	b.n	8001d86 <z_cbvprintf_impl+0x91e>
 8001d7c:	2300      	movs	r3, #0
	if (c == 'f') {
 8001d7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 8001d82:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 8001d84:	d1d3      	bne.n	8001d2e <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
 8001d86:	eb17 0806 	adds.w	r8, r7, r6
 8001d8a:	f04f 0b66 	mov.w	fp, #102	; 0x66
 8001d8e:	d446      	bmi.n	8001e1e <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
 8001d90:	f1b8 0f10 	cmp.w	r8, #16
 8001d94:	bfa8      	it	ge
 8001d96:	f04f 0810 	movge.w	r8, #16
 8001d9a:	2010      	movs	r0, #16
 8001d9c:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
 8001d9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001da2:	2000      	movs	r0, #0
 8001da4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
 8001da8:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 8001dac:	f1b8 0f00 	cmp.w	r8, #0
 8001db0:	d138      	bne.n	8001e24 <z_cbvprintf_impl+0x9bc>
	fract += round;
 8001db2:	9908      	ldr	r1, [sp, #32]
 8001db4:	1812      	adds	r2, r2, r0
 8001db6:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 8001dba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001dbe:	d23f      	bcs.n	8001e40 <z_cbvprintf_impl+0x9d8>
	fract += round;
 8001dc0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 8001dc4:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 8001dc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 8001dca:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 8001dce:	f040 80b2 	bne.w	8001f36 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	dc3f      	bgt.n	8001e56 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
 8001dd6:	2130      	movs	r1, #48	; 0x30
 8001dd8:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d163      	bne.n	8001ea8 <z_cbvprintf_impl+0xa40>
 8001de0:	2f00      	cmp	r7, #0
 8001de2:	f340 81a8 	ble.w	8002136 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 8001de6:	222e      	movs	r2, #46	; 0x2e
 8001de8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8001dec:	b186      	cbz	r6, 8001e10 <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
 8001dee:	4272      	negs	r2, r6
 8001df0:	42ba      	cmp	r2, r7
 8001df2:	bfa8      	it	ge
 8001df4:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 8001df6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8001dfa:	9213      	str	r2, [sp, #76]	; 0x4c
 8001dfc:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 8001dfe:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 8001e02:	bfd4      	ite	le
 8001e04:	2200      	movle	r2, #0
 8001e06:	2201      	movgt	r2, #1
 8001e08:	f362 1145 	bfi	r1, r2, #5, #1
 8001e0c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 8001e10:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 8001e14:	e037      	b.n	8001e86 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e7ae      	b.n	8001d78 <z_cbvprintf_impl+0x910>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e786      	b.n	8001d2c <z_cbvprintf_impl+0x8c4>
			decimals = 0;
 8001e1e:	f04f 0800 	mov.w	r8, #0
 8001e22:	e7ba      	b.n	8001d9a <z_cbvprintf_impl+0x932>
	*v >>= 1;
 8001e24:	0840      	lsrs	r0, r0, #1
 8001e26:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 8001e30:	a80e      	add	r0, sp, #56	; 0x38
 8001e32:	9209      	str	r2, [sp, #36]	; 0x24
 8001e34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001e38:	f002 fce7 	bl	800480a <_ldiv5>
 8001e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
 8001e3e:	e7b3      	b.n	8001da8 <z_cbvprintf_impl+0x940>
	*v >>= 1;
 8001e40:	0852      	lsrs	r2, r2, #1
 8001e42:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 8001e46:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 8001e48:	0849      	lsrs	r1, r1, #1
 8001e4a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 8001e4e:	3601      	adds	r6, #1
	_ldiv5(v);
 8001e50:	f002 fcdb 	bl	800480a <_ldiv5>
		decexp++;
 8001e54:	e7b6      	b.n	8001dc4 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
 8001e56:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 8001e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	dd09      	ble.n	8001e74 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
 8001e60:	a90b      	add	r1, sp, #44	; 0x2c
 8001e62:	a80c      	add	r0, sp, #48	; 0x30
 8001e64:	9207      	str	r2, [sp, #28]
 8001e66:	f002 fce8 	bl	800483a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8001e6a:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 8001e6c:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 8001e70:	9a07      	ldr	r2, [sp, #28]
 8001e72:	d1f2      	bne.n	8001e5a <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
 8001e74:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8001e76:	b99a      	cbnz	r2, 8001ea0 <z_cbvprintf_impl+0xa38>
 8001e78:	2f00      	cmp	r7, #0
 8001e7a:	f340 815a 	ble.w	8002132 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 8001e7e:	212e      	movs	r1, #46	; 0x2e
 8001e80:	f808 1b01 	strb.w	r1, [r8], #1
 8001e84:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	dd17      	ble.n	8001eba <z_cbvprintf_impl+0xa52>
 8001e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	dd14      	ble.n	8001eba <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
 8001e90:	a90b      	add	r1, sp, #44	; 0x2c
 8001e92:	a80c      	add	r0, sp, #48	; 0x30
 8001e94:	f002 fcd1 	bl	800483a <_get_digit>
		precision--;
 8001e98:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 8001e9a:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 8001e9e:	e7f2      	b.n	8001e86 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
 8001ea0:	222e      	movs	r2, #46	; 0x2e
 8001ea2:	f808 2b01 	strb.w	r2, [r8], #1
 8001ea6:	e7ed      	b.n	8001e84 <z_cbvprintf_impl+0xa1c>
 8001ea8:	222e      	movs	r2, #46	; 0x2e
 8001eaa:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d0ae      	beq.n	8001e10 <z_cbvprintf_impl+0x9a8>
 8001eb2:	2f00      	cmp	r7, #0
 8001eb4:	dc9b      	bgt.n	8001dee <z_cbvprintf_impl+0x986>
			*buf++ = '.';
 8001eb6:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 8001eba:	9b05      	ldr	r3, [sp, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d14e      	bne.n	8001f5e <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
 8001ec0:	9714      	str	r7, [sp, #80]	; 0x50
 8001ec2:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 8001ec4:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8001ec8:	2a45      	cmp	r2, #69	; 0x45
 8001eca:	d123      	bne.n	8001f14 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
 8001ecc:	2e00      	cmp	r6, #0
			decexp = -decexp;
 8001ece:	bfba      	itte	lt
 8001ed0:	4276      	neglt	r6, r6
			*buf++ = '-';
 8001ed2:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8001ed4:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 8001ed6:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 8001ed8:	bfc8      	it	gt
 8001eda:	2164      	movgt	r1, #100	; 0x64
 8001edc:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 8001ede:	bfd1      	iteee	le
 8001ee0:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 8001ee2:	fbb6 f3f1 	udivgt	r3, r6, r1
 8001ee6:	1cfa      	addgt	r2, r7, #3
 8001ee8:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 8001eec:	bfc8      	it	gt
 8001eee:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8001ef2:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 8001ef6:	bfc8      	it	gt
 8001ef8:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 8001efa:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 8001efe:	fbb6 f3f1 	udiv	r3, r6, r1
 8001f02:	4617      	mov	r7, r2
 8001f04:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8001f08:	fb01 6313 	mls	r3, r1, r3, r6
 8001f0c:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8001f0e:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 8001f12:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 8001f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dc2c      	bgt.n	8001f74 <z_cbvprintf_impl+0xb0c>
 8001f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bfd4      	ite	le
 8001f20:	2300      	movle	r3, #0
 8001f22:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8001f24:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001f28:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8001f2c:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8001f2e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 8001f32:	703b      	strb	r3, [r7, #0]
	return bps;
 8001f34:	e699      	b.n	8001c6a <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
 8001f36:	a90b      	add	r1, sp, #44	; 0x2c
 8001f38:	a80c      	add	r0, sp, #48	; 0x30
 8001f3a:	9207      	str	r2, [sp, #28]
 8001f3c:	f002 fc7d 	bl	800483a <_get_digit>
		if (*buf++ != '0') {
 8001f40:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 8001f42:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 8001f46:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8001f48:	bf18      	it	ne
 8001f4a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 8001f4e:	b912      	cbnz	r2, 8001f56 <z_cbvprintf_impl+0xaee>
 8001f50:	2f00      	cmp	r7, #0
 8001f52:	f340 80f0 	ble.w	8002136 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 8001f56:	222e      	movs	r2, #46	; 0x2e
 8001f58:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8001f5c:	e758      	b.n	8001e10 <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
 8001f5e:	4647      	mov	r7, r8
 8001f60:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001f64:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001f68:	2a30      	cmp	r2, #48	; 0x30
 8001f6a:	d0f8      	beq.n	8001f5e <z_cbvprintf_impl+0xaf6>
 8001f6c:	2a2e      	cmp	r2, #46	; 0x2e
 8001f6e:	bf08      	it	eq
 8001f70:	4647      	moveq	r7, r8
 8001f72:	e7a7      	b.n	8001ec4 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
 8001f74:	2301      	movs	r3, #1
 8001f76:	e7d5      	b.n	8001f24 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
 8001f78:	4f70      	ldr	r7, [pc, #448]	; (800213c <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
 8001f7a:	4681      	mov	r9, r0
			bps = "(nil)";
 8001f7c:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 8001f7e:	2005      	movs	r0, #5
 8001f80:	e5aa      	b.n	8001ad8 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
 8001f82:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8001f84:	bf48      	it	mi
 8001f86:	3001      	addmi	r0, #1
 8001f88:	e5ae      	b.n	8001ae8 <z_cbvprintf_impl+0x680>
					OUTC(pad);
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f8e:	9903      	ldr	r1, [sp, #12]
 8001f90:	47d0      	blx	sl
 8001f92:	2800      	cmp	r0, #0
 8001f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f96:	da05      	bge.n	8001fa4 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
 8001f98:	b01f      	add	sp, #124	; 0x7c
 8001f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8001f9e:	2220      	movs	r2, #32
					pad = '0';
 8001fa0:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	2900      	cmp	r1, #0
 8001fa8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8001fac:	dced      	bgt.n	8001f8a <z_cbvprintf_impl+0xb22>
 8001fae:	9b04      	ldr	r3, [sp, #16]
 8001fb0:	f8cd b010 	str.w	fp, [sp, #16]
 8001fb4:	442b      	add	r3, r5
 8001fb6:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 8001fb8:	f1b9 0f00 	cmp.w	r9, #0
 8001fbc:	d005      	beq.n	8001fca <z_cbvprintf_impl+0xb62>
			OUTC(sign);
 8001fbe:	9903      	ldr	r1, [sp, #12]
 8001fc0:	4648      	mov	r0, r9
 8001fc2:	47d0      	blx	sl
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	dbe7      	blt.n	8001f98 <z_cbvprintf_impl+0xb30>
 8001fc8:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8001fca:	9b08      	ldr	r3, [sp, #32]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d075      	beq.n	80020bc <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
 8001fd0:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db28      	blt.n	800202a <z_cbvprintf_impl+0xbc2>
 8001fd8:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
 8001fda:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8001fde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	46d9      	mov	r9, fp
 8001fe6:	f10b 0b01 	add.w	fp, fp, #1
 8001fea:	d93f      	bls.n	800206c <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
 8001fec:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8001ff0:	1bae      	subs	r6, r5, r6
 8001ff2:	0699      	lsls	r1, r3, #26
 8001ff4:	444e      	add	r6, r9
 8001ff6:	d407      	bmi.n	8002008 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002000:	dc39      	bgt.n	8002076 <z_cbvprintf_impl+0xc0e>
 8002002:	9b07      	ldr	r3, [sp, #28]
 8002004:	4433      	add	r3, r6
 8002006:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 8002008:	f899 0000 	ldrb.w	r0, [r9]
 800200c:	282e      	cmp	r0, #46	; 0x2e
 800200e:	d10a      	bne.n	8002026 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
 8002010:	9903      	ldr	r1, [sp, #12]
 8002012:	47d0      	blx	sl
						OUTC('0');
 8002014:	2800      	cmp	r0, #0
 8002016:	dbbf      	blt.n	8001f98 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
 8002018:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 800201c:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 8002020:	dc2f      	bgt.n	8002082 <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
 8002022:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
 8002026:	464d      	mov	r5, r9
 8002028:	e035      	b.n	8002096 <z_cbvprintf_impl+0xc2e>
 800202a:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 800202c:	f899 0000 	ldrb.w	r0, [r9]
 8002030:	2870      	cmp	r0, #112	; 0x70
 8002032:	46c8      	mov	r8, r9
 8002034:	f109 0901 	add.w	r9, r9, #1
 8002038:	d113      	bne.n	8002062 <z_cbvprintf_impl+0xbfa>
 800203a:	1bae      	subs	r6, r5, r6
 800203c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800203e:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 8002040:	4435      	add	r5, r6
 8002042:	1bab      	subs	r3, r5, r6
 8002044:	2b00      	cmp	r3, #0
 8002046:	dc31      	bgt.n	80020ac <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
 8002048:	9903      	ldr	r1, [sp, #12]
 800204a:	463b      	mov	r3, r7
 800204c:	4642      	mov	r2, r8
 800204e:	4650      	mov	r0, sl
 8002050:	f002 fc50 	bl	80048f4 <outs>
 8002054:	2800      	cmp	r0, #0
 8002056:	db9f      	blt.n	8001f98 <z_cbvprintf_impl+0xb30>
 8002058:	4430      	add	r0, r6
 800205a:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 800205c:	4605      	mov	r5, r0
 800205e:	4406      	add	r6, r0
 8002060:	e062      	b.n	8002128 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
 8002062:	9903      	ldr	r1, [sp, #12]
 8002064:	47d0      	blx	sl
 8002066:	2800      	cmp	r0, #0
 8002068:	dae0      	bge.n	800202c <z_cbvprintf_impl+0xbc4>
 800206a:	e795      	b.n	8001f98 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
 800206c:	9903      	ldr	r1, [sp, #12]
 800206e:	47d0      	blx	sl
 8002070:	2800      	cmp	r0, #0
 8002072:	dab2      	bge.n	8001fda <z_cbvprintf_impl+0xb72>
 8002074:	e790      	b.n	8001f98 <z_cbvprintf_impl+0xb30>
						OUTC('0');
 8002076:	9903      	ldr	r1, [sp, #12]
 8002078:	2030      	movs	r0, #48	; 0x30
 800207a:	47d0      	blx	sl
 800207c:	2800      	cmp	r0, #0
 800207e:	dabb      	bge.n	8001ff8 <z_cbvprintf_impl+0xb90>
 8002080:	e78a      	b.n	8001f98 <z_cbvprintf_impl+0xb30>
						OUTC('0');
 8002082:	9903      	ldr	r1, [sp, #12]
 8002084:	2030      	movs	r0, #48	; 0x30
 8002086:	47d0      	blx	sl
 8002088:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800208c:	e7c2      	b.n	8002014 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
 800208e:	9903      	ldr	r1, [sp, #12]
 8002090:	47d0      	blx	sl
 8002092:	2800      	cmp	r0, #0
 8002094:	db80      	blt.n	8001f98 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp)) {
 8002096:	7828      	ldrb	r0, [r5, #0]
 8002098:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800209c:	2b09      	cmp	r3, #9
 800209e:	46a8      	mov	r8, r5
 80020a0:	f105 0501 	add.w	r5, r5, #1
 80020a4:	d9f3      	bls.n	800208e <z_cbvprintf_impl+0xc26>
 80020a6:	eba6 0609 	sub.w	r6, r6, r9
 80020aa:	e7c7      	b.n	800203c <z_cbvprintf_impl+0xbd4>
				OUTC('0');
 80020ac:	9903      	ldr	r1, [sp, #12]
 80020ae:	2030      	movs	r0, #48	; 0x30
 80020b0:	47d0      	blx	sl
 80020b2:	2800      	cmp	r0, #0
 80020b4:	f6ff af70 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 80020b8:	3601      	adds	r6, #1
 80020ba:	e7c2      	b.n	8002042 <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
 80020bc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80020c0:	06da      	lsls	r2, r3, #27
 80020c2:	d401      	bmi.n	80020c8 <z_cbvprintf_impl+0xc60>
 80020c4:	071b      	lsls	r3, r3, #28
 80020c6:	d506      	bpl.n	80020d6 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
 80020c8:	9903      	ldr	r1, [sp, #12]
 80020ca:	2030      	movs	r0, #48	; 0x30
 80020cc:	47d0      	blx	sl
 80020ce:	2800      	cmp	r0, #0
 80020d0:	f6ff af62 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 80020d4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 80020d6:	9b05      	ldr	r3, [sp, #20]
 80020d8:	b13b      	cbz	r3, 80020ea <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
 80020da:	9903      	ldr	r1, [sp, #12]
 80020dc:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 80020e0:	47d0      	blx	sl
 80020e2:	2800      	cmp	r0, #0
 80020e4:	f6ff af58 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 80020e8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80020ea:	44a8      	add	r8, r5
 80020ec:	e006      	b.n	80020fc <z_cbvprintf_impl+0xc94>
				OUTC('0');
 80020ee:	9903      	ldr	r1, [sp, #12]
 80020f0:	2030      	movs	r0, #48	; 0x30
 80020f2:	47d0      	blx	sl
 80020f4:	2800      	cmp	r0, #0
 80020f6:	f6ff af4f 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 80020fa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80020fc:	eba8 0305 	sub.w	r3, r8, r5
 8002100:	2b00      	cmp	r3, #0
 8002102:	dcf4      	bgt.n	80020ee <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
 8002104:	9903      	ldr	r1, [sp, #12]
 8002106:	463b      	mov	r3, r7
 8002108:	4632      	mov	r2, r6
 800210a:	4650      	mov	r0, sl
 800210c:	f002 fbf2 	bl	80048f4 <outs>
 8002110:	2800      	cmp	r0, #0
 8002112:	f6ff af41 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 8002116:	4428      	add	r0, r5
 8002118:	e79f      	b.n	800205a <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
 800211a:	9903      	ldr	r1, [sp, #12]
 800211c:	2020      	movs	r0, #32
 800211e:	47d0      	blx	sl
 8002120:	2800      	cmp	r0, #0
 8002122:	f6ff af39 	blt.w	8001f98 <z_cbvprintf_impl+0xb30>
 8002126:	3501      	adds	r5, #1
		while (width > 0) {
 8002128:	1b73      	subs	r3, r6, r5
 800212a:	2b00      	cmp	r3, #0
 800212c:	dcf5      	bgt.n	800211a <z_cbvprintf_impl+0xcb2>
 800212e:	f7ff bbdf 	b.w	80018f0 <z_cbvprintf_impl+0x488>
			decexp = 0;
 8002132:	4616      	mov	r6, r2
 8002134:	e6c1      	b.n	8001eba <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
 8002136:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 800213a:	e6be      	b.n	8001eba <z_cbvprintf_impl+0xa52>
 800213c:	0800709e 	.word	0x0800709e

08002140 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <st_stm32f4_init+0x34>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002148:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002152:	f04f 0210 	mov.w	r2, #16
 8002156:	f3ef 8311 	mrs	r3, BASEPRI
 800215a:	f382 8812 	msr	BASEPRI_MAX, r2
 800215e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <st_stm32f4_init+0x38>)
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <st_stm32f4_init+0x3c>)
 800216e:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002170:	2000      	movs	r0, #0
 8002172:	4770      	bx	lr
 8002174:	40023c00 	.word	0x40023c00
 8002178:	20000054 	.word	0x20000054
 800217c:	00f42400 	.word	0x00f42400

08002180 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002180:	4901      	ldr	r1, [pc, #4]	; (8002188 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8002182:	2210      	movs	r2, #16
	str	r2, [r1]
 8002184:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8002186:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002188:	e000ed10 	.word	0xe000ed10

0800218c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800218c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800218e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002190:	f380 8811 	msr	BASEPRI, r0
	isb
 8002194:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800219e:	b662      	cpsie	i
	isb
 80021a0:	f3bf 8f6f 	isb	sy

	bx	lr
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80021a8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80021aa:	2800      	cmp	r0, #0
 80021ac:	db07      	blt.n	80021be <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <arch_irq_enable+0x18>)
 80021b0:	0941      	lsrs	r1, r0, #5
 80021b2:	2301      	movs	r3, #1
 80021b4:	f000 001f 	and.w	r0, r0, #31
 80021b8:	4083      	lsls	r3, r0
 80021ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80021c4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80021c6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	bfa8      	it	ge
 80021ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 80021ce:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	bfb8      	it	lt
 80021d4:	4b06      	ldrlt	r3, [pc, #24]	; (80021f0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80021da:	bfac      	ite	ge
 80021dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	bfb4      	ite	lt
 80021e8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 80021ee:	4770      	bx	lr
 80021f0:	e000ed14 	.word	0xe000ed14

080021f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80021f4:	bf30      	wfi
    b z_SysNmiOnReset
 80021f6:	f7ff bffd 	b.w	80021f4 <z_SysNmiOnReset>
 80021fa:	bf00      	nop

080021fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 80021fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <z_arm_prep_c+0x44>)
 8002202:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002206:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800220c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002210:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002214:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800221c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002220:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002224:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002228:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800222c:	f001 fc72 	bl	8003b14 <z_bss_zero>
	z_data_copy();
 8002230:	f002 f952 	bl	80044d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002234:	f000 fa14 	bl	8002660 <z_arm_interrupt_init>
	z_cstart();
 8002238:	f001 fcb0 	bl	8003b9c <z_cstart>
 800223c:	08000000 	.word	0x08000000
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8002248:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800224a:	6809      	ldr	r1, [r1, #0]
 800224c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8002250:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002252:	684b      	ldr	r3, [r1, #4]
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	604b      	str	r3, [r1, #4]
 800225a:	2300      	movs	r3, #0
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002264:	6893      	ldr	r3, [r2, #8]
}
 8002266:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000904 	.word	0x20000904
 8002270:	08006d94 	.word	0x08006d94
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002278:	4912      	ldr	r1, [pc, #72]	; (80022c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800227a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800227c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8002280:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8002282:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002286:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800228a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800228c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002290:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002294:	4f0c      	ldr	r7, [pc, #48]	; (80022c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002296:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800229a:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 800229c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800229e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80022a0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 80022a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80022a4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80022a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80022aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80022ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80022ae:	f000 fa1b 	bl	80026e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80022b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80022b6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80022ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80022be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80022c2:	4770      	bx	lr
    ldr r1, =_kernel
 80022c4:	20000904 	.word	0x20000904
    ldr v4, =_SCS_ICSR
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80022cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80022d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80022d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80022d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80022da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80022dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80022e0:	2902      	cmp	r1, #2
    beq _oops
 80022e2:	d0ff      	beq.n	80022e4 <_oops>

080022e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80022e4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 80022e6:	f002 fcae 	bl	8004c46 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 80022ea:	bd01      	pop	{r0, pc}

080022ec <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 80022ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 80022f0:	9b00      	ldr	r3, [sp, #0]
 80022f2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 80022fe:	9b02      	ldr	r3, [sp, #8]
 8002300:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8002304:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8002308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8002310:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8002314:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8002316:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8002318:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800231a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	080047f7 	.word	0x080047f7

08002324 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002324:	4a09      	ldr	r2, [pc, #36]	; (800234c <z_check_thread_stack_fail+0x28>)
{
 8002326:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8002328:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800232a:	b170      	cbz	r0, 800234a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800232c:	f113 0f16 	cmn.w	r3, #22
 8002330:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002332:	d005      	beq.n	8002340 <z_check_thread_stack_fail+0x1c>
 8002334:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8002338:	429a      	cmp	r2, r3
 800233a:	d805      	bhi.n	8002348 <z_check_thread_stack_fail+0x24>
 800233c:	4283      	cmp	r3, r0
 800233e:	d203      	bcs.n	8002348 <z_check_thread_stack_fail+0x24>
		return 0;
 8002340:	4281      	cmp	r1, r0
 8002342:	bf28      	it	cs
 8002344:	2000      	movcs	r0, #0
 8002346:	4770      	bx	lr
 8002348:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 800234a:	4770      	bx	lr
 800234c:	20000904 	.word	0x20000904

08002350 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8002350:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <arch_switch_to_main_thread+0x28>)
 8002354:	6098      	str	r0, [r3, #8]
{
 8002356:	460d      	mov	r5, r1
 8002358:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800235a:	f000 f9c5 	bl	80026e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800235e:	4620      	mov	r0, r4
 8002360:	f385 8809 	msr	PSP, r5
 8002364:	2100      	movs	r1, #0
 8002366:	b663      	cpsie	if
 8002368:	f381 8811 	msr	BASEPRI, r1
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	2200      	movs	r2, #0
 8002372:	2300      	movs	r3, #0
 8002374:	f002 fa3f 	bl	80047f6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002378:	20000904 	.word	0x20000904

0800237c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800237c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800237e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8002382:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8002386:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800238a:	4904      	ldr	r1, [pc, #16]	; (800239c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800238c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800238e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8002390:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8002392:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8002396:	4902      	ldr	r1, [pc, #8]	; (80023a0 <_isr_wrapper+0x24>)
	bx r1
 8002398:	4708      	bx	r1
 800239a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800239c:	0800669c 	.word	0x0800669c
	ldr r1, =z_arm_int_exit
 80023a0:	080023a5 	.word	0x080023a5

080023a4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80023a6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80023a8:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 80023aa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80023ac:	d003      	beq.n	80023b6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80023ae:	4903      	ldr	r1, [pc, #12]	; (80023bc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80023b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80023b4:	600a      	str	r2, [r1, #0]

080023b6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80023b6:	4770      	bx	lr
	ldr r3, =_kernel
 80023b8:	20000904 	.word	0x20000904
	ldr r1, =_SCS_ICSR
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 80023c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <mem_manage_fault+0x9c>)
{
 80023c4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80023c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 80023c8:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80023cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 80023ce:	bf14      	ite	ne
 80023d0:	2411      	movne	r4, #17
 80023d2:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 80023d4:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80023d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 80023da:	bf18      	it	ne
 80023dc:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80023de:	0792      	lsls	r2, r2, #30
{
 80023e0:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80023e2:	d50a      	bpl.n	80023fa <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80023e4:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80023e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e8:	0614      	lsls	r4, r2, #24
 80023ea:	d534      	bpl.n	8002456 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 80023ec:	b119      	cbz	r1, 80023f6 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80023ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 80023f6:	2413      	movs	r4, #19
 80023f8:	e001      	b.n	80023fe <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
 80023fa:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <mem_manage_fault+0x9c>)
 8002400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8002402:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8002408:	bf18      	it	ne
 800240a:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 800240c:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8002412:	bf18      	it	ne
 8002414:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002416:	06d2      	lsls	r2, r2, #27
 8002418:	d402      	bmi.n	8002420 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800241c:	079b      	lsls	r3, r3, #30
 800241e:	d50a      	bpl.n	8002436 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <mem_manage_fault+0x9c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0519      	lsls	r1, r3, #20
 8002426:	d506      	bpl.n	8002436 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002428:	4631      	mov	r1, r6
 800242a:	f7ff ff7b 	bl	8002324 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
 800242e:	b110      	cbz	r0, 8002436 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002430:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
 8002434:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <mem_manage_fault+0x9c>)
 8002438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800243a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 800243c:	bf42      	ittt	mi
 800243e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8002440:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 8002444:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002448:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800244c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 800244e:	2300      	movs	r3, #0
 8002450:	702b      	strb	r3, [r5, #0]

	return reason;
}
 8002452:	4620      	mov	r0, r4
 8002454:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8002456:	f06f 0015 	mvn.w	r0, #21
 800245a:	e7cc      	b.n	80023f6 <mem_manage_fault+0x36>
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <usage_fault.constprop.0+0x50>)
 8002462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8002464:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 800246a:	bf14      	ite	ne
 800246c:	201e      	movne	r0, #30
 800246e:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8002470:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8002476:	bf18      	it	ne
 8002478:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 800247a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8002480:	bf18      	it	ne
 8002482:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8002484:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 800248a:	bf18      	it	ne
 800248c:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 800248e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8002494:	bf18      	it	ne
 8002496:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8002498:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800249c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80024a2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 80024a8:	bf18      	it	ne
 80024aa:	2024      	movne	r0, #36	; 0x24
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80024b4:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80024b8:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80024ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80024bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 80024be:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80024c2:	bf14      	ite	ne
 80024c4:	2017      	movne	r0, #23
 80024c6:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80024c8:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80024cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80024ce:	bf18      	it	ne
 80024d0:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80024d2:	05a4      	lsls	r4, r4, #22
 80024d4:	d509      	bpl.n	80024ea <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 80024d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80024d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024da:	0400      	lsls	r0, r0, #16
 80024dc:	d504      	bpl.n	80024e8 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 80024de:	b11a      	cbz	r2, 80024e8 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80024e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 80024e8:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <bus_fault.constprop.0+0x68>)
 80024ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80024ee:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80024f4:	bf18      	it	ne
 80024f6:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80024f8:	05d2      	lsls	r2, r2, #23
 80024fa:	d40c      	bmi.n	8002516 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 80024fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002502:	bf18      	it	ne
 8002504:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <bus_fault.constprop.0+0x68>)
 8002508:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800250a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800250e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002510:	2300      	movs	r3, #0
 8002512:	700b      	strb	r3, [r1, #0]
}
 8002514:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 8002516:	201b      	movs	r0, #27
 8002518:	e7f5      	b.n	8002506 <bus_fault.constprop.0+0x52>
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002520:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002522:	4b45      	ldr	r3, [pc, #276]	; (8002638 <z_arm_fault+0x118>)
 8002524:	685b      	ldr	r3, [r3, #4]
{
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	2600      	movs	r6, #0
 8002530:	f386 8811 	msr	BASEPRI, r6
 8002534:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8002538:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 800253c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8002540:	d111      	bne.n	8002566 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8002542:	f002 000c 	and.w	r0, r2, #12
 8002546:	2808      	cmp	r0, #8
 8002548:	d00d      	beq.n	8002566 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800254a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 800254c:	bf4c      	ite	mi
 800254e:	460d      	movmi	r5, r1
			*nested_exc = true;
 8002550:	2601      	movpl	r6, #1
	*recoverable = false;
 8002552:	2200      	movs	r2, #0
	switch (fault) {
 8002554:	3b03      	subs	r3, #3
	*recoverable = false;
 8002556:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 800255a:	2b03      	cmp	r3, #3
 800255c:	d805      	bhi.n	800256a <z_arm_fault+0x4a>
 800255e:	e8df f003 	tbb	[pc, r3]
 8002562:	5d1e      	.short	0x5d1e
 8002564:	5a61      	.short	0x5a61
		return NULL;
 8002566:	4635      	mov	r5, r6
 8002568:	e7f3      	b.n	8002552 <z_arm_fault+0x32>
 800256a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800256c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002570:	b99b      	cbnz	r3, 800259a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002572:	2220      	movs	r2, #32
 8002574:	4629      	mov	r1, r5
 8002576:	a802      	add	r0, sp, #8
 8002578:	f002 fb90 	bl	8004c9c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800257c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800257e:	2e00      	cmp	r6, #0
 8002580:	d054      	beq.n	800262c <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002586:	b922      	cbnz	r2, 8002592 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002588:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800258c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002590:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002592:	a902      	add	r1, sp, #8
 8002594:	4620      	mov	r0, r4
 8002596:	f002 fb54 	bl	8004c42 <z_arm_fatal_error>
}
 800259a:	b00a      	add	sp, #40	; 0x28
 800259c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <z_arm_fault+0x118>)
 80025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a2:	0791      	lsls	r1, r2, #30
 80025a4:	d4e1      	bmi.n	800256a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	dbde      	blt.n	800256a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	0052      	lsls	r2, r2, #1
 80025b0:	d5db      	bpl.n	800256a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80025b2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80025b4:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80025b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025c0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80025c4:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 80025c6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80025ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025d4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80025d8:	f64d 7202 	movw	r2, #57090	; 0xdf02
 80025dc:	4291      	cmp	r1, r2
 80025de:	d00a      	beq.n	80025f6 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 80025e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	b14a      	cbz	r2, 80025fa <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
 80025e6:	f10d 0207 	add.w	r2, sp, #7
 80025ea:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80025ec:	4628      	mov	r0, r5
 80025ee:	f7ff fee7 	bl	80023c0 <mem_manage_fault>
		reason = usage_fault(esf);
 80025f2:	4604      	mov	r4, r0
		break;
 80025f4:	e7ba      	b.n	800256c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 80025f6:	682c      	ldr	r4, [r5, #0]
 80025f8:	e7b8      	b.n	800256c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 80025fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fc:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8002600:	d005      	beq.n	800260e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
 8002602:	f10d 0107 	add.w	r1, sp, #7
 8002606:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002608:	f7ff ff54 	bl	80024b4 <bus_fault.constprop.0>
 800260c:	e7f1      	b.n	80025f2 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d3a9      	bcc.n	800256a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 8002616:	f7ff ff23 	bl	8002460 <usage_fault.constprop.0>
 800261a:	e7ea      	b.n	80025f2 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
 800261c:	f10d 0207 	add.w	r2, sp, #7
 8002620:	2100      	movs	r1, #0
 8002622:	e7e3      	b.n	80025ec <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 8002624:	f10d 0107 	add.w	r1, sp, #7
 8002628:	2000      	movs	r0, #0
 800262a:	e7ed      	b.n	8002608 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800262c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	e7ac      	b.n	8002590 <z_arm_fault+0x70>
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800263c:	4a02      	ldr	r2, [pc, #8]	; (8002648 <z_arm_fault_init+0xc>)
 800263e:	6953      	ldr	r3, [r2, #20]
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800264c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002650:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002654:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002656:	4672      	mov	r2, lr
	bl z_arm_fault
 8002658:	f7ff ff62 	bl	8002520 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800265c:	bd01      	pop	{r0, pc}
 800265e:	bf00      	nop

08002660 <z_arm_interrupt_init>:
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	2110      	movs	r1, #16
 8002666:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002668:	3301      	adds	r3, #1
 800266a:	2b55      	cmp	r3, #85	; 0x55
 800266c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002670:	d1f9      	bne.n	8002666 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002678:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800267a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800267e:	4808      	ldr	r0, [pc, #32]	; (80026a0 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002680:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8002684:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002686:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800268a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800268e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002690:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002692:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002696:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800269a:	f7ff fdaf 	bl	80021fc <z_arm_prep_c>
 800269e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80026a0:	20000980 	.word	0x20000980

080026a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <z_impl_k_thread_abort+0x24>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4283      	cmp	r3, r0
 80026aa:	d10b      	bne.n	80026c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80026b0:	b143      	cbz	r3, 80026c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <z_impl_k_thread_abort+0x28>)
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 80026bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 80026c4:	f001 bea8 	b.w	8004418 <z_thread_abort>
 80026c8:	20000904 	.word	0x20000904
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <z_arm_configure_static_mpu_regions+0xc>)
 80026d2:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <z_arm_configure_static_mpu_regions+0x10>)
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <z_arm_configure_static_mpu_regions+0x14>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	f000 b870 	b.w	80027bc <arm_core_mpu_configure_static_mpu_regions>
 80026dc:	20018000 	.word	0x20018000
 80026e0:	20000000 	.word	0x20000000
 80026e4:	08006a78 	.word	0x08006a78

080026e8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80026e8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80026ec:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 80026ee:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80026f8:	4618      	mov	r0, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	f000 b868 	b.w	80027d0 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002700:	20000764 	.word	0x20000764
 8002704:	150b0000 	.word	0x150b0000

08002708 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800270a:	4e20      	ldr	r6, [pc, #128]	; (800278c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 800270c:	2500      	movs	r5, #0
 800270e:	428d      	cmp	r5, r1
 8002710:	da39      	bge.n	8002786 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
 8002712:	6844      	ldr	r4, [r0, #4]
 8002714:	b374      	cbz	r4, 8002774 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002716:	b153      	cbz	r3, 800272e <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8002718:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800271c:	ea14 0f0c 	tst.w	r4, ip
 8002720:	d12f      	bne.n	8002782 <mpu_configure_regions+0x7a>
		&&
 8002722:	2c1f      	cmp	r4, #31
 8002724:	d92d      	bls.n	8002782 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
 8002726:	6807      	ldr	r7, [r0, #0]
		&&
 8002728:	ea1c 0f07 	tst.w	ip, r7
 800272c:	d129      	bne.n	8002782 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800272e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8002730:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002732:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002736:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 800273a:	d91e      	bls.n	800277a <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
 800273c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002740:	d81d      	bhi.n	800277e <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002742:	3c01      	subs	r4, #1
 8002744:	fab4 f484 	clz	r4, r4
 8002748:	f1c4 041f 	rsb	r4, r4, #31
 800274c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800274e:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002752:	ea4c 0c04 	orr.w	ip, ip, r4
 8002756:	d814      	bhi.n	8002782 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002758:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 800275c:	4314      	orrs	r4, r2
 800275e:	f044 0410 	orr.w	r4, r4, #16
 8002762:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002766:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800276a:	f04c 0401 	orr.w	r4, ip, #1
 800276e:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8002772:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 8002774:	3501      	adds	r5, #1
 8002776:	300c      	adds	r0, #12
 8002778:	e7c9      	b.n	800270e <mpu_configure_regions+0x6>
		return REGION_32B;
 800277a:	2408      	movs	r4, #8
 800277c:	e7e7      	b.n	800274e <mpu_configure_regions+0x46>
		return REGION_4G;
 800277e:	243e      	movs	r4, #62	; 0x3e
 8002780:	e7e5      	b.n	800274e <mpu_configure_regions+0x46>
			return -EINVAL;
 8002782:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
 8002786:	4610      	mov	r0, r2
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <arm_core_mpu_enable+0x14>)
 8002792:	2205      	movs	r2, #5
 8002794:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800279c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80027a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <arm_core_mpu_disable+0x10>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80027bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80027be:	4c03      	ldr	r4, [pc, #12]	; (80027cc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80027c0:	2301      	movs	r3, #1
 80027c2:	7822      	ldrb	r2, [r4, #0]
 80027c4:	f7ff ffa0 	bl	8002708 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80027c8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	20000946 	.word	0x20000946

080027d0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 80027d0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 80027d4:	2300      	movs	r3, #0
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	f7ff ff96 	bl	8002708 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80027dc:	f110 0f16 	cmn.w	r0, #22
 80027e0:	d002      	beq.n	80027e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80027e2:	4a06      	ldr	r2, [pc, #24]	; (80027fc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80027e4:	2807      	cmp	r0, #7
 80027e6:	dd00      	ble.n	80027ea <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80027e8:	bd08      	pop	{r3, pc}
 80027ea:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 80027ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80027f2:	3001      	adds	r0, #1
 80027f4:	e7f6      	b.n	80027e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 80027f6:	bf00      	nop
 80027f8:	20000946 	.word	0x20000946
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002800:	4914      	ldr	r1, [pc, #80]	; (8002854 <z_arm_mpu_init+0x54>)
 8002802:	6808      	ldr	r0, [r1, #0]
 8002804:	2808      	cmp	r0, #8
{
 8002806:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002808:	d821      	bhi.n	800284e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800280a:	f7ff ffcd 	bl	80027a8 <arm_core_mpu_disable>
 800280e:	4c12      	ldr	r4, [pc, #72]	; (8002858 <z_arm_mpu_init+0x58>)
 8002810:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002812:	2200      	movs	r2, #0
 8002814:	4290      	cmp	r0, r2
 8002816:	f101 010c 	add.w	r1, r1, #12
 800281a:	d105      	bne.n	8002828 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <z_arm_mpu_init+0x5c>)
 800281e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8002820:	f7ff ffb6 	bl	8002790 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002824:	2000      	movs	r0, #0
}
 8002826:	bd10      	pop	{r4, pc}
 8002828:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800282c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8002830:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002834:	4313      	orrs	r3, r2
 8002836:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800283a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800283e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800284a:	3201      	adds	r2, #1
 800284c:	e7e2      	b.n	8002814 <z_arm_mpu_init+0x14>
		return -1;
 800284e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002852:	e7e8      	b.n	8002826 <z_arm_mpu_init+0x26>
 8002854:	08006a84 	.word	0x08006a84
 8002858:	e000ed00 	.word	0xe000ed00
 800285c:	20000946 	.word	0x20000946

08002860 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8002860:	4b01      	ldr	r3, [pc, #4]	; (8002868 <__stdout_hook_install+0x8>)
 8002862:	6018      	str	r0, [r3, #0]
}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000004 	.word	0x20000004

0800286c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
 800286c:	3902      	subs	r1, #2
 800286e:	2901      	cmp	r1, #1
 8002870:	d802      	bhi.n	8002878 <z_impl_zephyr_fputc+0xc>
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <z_impl_zephyr_fputc+0x14>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4718      	bx	r3
}
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000004 	.word	0x20000004

08002884 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
 8002884:	b40f      	push	{r0, r1, r2, r3}
 8002886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002888:	ab06      	add	r3, sp, #24
 800288a:	2100      	movs	r1, #0
 800288c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002890:	4805      	ldr	r0, [pc, #20]	; (80028a8 <printf+0x24>)
 8002892:	9100      	str	r1, [sp, #0]
 8002894:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
 8002896:	9303      	str	r3, [sp, #12]
 8002898:	f7fe fde6 	bl	8001468 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
 800289c:	b005      	add	sp, #20
 800289e:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a2:	b004      	add	sp, #16
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	08004ccb 	.word	0x08004ccb

080028ac <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 80028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80028b0:	4e0e      	ldr	r6, [pc, #56]	; (80028ec <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 80028b2:	4f0f      	ldr	r7, [pc, #60]	; (80028f0 <stm32_exti_isr+0x44>)
{
 80028b4:	4605      	mov	r5, r0
	for (int i = 0; i <= range->len; i++) {
 80028b6:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80028b8:	f04f 0801 	mov.w	r8, #1
		line = range->start + i;
 80028bc:	782b      	ldrb	r3, [r5, #0]
 80028be:	1918      	adds	r0, r3, r4
	if (line < 32) {
 80028c0:	281f      	cmp	r0, #31
 80028c2:	dc0d      	bgt.n	80028e0 <stm32_exti_isr+0x34>
 80028c4:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80028c6:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 80028ca:	ea33 0202 	bics.w	r2, r3, r2
 80028ce:	d107      	bne.n	80028e0 <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80028d0:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 80028d2:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 80028d6:	b11b      	cbz	r3, 80028e0 <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80028d8:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 80028dc:	6851      	ldr	r1, [r2, #4]
 80028de:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 80028e0:	786b      	ldrb	r3, [r5, #1]
 80028e2:	3401      	adds	r4, #1
 80028e4:	42a3      	cmp	r3, r4
 80028e6:	dae9      	bge.n	80028bc <stm32_exti_isr+0x10>
		}
	}
}
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ec:	40013c00 	.word	0x40013c00
 80028f0:	20000770 	.word	0x20000770

080028f4 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <stm32_fill_irq_table+0x14>)
 80028f6:	4418      	add	r0, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	3301      	adds	r3, #1
 80028fc:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 80028fe:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 8002902:	dcfa      	bgt.n	80028fa <stm32_fill_irq_table+0x6>
	}
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000060 	.word	0x20000060

0800290c <stm32_exti_enable>:
{
 800290c:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <stm32_exti_enable+0x1c>)
  SET_BIT(EXTI->IMR, ExtiLine);
 8002910:	4906      	ldr	r1, [pc, #24]	; (800292c <stm32_exti_enable+0x20>)
{
 8002912:	4602      	mov	r2, r0
 8002914:	680c      	ldr	r4, [r1, #0]
	irqnum = exti_irq_table[line];
 8002916:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 8002918:	2301      	movs	r3, #1
 800291a:	4093      	lsls	r3, r2
 800291c:	4323      	orrs	r3, r4
 800291e:	600b      	str	r3, [r1, #0]
}
 8002920:	bc10      	pop	{r4}
	irq_enable(irqnum);
 8002922:	f7ff bc41 	b.w	80021a8 <arch_irq_enable>
 8002926:	bf00      	nop
 8002928:	20000060 	.word	0x20000060
 800292c:	40013c00 	.word	0x40013c00

08002930 <stm32_exti_disable>:
	if (line < 32) {
 8002930:	281f      	cmp	r0, #31
 8002932:	dc06      	bgt.n	8002942 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8002936:	2201      	movs	r2, #1
 8002938:	680b      	ldr	r3, [r1, #0]
 800293a:	4082      	lsls	r2, r0
 800293c:	ea23 0302 	bic.w	r3, r3, r2
 8002940:	600b      	str	r3, [r1, #0]
}
 8002942:	4770      	bx	lr
 8002944:	40013c00 	.word	0x40013c00

08002948 <stm32_exti_trigger>:
	switch (trigger) {
 8002948:	2903      	cmp	r1, #3
 800294a:	d82a      	bhi.n	80029a2 <stm32_exti_trigger+0x5a>
 800294c:	e8df f001 	tbb	[pc, r1]
 8002950:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8002956:	2201      	movs	r2, #1
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	4082      	lsls	r2, r0
 800295c:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002960:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	ea21 0202 	bic.w	r2, r1, r2
 8002968:	60da      	str	r2, [r3, #12]
}
 800296a:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800296e:	2201      	movs	r2, #1
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	4082      	lsls	r2, r0
 8002974:	4311      	orrs	r1, r2
 8002976:	e7f3      	b.n	8002960 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800297a:	2201      	movs	r2, #1
 800297c:	68d9      	ldr	r1, [r3, #12]
 800297e:	4082      	lsls	r2, r0
 8002980:	4311      	orrs	r1, r2
 8002982:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	ea21 0202 	bic.w	r2, r1, r2
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800298e:	2301      	movs	r3, #1
 8002990:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <stm32_exti_trigger+0x5c>)
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4302      	orrs	r2, r0
 800299a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	4310      	orrs	r0, r2
 80029a0:	60d8      	str	r0, [r3, #12]
}
 80029a2:	4770      	bx	lr
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80029a8:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <stm32_exti_set_callback+0x20>)
{
 80029ac:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80029ae:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80029b2:	b928      	cbnz	r0, 80029c0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80029b4:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80029b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80029bc:	605a      	str	r2, [r3, #4]

	return 0;
}
 80029be:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80029c0:	f06f 000f 	mvn.w	r0, #15
 80029c4:	e7fb      	b.n	80029be <stm32_exti_set_callback+0x16>
 80029c6:	bf00      	nop
 80029c8:	20000770 	.word	0x20000770

080029cc <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <stm32_exti_unset_callback+0x10>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80029d4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80029d8:	605a      	str	r2, [r3, #4]
}
 80029da:	4770      	bx	lr
 80029dc:	20000770 	.word	0x20000770

080029e0 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80029e0:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <stm32_clock_control_get_subsys_rate+0x90>)
 80029e4:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80029e6:	680b      	ldr	r3, [r1, #0]
 80029e8:	2b44      	cmp	r3, #68	; 0x44
{
 80029ea:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80029ec:	d828      	bhi.n	8002a40 <stm32_clock_control_get_subsys_rate+0x60>
 80029ee:	2b2f      	cmp	r3, #47	; 0x2f
 80029f0:	d805      	bhi.n	80029fe <stm32_clock_control_get_subsys_rate+0x1e>
 80029f2:	3b01      	subs	r3, #1
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d90d      	bls.n	8002a14 <stm32_clock_control_get_subsys_rate+0x34>
 80029f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80029fc:	e01f      	b.n	8002a3e <stm32_clock_control_get_subsys_rate+0x5e>
 80029fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002a02:	2201      	movs	r2, #1
 8002a04:	408a      	lsls	r2, r1
 8002a06:	491b      	ldr	r1, [pc, #108]	; (8002a74 <stm32_clock_control_get_subsys_rate+0x94>)
 8002a08:	420a      	tst	r2, r1
 8002a0a:	d116      	bne.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d1f3      	bne.n	80029f8 <stm32_clock_control_get_subsys_rate+0x18>
	return clock / prescaler;
 8002a10:	0840      	lsrs	r0, r0, #1
	case STM32_CLOCK_BUS_APB1:
#if defined(STM32_CLOCK_BUS_APB1_2)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
		break;
 8002a12:	e012      	b.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
	switch (pclken->bus) {
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d8ef      	bhi.n	80029f8 <stm32_clock_control_get_subsys_rate+0x18>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <stm32_clock_control_get_subsys_rate+0x40>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a47 	.word	0x08002a47
 8002a24:	08002a57 	.word	0x08002a57
 8002a28:	080029f9 	.word	0x080029f9
 8002a2c:	08002a39 	.word	0x08002a39
 8002a30:	08002a6b 	.word	0x08002a6b
 8002a34:	08002a3b 	.word	0x08002a3b
 8002a38:	2000      	movs	r0, #0
		*rate = STM32_LSE_FREQ;
		break;
#endif
#if defined(STM32_SRC_LSI)
	case STM32_SRC_LSI:
		*rate = STM32_LSI_FREQ;
 8002a3a:	6020      	str	r0, [r4, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002a3c:	2000      	movs	r0, #0
}
 8002a3e:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 8002a40:	2ba8      	cmp	r3, #168	; 0xa8
 8002a42:	d0fa      	beq.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
 8002a44:	e7d8      	b.n	80029f8 <stm32_clock_control_get_subsys_rate+0x18>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002a46:	f000 f8a3 	bl	8002b90 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 8002a4a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a4e:	08c0      	lsrs	r0, r0, #3
 8002a50:	4358      	muls	r0, r3
 8002a52:	0880      	lsrs	r0, r0, #2
		break;
 8002a54:	e7f1      	b.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002a56:	f000 f89b 	bl	8002b90 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 8002a5a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a5e:	08c0      	lsrs	r0, r0, #3
 8002a60:	4358      	muls	r0, r3
 8002a62:	2307      	movs	r3, #7
 8002a64:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8002a68:	e7e7      	b.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
		break;
 8002a6a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8002a6e:	e7e4      	b.n	8002a3a <stm32_clock_control_get_subsys_rate+0x5a>
 8002a70:	20000054 	.word	0x20000054
 8002a74:	00100111 	.word	0x00100111

08002a78 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a7a:	4c40      	ldr	r4, [pc, #256]	; (8002b7c <stm32_clock_control_init+0x104>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002a7c:	4e40      	ldr	r6, [pc, #256]	; (8002b80 <stm32_clock_control_init+0x108>)
	config_enable_default_clocks();
 8002a7e:	f000 f89f 	bl	8002bc0 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8002a82:	f000 ff8f 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8002a86:	68a3      	ldr	r3, [r4, #8]
 8002a88:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <stm32_clock_control_init+0x10c>)
 8002a8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002a94:	42b5      	cmp	r5, r6
 8002a96:	d802      	bhi.n	8002a9e <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8002a98:	483b      	ldr	r0, [pc, #236]	; (8002b88 <stm32_clock_control_init+0x110>)
 8002a9a:	f000 ffb1 	bl	8003a00 <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <stm32_clock_control_init+0x104>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8002ab2:	0392      	lsls	r2, r2, #14
 8002ab4:	d5fc      	bpl.n	8002ab0 <stm32_clock_control_init+0x38>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002ab6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	675a      	str	r2, [r3, #116]	; 0x74
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8002abe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while (LL_RCC_LSI_IsReady() != 1) {
 8002ac0:	0794      	lsls	r4, r2, #30
 8002ac2:	d5fc      	bpl.n	8002abe <stm32_clock_control_init+0x46>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002aca:	2a08      	cmp	r2, #8
 8002acc:	d117      	bne.n	8002afe <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ad4:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ad6:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8002ad8:	0790      	lsls	r0, r2, #30
 8002ada:	d407      	bmi.n	8002aec <stm32_clock_control_init+0x74>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <stm32_clock_control_init+0x104>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8002ae8:	0799      	lsls	r1, r3, #30
 8002aea:	d5fc      	bpl.n	8002ae6 <stm32_clock_control_init+0x6e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <stm32_clock_control_init+0x104>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	f022 0203 	bic.w	r2, r2, #3
 8002af4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002af6:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002af8:	f012 0f0c 	tst.w	r2, #12
 8002afc:	d1fb      	bne.n	8002af6 <stm32_clock_control_init+0x7e>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002afe:	4c1f      	ldr	r4, [pc, #124]	; (8002b7c <stm32_clock_control_init+0x104>)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 8002b08:	6863      	ldr	r3, [r4, #4]
 8002b0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 8002b14:	6863      	ldr	r3, [r4, #4]
 8002b16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b1e:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 8002b20:	f000 f83a 	bl	8002b98 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002b2c:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8002b2e:	019b      	lsls	r3, r3, #6
 8002b30:	d5fc      	bpl.n	8002b2c <stm32_clock_control_init+0xb4>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b38:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b3a:	68a3      	ldr	r3, [r4, #8]
 8002b3c:	f023 0303 	bic.w	r3, r3, #3
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b46:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <stm32_clock_control_init+0x104>)
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d1fa      	bne.n	8002b48 <stm32_clock_control_init+0xd0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002b52:	42b5      	cmp	r5, r6
 8002b54:	d902      	bls.n	8002b5c <stm32_clock_control_init+0xe4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <stm32_clock_control_init+0x110>)
 8002b58:	f000 ff52 	bl	8003a00 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <stm32_clock_control_init+0x114>)
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <stm32_clock_control_init+0x110>)
 8002b60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b62:	68a3      	ldr	r3, [r4, #8]
 8002b64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b74:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8002b76:	2000      	movs	r0, #0
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0501bcff 	.word	0x0501bcff
 8002b84:	08007245 	.word	0x08007245
 8002b88:	0501bd00 	.word	0x0501bd00
 8002b8c:	20000054 	.word	0x20000054

08002b90 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 8002b90:	4800      	ldr	r0, [pc, #0]	; (8002b94 <get_pllsrc_frequency+0x4>)
 8002b92:	4770      	bx	lr
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <config_pll_sysclock+0x1c>)
 8002b9a:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <config_pll_sysclock+0x20>)
 8002b9c:	6853      	ldr	r3, [r2, #4]
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <config_pll_sysclock+0x24>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002ba6:	6853      	ldr	r3, [r2, #4]
 8002ba8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6053      	str	r3, [r2, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 8002bb2:	4770      	bx	lr
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	ffbf8000 	.word	0xffbf8000
 8002bbc:	00405408 	.word	0x00405408

08002bc0 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <config_enable_default_clocks+0x1c>)
 8002bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8002bcc:	b082      	sub	sp, #8
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002bd4:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8002bd6:	b002      	add	sp, #8
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8002be0:	b508      	push	{r3, lr}
 8002be2:	4807      	ldr	r0, [pc, #28]	; (8002c00 <uart_console_init+0x20>)
 8002be4:	f003 fb0c 	bl	8006200 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8002be8:	b138      	cbz	r0, 8002bfa <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <uart_console_init+0x24>)
 8002bec:	f7ff fe38 	bl	8002860 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8002bf0:	4804      	ldr	r0, [pc, #16]	; (8002c04 <uart_console_init+0x24>)
 8002bf2:	f7fe fc25 	bl	8001440 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8002bf6:	2000      	movs	r0, #0
}
 8002bf8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8002bfa:	f06f 0012 	mvn.w	r0, #18
 8002bfe:	e7fb      	b.n	8002bf8 <uart_console_init+0x18>
 8002c00:	080065dc 	.word	0x080065dc
 8002c04:	08002c09 	.word	0x08002c09

08002c08 <console_out>:
	if ('\n' == c) {
 8002c08:	280a      	cmp	r0, #10
{
 8002c0a:	b538      	push	{r3, r4, r5, lr}
 8002c0c:	4d07      	ldr	r5, [pc, #28]	; (8002c2c <console_out+0x24>)
 8002c0e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8002c10:	d104      	bne.n	8002c1c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8002c12:	68ab      	ldr	r3, [r5, #8]
 8002c14:	210d      	movs	r1, #13
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4628      	mov	r0, r5
 8002c1a:	4798      	blx	r3
 8002c1c:	68ab      	ldr	r3, [r5, #8]
 8002c1e:	4803      	ldr	r0, [pc, #12]	; (8002c2c <console_out+0x24>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	b2e1      	uxtb	r1, r4
 8002c24:	4798      	blx	r3
}
 8002c26:	4620      	mov	r0, r4
 8002c28:	bd38      	pop	{r3, r4, r5, pc}
 8002c2a:	bf00      	nop
 8002c2c:	080065dc 	.word	0x080065dc

08002c30 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002c30:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8002c32:	6903      	ldr	r3, [r0, #16]
{
 8002c34:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8002c36:	6058      	str	r0, [r3, #4]
 8002c38:	4d08      	ldr	r5, [pc, #32]	; (8002c5c <gpio_stm32_init+0x2c>)
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f003 fae0 	bl	8006200 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002c40:	b140      	cbz	r0, 8002c54 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8002c42:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8002c44:	68ab      	ldr	r3, [r5, #8]
 8002c46:	310c      	adds	r1, #12
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8002c4e:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8002c52:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8002c54:	f06f 0012 	mvn.w	r0, #18
 8002c58:	e7fb      	b.n	8002c52 <gpio_stm32_init+0x22>
 8002c5a:	bf00      	nop
 8002c5c:	080064d4 	.word	0x080064d4

08002c60 <gpio_stm32_pin_interrupt_configure>:
{
 8002c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c62:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002c64:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8002c68:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8002c6a:	6902      	ldr	r2, [r0, #16]
{
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002c70:	d124      	bne.n	8002cbc <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002c72:	f001 0203 	and.w	r2, r1, #3
 8002c76:	3204      	adds	r2, #4
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4933      	ldr	r1, [pc, #204]	; (8002d54 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8002c86:	3202      	adds	r2, #2
 8002c88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c8c:	0c19      	lsrs	r1, r3, #16
 8002c8e:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8002c9c:	68b2      	ldr	r2, [r6, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d109      	bne.n	8002cb6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff fe44 	bl	8002930 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff fe8f 	bl	80029cc <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff fe49 	bl	8002948 <stm32_exti_trigger>
	int err = 0;
 8002cb6:	2000      	movs	r0, #0
}
 8002cb8:	b003      	add	sp, #12
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8002cbc:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8002cc0:	d041      	beq.n	8002d46 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8002cc2:	4925      	ldr	r1, [pc, #148]	; (8002d58 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff fe6f 	bl	80029a8 <stm32_exti_set_callback>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d13e      	bne.n	8002d4c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8002cce:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8002cd0:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8002cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd6:	466b      	mov	r3, sp
 8002cd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cdc:	4820      	ldr	r0, [pc, #128]	; (8002d60 <gpio_stm32_pin_interrupt_configure+0x100>)
 8002cde:	6882      	ldr	r2, [r0, #8]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	4790      	blx	r2
	if (ret != 0) {
 8002ce6:	b9c0      	cbnz	r0, 8002d1a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002ce8:	f004 0303 	and.w	r3, r4, #3
 8002cec:	3304      	adds	r3, #4
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002cf8:	b2d3      	uxtb	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d00:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002d04:	0c11      	lsrs	r1, r2, #16
 8002d06:	6898      	ldr	r0, [r3, #8]
 8002d08:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	4096      	lsls	r6, r2
 8002d16:	4306      	orrs	r6, r0
 8002d18:	609e      	str	r6, [r3, #8]
	switch (trig) {
 8002d1a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8002d1e:	d00e      	beq.n	8002d3e <gpio_stm32_pin_interrupt_configure+0xde>
 8002d20:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002d24:	d00d      	beq.n	8002d42 <gpio_stm32_pin_interrupt_configure+0xe2>
 8002d26:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8002d2a:	4259      	negs	r1, r3
 8002d2c:	4159      	adcs	r1, r3
 8002d2e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fe09 	bl	8002948 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8002d36:	4620      	mov	r0, r4
 8002d38:	f7ff fde8 	bl	800290c <stm32_exti_enable>
 8002d3c:	e7bb      	b.n	8002cb6 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8002d3e:	2101      	movs	r1, #1
 8002d40:	e7f6      	b.n	8002d30 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8002d42:	2103      	movs	r1, #3
 8002d44:	e7f4      	b.n	8002d30 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8002d46:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002d4a:	e7b5      	b.n	8002cb8 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8002d4c:	f06f 000f 	mvn.w	r0, #15
	return err;
 8002d50:	e7b2      	b.n	8002cb8 <gpio_stm32_pin_interrupt_configure+0x58>
 8002d52:	bf00      	nop
 8002d54:	40013800 	.word	0x40013800
 8002d58:	08004ff5 	.word	0x08004ff5
 8002d5c:	08006a70 	.word	0x08006a70
 8002d60:	080064d4 	.word	0x080064d4

08002d64 <stm32_i2c_configure_timing>:
	return res;
}
#endif /* CONFIG_I2C_STM32_INTERRUPT */

int32_t stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 8002d64:	b510      	push	{r4, lr}
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
	I2C_TypeDef *i2c = cfg->i2c;

	switch (I2C_SPEED_GET(data->dev_config)) {
 8002d66:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8002d68:	6843      	ldr	r3, [r0, #4]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8002d6a:	6a12      	ldr	r2, [r2, #32]
	I2C_TypeDef *i2c = cfg->i2c;
 8002d6c:	68db      	ldr	r3, [r3, #12]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8002d6e:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8002d72:	2a01      	cmp	r2, #1
 8002d74:	d004      	beq.n	8002d80 <stm32_i2c_configure_timing+0x1c>
 8002d76:	2a02      	cmp	r2, #2
 8002d78:	d021      	beq.n	8002dbe <stm32_i2c_configure_timing+0x5a>
 8002d7a:	f06f 0015 	mvn.w	r0, #21
	default:
		return -EINVAL;
	}

	return 0;
}
 8002d7e:	bd10      	pop	{r4, pc}

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002d80:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <stm32_i2c_configure_timing+0x9c>)
 8002d84:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002d88:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002d8c:	4310      	orrs	r0, r2
 8002d8e:	6058      	str	r0, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002d90:	6a18      	ldr	r0, [r3, #32]
 8002d92:	3201      	adds	r2, #1
 8002d94:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002d98:	4302      	orrs	r2, r0
 8002d9a:	621a      	str	r2, [r3, #32]
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <stm32_i2c_configure_timing+0xa0>)
 8002d9e:	fbb1 f1f2 	udiv	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002da2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002da6:	4211      	tst	r1, r2
 8002da8:	bf08      	it	eq
 8002daa:	2104      	moveq	r1, #4
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
	return 0;
 8002dba:	2000      	movs	r0, #0
 8002dbc:	e7df      	b.n	8002d7e <stm32_i2c_configure_timing+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002dbe:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <stm32_i2c_configure_timing+0x9c>)
 8002dc2:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002dc6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002dca:	4310      	orrs	r0, r2
 8002dcc:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002dce:	6a18      	ldr	r0, [r3, #32]
 8002dd0:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8002dd4:	4362      	muls	r2, r4
 8002dd6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002dda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002dde:	fbb2 f2f4 	udiv	r2, r2, r4
 8002de2:	3201      	adds	r2, #1
 8002de4:	4302      	orrs	r2, r0
 8002de6:	621a      	str	r2, [r3, #32]
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002de8:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <stm32_i2c_configure_timing+0xa4>)
 8002dea:	4291      	cmp	r1, r2
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002dec:	bf89      	itett	hi
 8002dee:	3201      	addhi	r2, #1
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002df0:	f248 0101 	movwls	r1, #32769	; 0x8001
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002df4:	fbb1 f1f2 	udivhi	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002df8:	f441 4100 	orrhi.w	r1, r1, #32768	; 0x8000
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002dfc:	e7d6      	b.n	8002dac <stm32_i2c_configure_timing+0x48>
 8002dfe:	bf00      	nop
 8002e00:	000f4240 	.word	0x000f4240
 8002e04:	00030d40 	.word	0x00030d40
 8002e08:	00124f7f 	.word	0x00124f7f

08002e0c <i2c_stm32_runtime_configure>:
#else
#define STM32_I2C_DOMAIN_CLOCK_SUPPORT 0
#endif

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 8002e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0e:	4605      	mov	r5, r0
	const struct i2c_stm32_config *cfg = dev->config;
 8002e10:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8002e12:	6904      	ldr	r4, [r0, #16]
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 8002e14:	4815      	ldr	r0, [pc, #84]	; (8002e6c <i2c_stm32_runtime_configure+0x60>)
	I2C_TypeDef *i2c = cfg->i2c;
 8002e16:	68de      	ldr	r6, [r3, #12]
{
 8002e18:	460f      	mov	r7, r1
			LOG_ERR("Failed call clock_control_get_rate(pclken[1])");
			return -EIO;
		}
	} else {
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
					   (clock_control_subsys_t *) &cfg->pclken[0],
 8002e1a:	6859      	ldr	r1, [r3, #4]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002e1c:	6883      	ldr	r3, [r0, #8]
 8002e1e:	68db      	ldr	r3, [r3, #12]
	uint32_t clock = 0U;
 8002e20:	2200      	movs	r2, #0
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	b923      	cbnz	r3, 8002e30 <i2c_stm32_runtime_configure+0x24>
					   &clock) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
			return -EIO;
 8002e26:	f06f 0504 	mvn.w	r5, #4
#endif

	k_sem_give(&data->bus_mutex);

	return ret;
}
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	b003      	add	sp, #12
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002e30:	aa01      	add	r2, sp, #4
 8002e32:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8002e34:	2800      	cmp	r0, #0
 8002e36:	dbf6      	blt.n	8002e26 <i2c_stm32_runtime_configure+0x1a>
	data->dev_config = config;
 8002e38:	6227      	str	r7, [r4, #32]
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8002e3a:	3410      	adds	r4, #16
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e44:	4620      	mov	r0, r4
 8002e46:	f000 ffdf 	bl	8003e08 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e4a:	6833      	ldr	r3, [r6, #0]
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002e52:	6833      	ldr	r3, [r6, #0]
 8002e54:	f023 031a 	bic.w	r3, r3, #26
 8002e58:	6033      	str	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 8002e5a:	9901      	ldr	r1, [sp, #4]
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f7ff ff81 	bl	8002d64 <stm32_i2c_configure_timing>
 8002e62:	4605      	mov	r5, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002e64:	4620      	mov	r0, r4
 8002e66:	f000 ffaf 	bl	8003dc8 <z_impl_k_sem_give>
}
 8002e6a:	e7de      	b.n	8002e2a <i2c_stm32_runtime_configure+0x1e>
 8002e6c:	080064d4 	.word	0x080064d4

08002e70 <i2c_stm32_init>:
	return 0;
}


static int i2c_stm32_init(const struct device *dev)
{
 8002e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e72:	4604      	mov	r4, r0
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 8002e74:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 8002e76:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f003 fa00 	bl	8006284 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 8002e84:	6833      	ldr	r3, [r6, #0]
 8002e86:	4620      	mov	r0, r4
 8002e88:	4798      	blx	r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	f105 0010 	add.w	r0, r5, #16
 8002e92:	f003 f9f7 	bl	8006284 <z_impl_k_sem_init>
 8002e96:	4d23      	ldr	r5, [pc, #140]	; (8002f24 <i2c_stm32_init+0xb4>)
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f003 f9b1 	bl	8006200 <z_device_is_ready>
	 * are taking place to guarantee that each one is
	 * atomic and has exclusive access to the I2C bus.
	 */
	k_sem_init(&data->bus_mutex, 1, 1);

	if (!device_is_ready(clk)) {
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d03c      	beq.n	8002f1c <i2c_stm32_init+0xac>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	i2c_stm32_activate(dev);
 8002ea2:	6867      	ldr	r7, [r4, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8002ea4:	aa01      	add	r2, sp, #4
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f002 fbbd 	bl	8005628 <pinctrl_lookup_state>
	if (ret < 0) {
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	db0c      	blt.n	8002ecc <i2c_stm32_init+0x5c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8002eb2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	7919      	ldrb	r1, [r3, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f000 f83d 	bl	8002f38 <pinctrl_configure_pins>
	if (ret < 0) {
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	db04      	blt.n	8002ecc <i2c_stm32_init+0x5c>
	return api->on(dev, sys);
 8002ec2:	68ab      	ldr	r3, [r5, #8]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4628      	mov	r0, r5
 8002eca:	4798      	blx	r3

	LL_I2C_EnableReset(i2c);
	LL_I2C_DisableReset(i2c);
#endif

	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 8002ecc:	6931      	ldr	r1, [r6, #16]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <i2c_stm32_init+0xb8>)
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d01d      	beq.n	8002f10 <i2c_stm32_init+0xa0>
 8002ed4:	d810      	bhi.n	8002ef8 <i2c_stm32_init+0x88>
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <i2c_stm32_init+0xbc>)
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	d01b      	beq.n	8002f14 <i2c_stm32_init+0xa4>
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <i2c_stm32_init+0xc0>)
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	4259      	negs	r1, r3
 8002ee2:	4159      	adcs	r1, r3
 8002ee4:	0089      	lsls	r1, r1, #2

	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
 8002ee6:	f041 0110 	orr.w	r1, r1, #16
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7ff ff8e 	bl	8002e0c <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8002ef0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);
#endif

	return 0;
}
 8002ef4:	b003      	add	sp, #12
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <i2c_stm32_init+0xc4>)
 8002efa:	4299      	cmp	r1, r3
 8002efc:	d00c      	beq.n	8002f18 <i2c_stm32_init+0xa8>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
 8002efe:	f503 13c3 	add.w	r3, r3, #1597440	; 0x186000
 8002f02:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8002f06:	4299      	cmp	r1, r3
 8002f08:	bf0c      	ite	eq
 8002f0a:	210a      	moveq	r1, #10
 8002f0c:	2100      	movne	r1, #0
 8002f0e:	e7ea      	b.n	8002ee6 <i2c_stm32_init+0x76>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8002f10:	2106      	movs	r1, #6
 8002f12:	e7e8      	b.n	8002ee6 <i2c_stm32_init+0x76>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8002f14:	2102      	movs	r1, #2
 8002f16:	e7e6      	b.n	8002ee6 <i2c_stm32_init+0x76>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8002f18:	2108      	movs	r1, #8
 8002f1a:	e7e4      	b.n	8002ee6 <i2c_stm32_init+0x76>
		return -ENODEV;
 8002f1c:	f06f 0012 	mvn.w	r0, #18
 8002f20:	e7e8      	b.n	8002ef4 <i2c_stm32_init+0x84>
 8002f22:	bf00      	nop
 8002f24:	080064d4 	.word	0x080064d4
 8002f28:	000f4240 	.word	0x000f4240
 8002f2c:	000186a0 	.word	0x000186a0
 8002f30:	00061a80 	.word	0x00061a80
 8002f34:	0033e140 	.word	0x0033e140

08002f38 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8002f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8002f3c:	4f1e      	ldr	r7, [pc, #120]	; (8002fb8 <pinctrl_configure_pins+0x80>)
 8002f3e:	4604      	mov	r4, r0
 8002f40:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8002f44:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8002f46:	42b4      	cmp	r4, r6
 8002f48:	d101      	bne.n	8002f4e <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e014      	b.n	8002f78 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8002f4e:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8002f50:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8002f52:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8002f56:	d411      	bmi.n	8002f7c <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8002f58:	6865      	ldr	r5, [r4, #4]
 8002f5a:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8002f5e:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8002f62:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002f66:	280a      	cmp	r0, #10
 8002f68:	d823      	bhi.n	8002fb2 <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8002f6a:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002f6e:	f1b8 0f00 	cmp.w	r8, #0
 8002f72:	d10d      	bne.n	8002f90 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8002f74:	f06f 0012 	mvn.w	r0, #18
}
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8002f7c:	f1b9 0f10 	cmp.w	r9, #16
 8002f80:	d004      	beq.n	8002f8c <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8002f82:	f1b9 0f11 	cmp.w	r9, #17
 8002f86:	d1ea      	bne.n	8002f5e <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8002f88:	6865      	ldr	r5, [r4, #4]
 8002f8a:	e7e8      	b.n	8002f5e <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8002f8c:	2530      	movs	r5, #48	; 0x30
 8002f8e:	e7e6      	b.n	8002f5e <pinctrl_configure_pins+0x26>
 8002f90:	4640      	mov	r0, r8
 8002f92:	f003 f935 	bl	8006200 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0ec      	beq.n	8002f74 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	f00a 010f 	and.w	r1, sl, #15
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	f002 f83d 	bl	8005022 <gpio_stm32_configure>
		if (ret < 0) {
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	f104 0408 	add.w	r4, r4, #8
 8002fae:	daca      	bge.n	8002f46 <pinctrl_configure_pins+0xe>
 8002fb0:	e7e2      	b.n	8002f78 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8002fb2:	f06f 0015 	mvn.w	r0, #21
 8002fb6:	e7df      	b.n	8002f78 <pinctrl_configure_pins+0x40>
 8002fb8:	08006bc0 	.word	0x08006bc0

08002fbc <hts221_channel_get>:
};

static int hts221_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
 8002fbc:	b530      	push	{r4, r5, lr}

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 8002fbe:	290d      	cmp	r1, #13
	struct hts221_data *data = dev->data;
 8002fc0:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 8002fc2:	d120      	bne.n	8003006 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 8002fc4:	88c4      	ldrh	r4, [r0, #6]
			   (data->t_sample - data->t0_out) /
 8002fc6:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 8002fca:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
 8002fcc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 8002fd0:	1b1b      	subs	r3, r3, r4
			   (data->t_sample - data->t0_out) /
 8002fd2:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 8002fd4:	434b      	muls	r3, r1
			   (data->t1_out - data->t0_out) +
 8002fd6:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8002fda:	1b49      	subs	r1, r1, r5
			   (data->t_sample - data->t0_out) /
 8002fdc:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
 8002fe0:	4423      	add	r3, r4
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	bfb8      	it	lt
 8002fe8:	1dd9      	addlt	r1, r3, #7
		val->val2 = (conv_val % 8) * (1000000 / 8);
 8002fea:	4258      	negs	r0, r3
 8002fec:	f000 0007 	and.w	r0, r0, #7
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	bf58      	it	pl
 8002ff6:	4243      	negpl	r3, r0
 8002ff8:	4812      	ldr	r0, [pc, #72]	; (8003044 <hts221_channel_get+0x88>)
		val->val1 = conv_val / 8;
 8002ffa:	10c9      	asrs	r1, r1, #3
		val->val2 = (conv_val % 8) * (1000000 / 8);
 8002ffc:	4343      	muls	r3, r0
 8002ffe:	e9c2 1300 	strd	r1, r3, [r2]
		val->val2 = (conv_val % 2) * 500000;
	} else {
		return -ENOTSUP;
	}

	return 0;
 8003002:	2000      	movs	r0, #0
}
 8003004:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
 8003006:	2910      	cmp	r1, #16
 8003008:	d119      	bne.n	800303e <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800300a:	7904      	ldrb	r4, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
 800300c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 8003010:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
 8003012:	f9b0 1000 	ldrsh.w	r1, [r0]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 8003016:	1b1b      	subs	r3, r3, r4
			   (data->rh_sample - data->h0_t0_out) /
 8003018:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 800301a:	434b      	muls	r3, r1
			   (data->h1_t0_out - data->h0_t0_out) +
 800301c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		val->val2 = (conv_val % 2) * 500000;
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <hts221_channel_get+0x8c>)
			   (data->h1_t0_out - data->h0_t0_out) +
 8003022:	1b49      	subs	r1, r1, r5
			   (data->rh_sample - data->h0_t0_out) /
 8003024:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
 8003028:	4423      	add	r3, r4
		val->val1 = conv_val / 2;
 800302a:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		val->val2 = (conv_val % 2) * 500000;
 800302e:	2b00      	cmp	r3, #0
 8003030:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
 8003034:	ea4f 0161 	mov.w	r1, r1, asr #1
		val->val2 = (conv_val % 2) * 500000;
 8003038:	bfb8      	it	lt
 800303a:	425b      	neglt	r3, r3
 800303c:	e7de      	b.n	8002ffc <hts221_channel_get+0x40>
		return -ENOTSUP;
 800303e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003042:	e7df      	b.n	8003004 <hts221_channel_get+0x48>
 8003044:	0001e848 	.word	0x0001e848
 8003048:	0007a120 	.word	0x0007a120

0800304c <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
 800304c:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
 800304e:	6845      	ldr	r5, [r0, #4]
{
 8003050:	b087      	sub	sp, #28
 8003052:	4604      	mov	r4, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
 8003054:	f10d 0107 	add.w	r1, sp, #7
 8003058:	4628      	mov	r0, r5
 800305a:	f001 fc9f 	bl	800499c <hts221_device_id_get>
	if (status < 0) {
 800305e:	2800      	cmp	r0, #0
 8003060:	db05      	blt.n	800306e <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
 8003062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003066:	2bbc      	cmp	r3, #188	; 0xbc
 8003068:	d003      	beq.n	8003072 <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
 800306a:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
 800306e:	b007      	add	sp, #28
 8003070:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
 8003072:	492c      	ldr	r1, [pc, #176]	; (8003124 <hts221_init+0xd8>)
 8003074:	4608      	mov	r0, r1
 8003076:	f001 fe05 	bl	8004c84 <strcmp>
 800307a:	4603      	mov	r3, r0
 800307c:	b160      	cbz	r0, 8003098 <hts221_init+0x4c>
 800307e:	4929      	ldr	r1, [pc, #164]	; (8003124 <hts221_init+0xd8>)
 8003080:	4829      	ldr	r0, [pc, #164]	; (8003128 <hts221_init+0xdc>)
 8003082:	f001 fdff 	bl	8004c84 <strcmp>
 8003086:	2800      	cmp	r0, #0
 8003088:	d049      	beq.n	800311e <hts221_init+0xd2>
 800308a:	4926      	ldr	r1, [pc, #152]	; (8003124 <hts221_init+0xd8>)
 800308c:	4827      	ldr	r0, [pc, #156]	; (800312c <hts221_init+0xe0>)
 800308e:	f001 fdf9 	bl	8004c84 <strcmp>
 8003092:	2800      	cmp	r0, #0
 8003094:	d1e9      	bne.n	800306a <hts221_init+0x1e>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
 8003096:	2302      	movs	r3, #2
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <hts221_init+0xe4>)
 800309a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800309e:	4628      	mov	r0, r5
 80030a0:	7919      	ldrb	r1, [r3, #4]
 80030a2:	f001 fc4d 	bl	8004940 <hts221_data_rate_set>
	if (status < 0) {
 80030a6:	2800      	cmp	r0, #0
 80030a8:	dbe1      	blt.n	800306e <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
 80030aa:	2101      	movs	r1, #1
 80030ac:	4628      	mov	r0, r5
 80030ae:	f001 fc5e 	bl	800496e <hts221_block_data_update_set>
	if (status < 0) {
 80030b2:	2800      	cmp	r0, #0
 80030b4:	dbdb      	blt.n	800306e <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
 80030b6:	2101      	movs	r1, #1
 80030b8:	4628      	mov	r0, r5
 80030ba:	f001 fc74 	bl	80049a6 <hts221_power_on_set>
	if (status < 0) {
 80030be:	2800      	cmp	r0, #0
 80030c0:	dbd5      	blt.n	800306e <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
 80030c2:	2100      	movs	r1, #0
 80030c4:	201e      	movs	r0, #30
 80030c6:	f001 f989 	bl	80043dc <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
 80030ca:	6860      	ldr	r0, [r4, #4]
	struct hts221_data *data = dev->data;
 80030cc:	6925      	ldr	r5, [r4, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
 80030ce:	2310      	movs	r3, #16
 80030d0:	aa02      	add	r2, sp, #8
 80030d2:	21b0      	movs	r1, #176	; 0xb0
 80030d4:	f001 fc28 	bl	8004928 <hts221_read_reg>
	if (status < 0) {
 80030d8:	2800      	cmp	r0, #0
 80030da:	dbc8      	blt.n	800306e <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
 80030dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80030e0:	80ab      	strh	r3, [r5, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
 80030e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80030e6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80030ea:	0219      	lsls	r1, r3, #8
 80030ec:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80030f0:	430a      	orrs	r2, r1
 80030f2:	80ea      	strh	r2, [r5, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	4313      	orrs	r3, r2
 8003100:	812b      	strh	r3, [r5, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
 8003102:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003106:	816b      	strh	r3, [r5, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
 8003108:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800310c:	81ab      	strh	r3, [r5, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
 800310e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003112:	81eb      	strh	r3, [r5, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
 8003114:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003118:	822b      	strh	r3, [r5, #16]
	return 0;
 800311a:	2000      	movs	r0, #0
 800311c:	e7a7      	b.n	800306e <hts221_init+0x22>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
 800311e:	2301      	movs	r3, #1
 8003120:	e7ba      	b.n	8003098 <hts221_init+0x4c>
 8003122:	bf00      	nop
 8003124:	080071b0 	.word	0x080071b0
 8003128:	0800719a 	.word	0x0800719a
 800312c:	0800719c 	.word	0x0800719c
 8003130:	08006c28 	.word	0x08006c28

08003134 <lis2dh_channel_get>:
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	2903      	cmp	r1, #3
	struct lis2dh_data *lis2dh = dev->data;
 8003138:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
 800313a:	d81c      	bhi.n	8003176 <lis2dh_channel_get+0x42>
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <lis2dh_channel_get+0x48>)
 800313e:	5658      	ldrsb	r0, [r3, r1]
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <lis2dh_channel_get+0x4c>)
 8003142:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
 8003144:	490f      	ldr	r1, [pc, #60]	; (8003184 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
 8003146:	42b0      	cmp	r0, r6
 8003148:	f102 0208 	add.w	r2, r2, #8
 800314c:	dd01      	ble.n	8003152 <lis2dh_channel_get+0x1e>
	return 0;
 800314e:	2000      	movs	r0, #0
}
 8003150:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
 8003152:	1d03      	adds	r3, r0, #4
 8003154:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
 8003158:	6925      	ldr	r5, [r4, #16]
 800315a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800315e:	111b      	asrs	r3, r3, #4
 8003160:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
 8003162:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
 8003166:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
 800316a:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
 800316e:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
 8003172:	3001      	adds	r0, #1
 8003174:	e7e7      	b.n	8003146 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
 8003176:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800317a:	e7e9      	b.n	8003150 <lis2dh_channel_get+0x1c>
 800317c:	080071b6 	.word	0x080071b6
 8003180:	080071b2 	.word	0x080071b2
 8003184:	000f4240 	.word	0x000f4240

08003188 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
 8003188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
 800318a:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
 800318c:	6905      	ldr	r5, [r0, #16]
	int status;
	uint8_t id;
	uint8_t raw[6];

	status = cfg->bus_init(dev);
 800318e:	6833      	ldr	r3, [r6, #0]
{
 8003190:	4604      	mov	r4, r0
	status = cfg->bus_init(dev);
 8003192:	4798      	blx	r3
	if (status < 0) {
 8003194:	2800      	cmp	r0, #0
 8003196:	db2e      	blt.n	80031f6 <lis2dh_init+0x6e>
		return status;
	}

	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
 8003198:	686b      	ldr	r3, [r5, #4]
 800319a:	f10d 0207 	add.w	r2, sp, #7
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	210f      	movs	r1, #15
 80031a2:	4620      	mov	r0, r4
 80031a4:	4798      	blx	r3
	if (status < 0) {
 80031a6:	2800      	cmp	r0, #0
 80031a8:	db25      	blt.n	80031f6 <lis2dh_init+0x6e>
		LOG_ERR("Failed to read chip id.");
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
 80031aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031ae:	2b33      	cmp	r3, #51	; 0x33
 80031b0:	d13f      	bne.n	8003232 <lis2dh_init+0xaa>
		LOG_ERR("Invalid chip ID: %02x\n", id);
		return -EINVAL;
	}

	/* Fix LSM303AGR_ACCEL device scale values */
	if (cfg->hw.is_lsm303agr_dev) {
 80031b2:	7b32      	ldrb	r2, [r6, #12]
 80031b4:	07d3      	lsls	r3, r2, #31
 80031b6:	d50b      	bpl.n	80031d0 <lis2dh_init+0x48>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
 80031b8:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <lis2dh_init+0xb0>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
 80031ba:	f644 1116 	movw	r1, #18710	; 0x4916
 80031be:	f242 408b 	movw	r0, #9355	; 0x248b
 80031c2:	e9c3 0100 	strd	r0, r1, [r3]
		lis2dh_reg_val_to_scale[2] = ACCEL_SCALE(6252);
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
 80031c6:	491d      	ldr	r1, [pc, #116]	; (800323c <lis2dh_init+0xb4>)
 80031c8:	f249 262d 	movw	r6, #37421	; 0x922d
 80031cc:	e9c3 6102 	strd	r6, r1, [r3, #8]
	}

	if (cfg->hw.disc_pull_up) {
 80031d0:	0793      	lsls	r3, r2, #30
 80031d2:	d412      	bmi.n	80031fa <lis2dh_init+0x72>
	/* Initialize control register ctrl1 to ctrl 6 to default boot values
	 * to avoid warm start/reset issues as the accelerometer has no reset
	 * pin. Register values are retained if power is not removed.
	 * Default values see LIS2DH documentation page 30, chapter 6.
	 */
	(void)memset(raw, 0, sizeof(raw));
 80031d4:	2206      	movs	r2, #6
 80031d6:	2100      	movs	r1, #0
 80031d8:	a802      	add	r0, sp, #8
 80031da:	f001 fd6a 	bl	8004cb2 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
 80031de:	2307      	movs	r3, #7
 80031e0:	f88d 3008 	strb.w	r3, [sp, #8]

	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
 80031e4:	686b      	ldr	r3, [r5, #4]
 80031e6:	aa02      	add	r2, sp, #8
 80031e8:	685e      	ldr	r6, [r3, #4]
 80031ea:	2120      	movs	r1, #32
 80031ec:	2306      	movs	r3, #6
 80031ee:	4620      	mov	r0, r4
 80031f0:	47b0      	blx	r6
					   sizeof(raw));

	if (status < 0) {
 80031f2:	2800      	cmp	r0, #0
 80031f4:	da0b      	bge.n	800320e <lis2dh_init+0x86>

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
 80031f6:	b004      	add	sp, #16
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
 80031fa:	686b      	ldr	r3, [r5, #4]
 80031fc:	691e      	ldr	r6, [r3, #16]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	461a      	mov	r2, r3
 8003202:	211e      	movs	r1, #30
 8003204:	4620      	mov	r0, r4
 8003206:	47b0      	blx	r6
		if (status < 0) {
 8003208:	2800      	cmp	r0, #0
 800320a:	dae3      	bge.n	80031d4 <lis2dh_init+0x4c>
 800320c:	e7f3      	b.n	80031f6 <lis2dh_init+0x6e>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <lis2dh_init+0xb0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
 8003214:	686b      	ldr	r3, [r5, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2123      	movs	r1, #35	; 0x23
 800321c:	4620      	mov	r0, r4
 800321e:	4798      	blx	r3
	if (status < 0) {
 8003220:	2800      	cmp	r0, #0
 8003222:	dbe8      	blt.n	80031f6 <lis2dh_init+0x6e>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
 8003224:	686b      	ldr	r3, [r5, #4]
 8003226:	2247      	movs	r2, #71	; 0x47
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2120      	movs	r1, #32
 800322c:	4620      	mov	r0, r4
 800322e:	4798      	blx	r3
 8003230:	e7e1      	b.n	80031f6 <lis2dh_init+0x6e>
		return -EINVAL;
 8003232:	f06f 0015 	mvn.w	r0, #21
 8003236:	e7de      	b.n	80031f6 <lis2dh_init+0x6e>
 8003238:	20000024 	.word	0x20000024
 800323c:	0001b694 	.word	0x0001b694

08003240 <lis2dh_i2c_init>:
	.write_reg  = lis2dh_i2c_write_reg,
	.update_reg = lis2dh_i2c_update_reg,
};

int lis2dh_i2c_init(const struct device *dev)
{
 8003240:	b510      	push	{r4, lr}
	struct lis2dh_data *data = dev->data;
	const struct lis2dh_config *cfg = dev->config;

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
 8003242:	6843      	ldr	r3, [r0, #4]
	struct lis2dh_data *data = dev->data;
 8003244:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	f002 ffda 	bl	8006200 <z_device_is_ready>
 800324c:	b118      	cbz	r0, 8003256 <lis2dh_i2c_init+0x16>
		LOG_ERR("Bus device is not ready");
		return -ENODEV;
	}

	data->hw_tf = &lis2dh_i2c_transfer_fn;
 800324e:	4b03      	ldr	r3, [pc, #12]	; (800325c <lis2dh_i2c_init+0x1c>)
 8003250:	6063      	str	r3, [r4, #4]

	return 0;
 8003252:	2000      	movs	r0, #0
}
 8003254:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8003256:	f06f 0012 	mvn.w	r0, #18
 800325a:	e7fb      	b.n	8003254 <lis2dh_i2c_init+0x14>
 800325c:	08006c64 	.word	0x08006c64

08003260 <lis2mdl_channel_get>:

static int lis2mdl_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	switch (chan) {
 8003260:	290b      	cmp	r1, #11
{
 8003262:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (chan) {
 8003264:	d804      	bhi.n	8003270 <lis2mdl_channel_get+0x10>
 8003266:	2907      	cmp	r1, #7
 8003268:	d81b      	bhi.n	80032a2 <lis2mdl_channel_get+0x42>
 800326a:	f06f 0085 	mvn.w	r0, #133	; 0x85
		LOG_ERR("Channel not supported");
		return -ENOTSUP;
	}

	return 0;
}
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (chan) {
 8003270:	290c      	cmp	r1, #12
 8003272:	d1fa      	bne.n	800326a <lis2mdl_channel_get+0xa>
		lis2mdl_channel_get_temp(dev, val);
 8003274:	6901      	ldr	r1, [r0, #16]
	val->val1 = 25  + drv_data->temp_sample / 8;
 8003276:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 800327a:	2b00      	cmp	r3, #0
 800327c:	bfb8      	it	lt
 800327e:	3307      	addlt	r3, #7
 8003280:	10db      	asrs	r3, r3, #3
 8003282:	3319      	adds	r3, #25
 8003284:	b21b      	sxth	r3, r3
 8003286:	6013      	str	r3, [r2, #0]
	val->val2 = (drv_data->temp_sample % 8) * 1000000 / 8;
 8003288:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 800328c:	4259      	negs	r1, r3
 800328e:	f001 0107 	and.w	r1, r1, #7
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	bf58      	it	pl
 8003298:	424b      	negpl	r3, r1
 800329a:	4912      	ldr	r1, [pc, #72]	; (80032e4 <lis2mdl_channel_get+0x84>)
 800329c:	434b      	muls	r3, r1
 800329e:	6053      	str	r3, [r2, #4]
}
 80032a0:	e010      	b.n	80032c4 <lis2mdl_channel_get+0x64>
		lis2mdl_channel_get_mag(dev, chan, val);
 80032a2:	290b      	cmp	r1, #11
 80032a4:	bf18      	it	ne
 80032a6:	3908      	subne	r1, #8
 80032a8:	6900      	ldr	r0, [r0, #16]
		pval->val1 = cval / 1000000;
 80032aa:	4d0f      	ldr	r5, [pc, #60]	; (80032e8 <lis2mdl_channel_get+0x88>)
 80032ac:	bf19      	ittee	ne
 80032ae:	b2c9      	uxtbne	r1, r1
	switch (chan) {
 80032b0:	460c      	movne	r4, r1
 80032b2:	2402      	moveq	r4, #2
 80032b4:	2100      	moveq	r1, #0
		cval = lis2mdl->mag[i] * 1500;
 80032b6:	3004      	adds	r0, #4
 80032b8:	f240 57dc 	movw	r7, #1500	; 0x5dc
	for (i = ofs_start; i <= ofs_stop; i++) {
 80032bc:	42a1      	cmp	r1, r4
 80032be:	f102 0208 	add.w	r2, r2, #8
 80032c2:	dd01      	ble.n	80032c8 <lis2mdl_channel_get+0x68>
	return 0;
 80032c4:	2000      	movs	r0, #0
 80032c6:	e7d2      	b.n	800326e <lis2mdl_channel_get+0xe>
		cval = lis2mdl->mag[i] * 1500;
 80032c8:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 80032cc:	fb13 f307 	smulbb	r3, r3, r7
		pval->val1 = cval / 1000000;
 80032d0:	fb93 f6f5 	sdiv	r6, r3, r5
		pval->val2 = cval % 1000000;
 80032d4:	fb05 3316 	mls	r3, r5, r6, r3
		pval->val1 = cval / 1000000;
 80032d8:	f842 6c08 	str.w	r6, [r2, #-8]
		pval->val2 = cval % 1000000;
 80032dc:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_stop; i++) {
 80032e0:	3101      	adds	r1, #1
 80032e2:	e7eb      	b.n	80032bc <lis2mdl_channel_get+0x5c>
 80032e4:	0001e848 	.word	0x0001e848
 80032e8:	000f4240 	.word	0x000f4240

080032ec <lps22hb_channel_get>:
}

static int lps22hb_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
 80032ec:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
 80032ee:	290e      	cmp	r1, #14
	struct lps22hb_data *data = dev->data;
 80032f0:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
 80032f2:	d111      	bne.n	8003318 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
 80032f4:	6819      	ldr	r1, [r3, #0]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 80032f6:	4c11      	ldr	r4, [pc, #68]	; (800333c <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
 80032f8:	130b      	asrs	r3, r1, #12
 80032fa:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 80032fc:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
 8003300:	fb93 f0f5 	sdiv	r0, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
 8003304:	fb05 3310 	mls	r3, r5, r0, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
 8003308:	4361      	muls	r1, r4
	val->val2 = (raw_val >> 12) % 10 * 100000 +
 800330a:	4363      	muls	r3, r4
 800330c:	eb03 3311 	add.w	r3, r3, r1, lsr #12
 8003310:	e9c2 0300 	strd	r0, r3, [r2]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
 8003314:	2000      	movs	r0, #0
}
 8003316:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 8003318:	290d      	cmp	r1, #13
 800331a:	d10c      	bne.n	8003336 <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
 800331c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	val->val1 = raw_val / 100;
 8003320:	2464      	movs	r4, #100	; 0x64
 8003322:	fb93 f1f4 	sdiv	r1, r3, r4
	val->val2 = ((int32_t)raw_val % 100) * 10000;
 8003326:	fb04 3311 	mls	r3, r4, r1, r3
	val->val1 = raw_val / 100;
 800332a:	b208      	sxth	r0, r1
	val->val2 = ((int32_t)raw_val % 100) * 10000;
 800332c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003330:	fb13 f301 	smulbb	r3, r3, r1
}
 8003334:	e7ec      	b.n	8003310 <lps22hb_channel_get+0x24>
		return -ENOTSUP;
 8003336:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800333a:	e7ec      	b.n	8003316 <lps22hb_channel_get+0x2a>
 800333c:	000186a0 	.word	0x000186a0

08003340 <lsm6dsl_accel_set_odr_raw>:
{
 8003340:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
 8003342:	6905      	ldr	r5, [r0, #16]
	if (data->hw_tf->update_reg(dev,
 8003344:	6a2a      	ldr	r2, [r5, #32]
 8003346:	010b      	lsls	r3, r1, #4
 8003348:	68d6      	ldr	r6, [r2, #12]
{
 800334a:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	22f0      	movs	r2, #240	; 0xf0
 8003352:	2110      	movs	r1, #16
 8003354:	47b0      	blx	r6
 8003356:	2800      	cmp	r0, #0
 8003358:	db09      	blt.n	800336e <lsm6dsl_accel_set_odr_raw+0x2e>
	if (odr < ARRAY_SIZE(lsm6dsl_odr_map)) {
 800335a:	2c0a      	cmp	r4, #10
		return lsm6dsl_odr_map[odr];
 800335c:	bf96      	itet	ls
 800335e:	4b05      	ldrls	r3, [pc, #20]	; (8003374 <lsm6dsl_accel_set_odr_raw+0x34>)
	return lsm6dsl_odr_map[ARRAY_SIZE(lsm6dsl_odr_map) - 1];
 8003360:	f641 2304 	movwhi	r3, #6660	; 0x1a04
		return lsm6dsl_odr_map[odr];
 8003364:	f833 3014 	ldrhls.w	r3, [r3, r4, lsl #1]
	data->accel_freq = lsm6dsl_odr_to_freq_val(odr);
 8003368:	84ab      	strh	r3, [r5, #36]	; 0x24
	return 0;
 800336a:	2000      	movs	r0, #0
}
 800336c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 800336e:	f06f 0004 	mvn.w	r0, #4
 8003372:	e7fb      	b.n	800336c <lsm6dsl_accel_set_odr_raw+0x2c>
 8003374:	08006dd8 	.word	0x08006dd8

08003378 <lsm6dsl_init>:

	return 0;
}

static int lsm6dsl_init(const struct device *dev)
{
 8003378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int ret;
	const struct lsm6dsl_config * const config = dev->config;

	ret = config->bus_init(dev);
 800337a:	6843      	ldr	r3, [r0, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
{
 800337e:	4604      	mov	r4, r0
	ret = config->bus_init(dev);
 8003380:	4798      	blx	r3
	if (ret < 0) {
 8003382:	2800      	cmp	r0, #0
 8003384:	db0b      	blt.n	800339e <lsm6dsl_init+0x26>
	struct lsm6dsl_data *data = dev->data;
 8003386:	6925      	ldr	r5, [r4, #16]
	if (data->hw_tf->update_reg(dev, LSM6DSL_REG_CTRL3_C,
 8003388:	6a2b      	ldr	r3, [r5, #32]
 800338a:	68de      	ldr	r6, [r3, #12]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	461a      	mov	r2, r3
 8003390:	2112      	movs	r1, #18
 8003392:	4620      	mov	r0, r4
 8003394:	47b0      	blx	r6
 8003396:	2800      	cmp	r0, #0
 8003398:	da03      	bge.n	80033a2 <lsm6dsl_init+0x2a>
		return -EIO;
 800339a:	f06f 0004 	mvn.w	r0, #4
		return ret;
	}
#endif

	return 0;
}
 800339e:	b003      	add	sp, #12
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_busy_wait(usec_to_wait);
 80033a2:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80033a6:	f001 f9f1 	bl	800478c <z_impl_k_busy_wait>
	if (data->hw_tf->read_reg(dev, LSM6DSL_REG_WHO_AM_I, &chip_id) < 0) {
 80033aa:	6a2b      	ldr	r3, [r5, #32]
 80033ac:	f10d 0207 	add.w	r2, sp, #7
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	210f      	movs	r1, #15
 80033b4:	4620      	mov	r0, r4
 80033b6:	4798      	blx	r3
 80033b8:	2800      	cmp	r0, #0
 80033ba:	dbee      	blt.n	800339a <lsm6dsl_init+0x22>
	if (chip_id != LSM6DSL_VAL_WHO_AM_I) {
 80033bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033c0:	2b6a      	cmp	r3, #106	; 0x6a
 80033c2:	d1ea      	bne.n	800339a <lsm6dsl_init+0x22>
	if (lsm6dsl_accel_set_fs_raw(dev,
 80033c4:	2100      	movs	r1, #0
 80033c6:	4620      	mov	r0, r4
 80033c8:	f002 fc3c 	bl	8005c44 <lsm6dsl_accel_set_fs_raw>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	dbe4      	blt.n	800339a <lsm6dsl_init+0x22>
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
 80033d0:	2600      	movs	r6, #0
	data->accel_sensitivity = LSM6DSL_DEFAULT_ACCEL_SENSITIVITY;
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <lsm6dsl_init+0xe0>)
 80033d4:	60eb      	str	r3, [r5, #12]
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
 80033d6:	84ae      	strh	r6, [r5, #36]	; 0x24
	if (lsm6dsl_accel_set_odr_raw(dev, CONFIG_LSM6DSL_ACCEL_ODR) < 0) {
 80033d8:	4631      	mov	r1, r6
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff ffb0 	bl	8003340 <lsm6dsl_accel_set_odr_raw>
 80033e0:	42b0      	cmp	r0, r6
 80033e2:	dbda      	blt.n	800339a <lsm6dsl_init+0x22>
	if (lsm6dsl_gyro_set_fs_raw(dev, LSM6DSL_DEFAULT_GYRO_FULLSCALE) < 0) {
 80033e4:	2104      	movs	r1, #4
 80033e6:	4620      	mov	r0, r4
 80033e8:	f002 fc3f 	bl	8005c6a <lsm6dsl_gyro_set_fs_raw>
 80033ec:	42b0      	cmp	r0, r6
 80033ee:	dbd4      	blt.n	800339a <lsm6dsl_init+0x22>
	data->gyro_sensitivity = LSM6DSL_DEFAULT_GYRO_SENSITIVITY;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <lsm6dsl_init+0xe4>)
 80033f2:	61eb      	str	r3, [r5, #28]
	data->gyro_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_GYRO_ODR);
 80033f4:	852e      	strh	r6, [r5, #40]	; 0x28
	if (lsm6dsl_gyro_set_odr_raw(dev, CONFIG_LSM6DSL_GYRO_ODR) < 0) {
 80033f6:	4631      	mov	r1, r6
 80033f8:	4620      	mov	r0, r4
 80033fa:	f002 fc4b 	bl	8005c94 <lsm6dsl_gyro_set_odr_raw>
 80033fe:	42b0      	cmp	r0, r6
 8003400:	dbcb      	blt.n	800339a <lsm6dsl_init+0x22>
	if (data->hw_tf->update_reg(dev,
 8003402:	6a2b      	ldr	r3, [r5, #32]
 8003404:	2207      	movs	r2, #7
 8003406:	68df      	ldr	r7, [r3, #12]
 8003408:	210a      	movs	r1, #10
 800340a:	4633      	mov	r3, r6
 800340c:	4620      	mov	r0, r4
 800340e:	47b8      	blx	r7
 8003410:	42b0      	cmp	r0, r6
 8003412:	dbc2      	blt.n	800339a <lsm6dsl_init+0x22>
	if (data->hw_tf->update_reg(dev,
 8003414:	6a2b      	ldr	r3, [r5, #32]
 8003416:	2246      	movs	r2, #70	; 0x46
 8003418:	68de      	ldr	r6, [r3, #12]
 800341a:	2112      	movs	r1, #18
 800341c:	2344      	movs	r3, #68	; 0x44
 800341e:	4620      	mov	r0, r4
 8003420:	47b0      	blx	r6
 8003422:	2800      	cmp	r0, #0
 8003424:	dbb9      	blt.n	800339a <lsm6dsl_init+0x22>
	if (data->hw_tf->update_reg(dev,
 8003426:	6a2b      	ldr	r3, [r5, #32]
 8003428:	68de      	ldr	r6, [r3, #12]
 800342a:	2310      	movs	r3, #16
 800342c:	461a      	mov	r2, r3
 800342e:	2115      	movs	r1, #21
 8003430:	4620      	mov	r0, r4
 8003432:	47b0      	blx	r6
 8003434:	2800      	cmp	r0, #0
 8003436:	dbb0      	blt.n	800339a <lsm6dsl_init+0x22>
	if (data->hw_tf->update_reg(dev,
 8003438:	6a2b      	ldr	r3, [r5, #32]
 800343a:	68dd      	ldr	r5, [r3, #12]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	461a      	mov	r2, r3
 8003440:	2116      	movs	r1, #22
 8003442:	4620      	mov	r0, r4
 8003444:	47a8      	blx	r5
 8003446:	2800      	cmp	r0, #0
 8003448:	dba7      	blt.n	800339a <lsm6dsl_init+0x22>
	ret = lsm6dsl_init_interrupt(dev);
 800344a:	4620      	mov	r0, r4
 800344c:	f000 f818 	bl	8003480 <lsm6dsl_init_interrupt>
	if (ret < 0) {
 8003450:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8003454:	e7a3      	b.n	800339e <lsm6dsl_init+0x26>
 8003456:	bf00      	nop
 8003458:	3d79db23 	.word	0x3d79db23
 800345c:	408c0000 	.word	0x408c0000

08003460 <lsm6dsl_i2c_init>:
	.read_reg  = lsm6dsl_i2c_read_reg,
	.update_reg = lsm6dsl_i2c_update_reg,
};

int lsm6dsl_i2c_init(const struct device *dev)
{
 8003460:	b508      	push	{r3, lr}
	struct lsm6dsl_data *data = dev->data;
 8003462:	6902      	ldr	r2, [r0, #16]
	const struct lsm6dsl_config *cfg = dev->config;
 8003464:	6843      	ldr	r3, [r0, #4]

	data->hw_tf = &lsm6dsl_i2c_transfer_fn;
 8003466:	4905      	ldr	r1, [pc, #20]	; (800347c <lsm6dsl_i2c_init+0x1c>)
 8003468:	6211      	str	r1, [r2, #32]

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
 800346a:	6858      	ldr	r0, [r3, #4]
 800346c:	f002 fec8 	bl	8006200 <z_device_is_ready>
		return -ENODEV;
	}

	return 0;
 8003470:	2800      	cmp	r0, #0
}
 8003472:	bf0c      	ite	eq
 8003474:	f06f 0012 	mvneq.w	r0, #18
 8003478:	2000      	movne	r0, #0
 800347a:	bd08      	pop	{r3, pc}
 800347c:	08006ce8 	.word	0x08006ce8

08003480 <lsm6dsl_init_interrupt>:
	lsm6dsl_thread_cb(drv_data->dev);
}
#endif

int lsm6dsl_init_interrupt(const struct device *dev)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lsm6dsl_config *config = dev->config;
 8003482:	6844      	ldr	r4, [r0, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 8003484:	6906      	ldr	r6, [r0, #16]
{
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	4605      	mov	r5, r0

	if (!device_is_ready(config->int_gpio.port)) {
 800348a:	68e0      	ldr	r0, [r4, #12]
 800348c:	f002 feb8 	bl	8006200 <z_device_is_ready>
 8003490:	2800      	cmp	r0, #0
 8003492:	d059      	beq.n	8003548 <lsm6dsl_init_interrupt+0xc8>
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8003494:	8a63      	ldrh	r3, [r4, #18]
	return gpio_pin_configure(spec->port,
 8003496:	68e0      	ldr	r0, [r4, #12]
				  spec->pin,
 8003498:	7c21      	ldrb	r1, [r4, #16]
	return gpio_pin_configure(spec->port,
 800349a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
 800349e:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 80034a2:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80034a6:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80034aa:	f04f 0701 	mov.w	r7, #1
 80034ae:	f8dc 3000 	ldr.w	r3, [ip]
 80034b2:	fa07 f701 	lsl.w	r7, r7, r1
 80034b6:	bf14      	ite	ne
 80034b8:	433b      	orrne	r3, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80034ba:	43bb      	biceq	r3, r7
 80034bc:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
 80034c0:	f8de 3000 	ldr.w	r3, [lr]
 80034c4:	4798      	blx	r3
	}

	gpio_pin_configure_dt(&config->int_gpio, GPIO_INPUT);

	gpio_init_callback(&drv_data->gpio_cb,
			   lsm6dsl_gpio_callback, BIT(config->int_gpio.pin));
 80034c6:	7c23      	ldrb	r3, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <lsm6dsl_init_interrupt+0xd0>)
 80034ca:	2701      	movs	r7, #1
 80034cc:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
 80034d0:	e9c6 230d 	strd	r2, r3, [r6, #52]	; 0x34

	if (gpio_add_callback(config->int_gpio.port, &drv_data->gpio_cb) < 0) {
 80034d4:	68e0      	ldr	r0, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 80034d6:	6883      	ldr	r3, [r0, #8]
 80034d8:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
 80034da:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80034de:	b91b      	cbnz	r3, 80034e8 <lsm6dsl_init_interrupt+0x68>
		LOG_ERR("Could not set gpio callback.");
		return -EIO;
 80034e0:	f06f 0004 	mvn.w	r0, #4
#endif

	setup_irq(dev, true);

	return 0;
}
 80034e4:	b009      	add	sp, #36	; 0x24
 80034e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 80034e8:	463a      	mov	r2, r7
 80034ea:	4798      	blx	r3
	if (gpio_add_callback(config->int_gpio.port, &drv_data->gpio_cb) < 0) {
 80034ec:	2800      	cmp	r0, #0
 80034ee:	dbf7      	blt.n	80034e0 <lsm6dsl_init_interrupt+0x60>
	if (drv_data->hw_tf->update_reg(dev,
 80034f0:	6a33      	ldr	r3, [r6, #32]
 80034f2:	68dc      	ldr	r4, [r3, #12]
 80034f4:	2303      	movs	r3, #3
 80034f6:	461a      	mov	r2, r3
 80034f8:	210d      	movs	r1, #13
 80034fa:	4628      	mov	r0, r5
 80034fc:	47a0      	blx	r4
 80034fe:	2800      	cmp	r0, #0
 8003500:	dbee      	blt.n	80034e0 <lsm6dsl_init_interrupt+0x60>
	drv_data->dev = dev;
 8003502:	62f5      	str	r5, [r6, #44]	; 0x2c
	return z_impl_k_sem_init(sem, initial_count, limit);
 8003504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003508:	2100      	movs	r1, #0
 800350a:	f506 60a8 	add.w	r0, r6, #1344	; 0x540
 800350e:	f002 feb9 	bl	8006284 <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003512:	2200      	movs	r2, #0
 8003514:	2300      	movs	r3, #0
 8003516:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800351a:	2400      	movs	r4, #0
 800351c:	f06f 0305 	mvn.w	r3, #5
 8003520:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <lsm6dsl_init_interrupt+0xd4>)
 800352a:	9500      	str	r5, [sp, #0]
 800352c:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8003530:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003534:	f506 6098 	add.w	r0, r6, #1216	; 0x4c0
 8003538:	f000 fbce 	bl	8003cd8 <z_impl_k_thread_create>
	setup_irq(dev, true);
 800353c:	6868      	ldr	r0, [r5, #4]
 800353e:	4639      	mov	r1, r7
 8003540:	f002 fccf 	bl	8005ee2 <setup_irq.isra.0>
	return 0;
 8003544:	4620      	mov	r0, r4
 8003546:	e7cd      	b.n	80034e4 <lsm6dsl_init_interrupt+0x64>
		return -ENODEV;
 8003548:	f06f 0012 	mvn.w	r0, #18
 800354c:	e7ca      	b.n	80034e4 <lsm6dsl_init_interrupt+0x64>
 800354e:	bf00      	nop
 8003550:	08005f1d 	.word	0x08005f1d
 8003554:	08005f39 	.word	0x08005f39

08003558 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 800355a:	6907      	ldr	r7, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 800355c:	6844      	ldr	r4, [r0, #4]
{
 800355e:	4606      	mov	r6, r0
	data->clock = clk;
 8003560:	4839      	ldr	r0, [pc, #228]	; (8003648 <uart_stm32_init+0xf0>)
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	f002 fe4c 	bl	8006200 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8003568:	b920      	cbnz	r0, 8003574 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 800356a:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800356e:	4628      	mov	r0, r5
 8003570:	b003      	add	sp, #12
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	6861      	ldr	r1, [r4, #4]
 8003578:	6883      	ldr	r3, [r0, #8]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4798      	blx	r3
	if (err != 0) {
 800357e:	4605      	mov	r5, r0
 8003580:	2800      	cmp	r0, #0
 8003582:	d1f4      	bne.n	800356e <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 8003584:	4601      	mov	r1, r0
 8003586:	aa01      	add	r2, sp, #4
 8003588:	69a0      	ldr	r0, [r4, #24]
 800358a:	f002 f84d 	bl	8005628 <pinctrl_lookup_state>
	if (ret < 0) {
 800358e:	2800      	cmp	r0, #0
 8003590:	da01      	bge.n	8003596 <uart_stm32_init+0x3e>
 8003592:	4605      	mov	r5, r0
 8003594:	e7eb      	b.n	800356e <uart_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 8003596:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003598:	462a      	mov	r2, r5
 800359a:	7919      	ldrb	r1, [r3, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f7ff fccb 	bl	8002f38 <pinctrl_configure_pins>
	if (err < 0) {
 80035a2:	2800      	cmp	r0, #0
 80035a4:	dbf5      	blt.n	8003592 <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 80035a6:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80035a8:	68d3      	ldr	r3, [r2, #12]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ae:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 80035b0:	68b8      	ldr	r0, [r7, #8]
 80035b2:	f002 fe25 	bl	8006200 <z_device_is_ready>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d0d7      	beq.n	800356a <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 80035be:	6883      	ldr	r3, [r0, #8]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	b103      	cbz	r3, 80035c6 <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 80035c4:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 80035c6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	f101 030c 	add.w	r3, r1, #12
 80035cc:	e853 3f00 	ldrex	r3, [r3]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80035d0:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	f101 000c 	add.w	r0, r1, #12
 80035d8:	e840 3200 	strex	r2, r3, [r0]
 80035dc:	2a00      	cmp	r2, #0
 80035de:	d1f3      	bne.n	80035c8 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 80035e0:	6923      	ldr	r3, [r4, #16]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d02a      	beq.n	800363c <uart_stm32_init+0xe4>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	bf12      	itee	ne
 80035ea:	2000      	movne	r0, #0
 80035ec:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 80035f0:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 80035f4:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80035f6:	68cb      	ldr	r3, [r1, #12]
 80035f8:	4310      	orrs	r0, r2
 80035fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035fe:	4303      	orrs	r3, r0
 8003600:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003602:	690b      	ldr	r3, [r1, #16]
 8003604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003608:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 800360a:	7b23      	ldrb	r3, [r4, #12]
 800360c:	b12b      	cbz	r3, 800361a <uart_stm32_init+0xc2>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800360e:	6873      	ldr	r3, [r6, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003612:	6953      	ldr	r3, [r2, #20]
 8003614:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003618:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	4630      	mov	r0, r6
 800361e:	f002 fd7e 	bl	800611e <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8003622:	7d23      	ldrb	r3, [r4, #20]
 8003624:	b123      	cbz	r3, 8003630 <uart_stm32_init+0xd8>
		LL_USART_EnableHalfDuplex(config->usart);
 8003626:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003628:	6953      	ldr	r3, [r2, #20]
 800362a:	f043 0308 	orr.w	r3, r3, #8
 800362e:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 8003630:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003632:	68d3      	ldr	r3, [r2, #12]
 8003634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003638:	60d3      	str	r3, [r2, #12]
	return 0;
 800363a:	e798      	b.n	800356e <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800363c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003644:	e7d6      	b.n	80035f4 <uart_stm32_init+0x9c>
 8003646:	bf00      	nop
 8003648:	080064d4 	.word	0x080064d4

0800364c <uart_stm32_configure>:
{
 800364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003650:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8003652:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003654:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8003656:	2b01      	cmp	r3, #1
{
 8003658:	460c      	mov	r4, r1
	switch (parity) {
 800365a:	d07d      	beq.n	8003758 <uart_stm32_configure+0x10c>
 800365c:	1e9a      	subs	r2, r3, #2
 800365e:	4257      	negs	r7, r2
 8003660:	4157      	adcs	r7, r2
 8003662:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003664:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003666:	f894 8006 	ldrb.w	r8, [r4, #6]
 800366a:	2a02      	cmp	r2, #2
 800366c:	bf96      	itet	ls
 800366e:	494c      	ldrls	r1, [pc, #304]	; (80037a0 <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003670:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8003674:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8003678:	f1b8 0f04 	cmp.w	r8, #4
 800367c:	d07b      	beq.n	8003776 <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800367e:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 8003682:	2b00      	cmp	r3, #0
 8003684:	d16b      	bne.n	800375e <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8003686:	f1be 0f01 	cmp.w	lr, #1
 800368a:	f022 0202 	bic.w	r2, r2, #2
 800368e:	d07f      	beq.n	8003790 <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8003690:	2a00      	cmp	r2, #0
 8003692:	d070      	beq.n	8003776 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003694:	f1b8 0f02 	cmp.w	r8, #2
 8003698:	d96d      	bls.n	8003776 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 800369a:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800369c:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80036a0:	f1be 0f00 	cmp.w	lr, #0
 80036a4:	d00d      	beq.n	80036c2 <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 80036a6:	4a3f      	ldr	r2, [pc, #252]	; (80037a4 <uart_stm32_configure+0x158>)
 80036a8:	4590      	cmp	r8, r2
 80036aa:	d007      	beq.n	80036bc <uart_stm32_configure+0x70>
 80036ac:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80036b0:	4590      	cmp	r8, r2
 80036b2:	d003      	beq.n	80036bc <uart_stm32_configure+0x70>
 80036b4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 80036b8:	4590      	cmp	r8, r2
 80036ba:	d15c      	bne.n	8003776 <uart_stm32_configure+0x12a>
 80036bc:	f1be 0f01 	cmp.w	lr, #1
 80036c0:	d159      	bne.n	8003776 <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80036c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ca:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 80036ce:	6842      	ldr	r2, [r0, #4]
 80036d0:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80036d4:	f8de 200c 	ldr.w	r2, [lr, #12]
 80036d8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80036dc:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80036de:	bf1f      	itttt	ne
 80036e0:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80036e4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80036e8:	433a      	orrne	r2, r7
 80036ea:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80036ee:	6842      	ldr	r2, [r0, #4]
 80036f0:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80036f8:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036fa:	bf1f      	itttt	ne
 80036fc:	693a      	ldrne	r2, [r7, #16]
 80036fe:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8003702:	ea42 020c 	orrne.w	r2, r2, ip
 8003706:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 8003708:	6842      	ldr	r2, [r0, #4]
 800370a:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8003712:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8003714:	bf1f      	itttt	ne
 8003716:	68fa      	ldrne	r2, [r7, #12]
 8003718:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 800371c:	4313      	orrne	r3, r2
 800371e:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003720:	6843      	ldr	r3, [r0, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003724:	6953      	ldr	r3, [r2, #20]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800372a:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800372c:	bf1f      	itttt	ne
 800372e:	6953      	ldrne	r3, [r2, #20]
 8003730:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8003734:	430b      	orrne	r3, r1
 8003736:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 8003738:	6821      	ldr	r1, [r4, #0]
 800373a:	6833      	ldr	r3, [r6, #0]
 800373c:	4299      	cmp	r1, r3
 800373e:	d003      	beq.n	8003748 <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003740:	f002 fced 	bl	800611e <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8003748:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800374a:	68d3      	ldr	r3, [r2, #12]
 800374c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003750:	60d3      	str	r3, [r2, #12]
	return 0;
 8003752:	2000      	movs	r0, #0
};
 8003754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8003758:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 800375c:	e782      	b.n	8003664 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800375e:	3b03      	subs	r3, #3
 8003760:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003764:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8003766:	d109      	bne.n	800377c <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003768:	2b01      	cmp	r3, #1
 800376a:	d904      	bls.n	8003776 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 800376c:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8003770:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8003774:	d106      	bne.n	8003784 <uart_stm32_configure+0x138>
		return -ENOTSUP;
 8003776:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800377a:	e7eb      	b.n	8003754 <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800377c:	2b01      	cmp	r3, #1
 800377e:	d9fa      	bls.n	8003776 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8003780:	2100      	movs	r1, #0
 8003782:	e7f5      	b.n	8003770 <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003784:	f1b8 0f02 	cmp.w	r8, #2
 8003788:	d9f5      	bls.n	8003776 <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 800378a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378e:	e785      	b.n	800369c <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8003790:	2a00      	cmp	r2, #0
 8003792:	d0f0      	beq.n	8003776 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003794:	f1b8 0f02 	cmp.w	r8, #2
 8003798:	d9ed      	bls.n	8003776 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 800379a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800379e:	e77d      	b.n	800369c <uart_stm32_configure+0x50>
 80037a0:	08006dee 	.word	0x08006dee
 80037a4:	40011000 	.word	0x40011000

080037a8 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 80037a8:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 80037aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037ae:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80037b0:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80037b2:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <elapsed+0x34>)
 80037b6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80037ba:	4909      	ldr	r1, [pc, #36]	; (80037e0 <elapsed+0x38>)
 80037bc:	d101      	bne.n	80037c2 <elapsed+0x1a>
	    || (val1 < val2)) {
 80037be:	4282      	cmp	r2, r0
 80037c0:	d206      	bcs.n	80037d0 <elapsed+0x28>
		overflow_cyc += last_load;
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	680c      	ldr	r4, [r1, #0]
 80037c6:	4422      	add	r2, r4
 80037c8:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80037ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80037ce:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	680a      	ldr	r2, [r1, #0]
 80037d4:	4413      	add	r3, r2
}
 80037d6:	1a18      	subs	r0, r3, r0
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	bf00      	nop
 80037dc:	200008f4 	.word	0x200008f4
 80037e0:	20000900 	.word	0x20000900

080037e4 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <sys_clock_driver_init+0x28>)
 80037e6:	2210      	movs	r2, #16
 80037e8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <sys_clock_driver_init+0x2c>)
 80037ee:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80037f2:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <sys_clock_driver_init+0x30>)
 80037f6:	2000      	movs	r0, #0
 80037f8:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80037fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037fe:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003800:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	f042 0207 	orr.w	r2, r2, #7
 8003808:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	20000900 	.word	0x20000900
 8003814:	200008f4 	.word	0x200008f4

08003818 <sys_clock_isr>:
{
 8003818:	b508      	push	{r3, lr}
	elapsed();
 800381a:	f7ff ffc5 	bl	80037a8 <elapsed>
	cycle_count += overflow_cyc;
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <sys_clock_isr+0x38>)
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <sys_clock_isr+0x3c>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	6811      	ldr	r1, [r2, #0]
 8003826:	4408      	add	r0, r1
 8003828:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <sys_clock_isr+0x40>)
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f242 01d0 	movw	r1, #8400	; 0x20d0
 8003836:	1ac0      	subs	r0, r0, r3
 8003838:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800383c:	fb01 3300 	mla	r3, r1, r0, r3
 8003840:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8003842:	f000 ff1f 	bl	8004684 <sys_clock_announce>
}
 8003846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800384a:	f7fe bdab 	b.w	80023a4 <z_arm_exc_exit>
 800384e:	bf00      	nop
 8003850:	200008f4 	.word	0x200008f4
 8003854:	200008fc 	.word	0x200008fc
 8003858:	200008f8 	.word	0x200008f8

0800385c <sys_clock_set_timeout>:
{
 800385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003860:	4e31      	ldr	r6, [pc, #196]	; (8003928 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8003862:	2900      	cmp	r1, #0
 8003864:	d054      	beq.n	8003910 <sys_clock_set_timeout+0xb4>
 8003866:	1c42      	adds	r2, r0, #1
 8003868:	d10a      	bne.n	8003880 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800386a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800386e:	6913      	ldr	r3, [r2, #16]
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8003876:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800387a:	6033      	str	r3, [r6, #0]
}
 800387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8003880:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003882:	2801      	cmp	r0, #1
 8003884:	dd4a      	ble.n	800391c <sys_clock_set_timeout+0xc0>
 8003886:	f240 78cc 	movw	r8, #1996	; 0x7cc
 800388a:	4540      	cmp	r0, r8
 800388c:	dc01      	bgt.n	8003892 <sys_clock_set_timeout+0x36>
 800388e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8003892:	f04f 0310 	mov.w	r3, #16
 8003896:	f3ef 8411 	mrs	r4, BASEPRI
 800389a:	f383 8812 	msr	BASEPRI_MAX, r3
 800389e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 80038a2:	f7ff ff81 	bl	80037a8 <elapsed>
	cycle_count += pending;
 80038a6:	4f21      	ldr	r7, [pc, #132]	; (800392c <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 80038a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 80038ac:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 80038ae:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <sys_clock_set_timeout+0xd4>)
 80038b8:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <sys_clock_set_timeout+0xd8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 80038be:	1ad1      	subs	r1, r2, r3
 80038c0:	d42f      	bmi.n	8003922 <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 80038c2:	f242 00d0 	movw	r0, #8400	; 0x20d0
		delay += unannounced;
 80038c6:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80038ca:	f501 5103 	add.w	r1, r1, #8384	; 0x20c0
		delay -= unannounced;
 80038ce:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80038d0:	310f      	adds	r1, #15
 80038d2:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 80038d6:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d920      	bls.n	8003922 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 80038e0:	4915      	ldr	r1, [pc, #84]	; (8003938 <sys_clock_set_timeout+0xdc>)
 80038e2:	428b      	cmp	r3, r1
 80038e4:	bf28      	it	cs
 80038e6:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 80038e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 80038ec:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 80038ee:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 80038f0:	3b01      	subs	r3, #1
 80038f2:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80038f4:	2300      	movs	r3, #0
 80038f6:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 80038f8:	4584      	cmp	ip, r0
 80038fa:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 80038fe:	bf38      	it	cc
 8003900:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8003902:	441a      	add	r2, r3
 8003904:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8003906:	f384 8811 	msr	BASEPRI, r4
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	e7b5      	b.n	800387c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003910:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8003912:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003914:	d1b5      	bne.n	8003882 <sys_clock_set_timeout+0x26>
 8003916:	f240 70cc 	movw	r0, #1996	; 0x7cc
 800391a:	e7b8      	b.n	800388e <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800391c:	f04f 0800 	mov.w	r8, #0
 8003920:	e7b7      	b.n	8003892 <sys_clock_set_timeout+0x36>
 8003922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003926:	e7df      	b.n	80038e8 <sys_clock_set_timeout+0x8c>
 8003928:	20000900 	.word	0x20000900
 800392c:	200008fc 	.word	0x200008fc
 8003930:	200008f4 	.word	0x200008f4
 8003934:	200008f8 	.word	0x200008f8
 8003938:	00ffd5c0 	.word	0x00ffd5c0

0800393c <sys_clock_elapsed>:
{
 800393c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800393e:	f04f 0310 	mov.w	r3, #16
 8003942:	f3ef 8411 	mrs	r4, BASEPRI
 8003946:	f383 8812 	msr	BASEPRI_MAX, r3
 800394a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800394e:	f7ff ff2b 	bl	80037a8 <elapsed>
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <sys_clock_elapsed+0x34>)
 8003954:	4a07      	ldr	r2, [pc, #28]	; (8003974 <sys_clock_elapsed+0x38>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	4403      	add	r3, r0
	__asm__ volatile(
 800395e:	f384 8811 	msr	BASEPRI, r4
 8003962:	f3bf 8f6f 	isb	sy
}
 8003966:	f242 00d0 	movw	r0, #8400	; 0x20d0
 800396a:	fbb3 f0f0 	udiv	r0, r3, r0
 800396e:	bd10      	pop	{r4, pc}
 8003970:	200008fc 	.word	0x200008fc
 8003974:	200008f8 	.word	0x200008f8

08003978 <sys_clock_cycle_get_32>:
{
 8003978:	b510      	push	{r4, lr}
	__asm__ volatile(
 800397a:	f04f 0310 	mov.w	r3, #16
 800397e:	f3ef 8411 	mrs	r4, BASEPRI
 8003982:	f383 8812 	msr	BASEPRI_MAX, r3
 8003986:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800398a:	f7ff ff0d 	bl	80037a8 <elapsed>
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <sys_clock_cycle_get_32+0x28>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4418      	add	r0, r3
	__asm__ volatile(
 8003994:	f384 8811 	msr	BASEPRI, r4
 8003998:	f3bf 8f6f 	isb	sy
}
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	200008fc 	.word	0x200008fc

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a6:	4913      	ldr	r1, [pc, #76]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80039a8:	688b      	ldr	r3, [r1, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d01c      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x48>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c0:	bf14      	ite	ne
 80039c2:	480d      	ldrne	r0, [pc, #52]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c4:	480d      	ldreq	r0, [pc, #52]	; (80039fc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80039ca:	bf18      	it	ne
 80039cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	fba1 0100 	umull	r0, r1, r1, r0
 80039d6:	f7fd f875 	bl	8000ac4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039e2:	3301      	adds	r3, #1
 80039e4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80039e6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80039ea:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80039ee:	e7fc      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80039f2:	e7fa      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x46>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	007a1200 	.word	0x007a1200
 80039fc:	00f42400 	.word	0x00f42400

08003a00 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d041      	beq.n	8003a88 <LL_SetFlashLatency+0x88>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <LL_SetFlashLatency+0x8c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8003a0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a12:	d125      	bne.n	8003a60 <LL_SetFlashLatency+0x60>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <LL_SetFlashLatency+0x90>)
 8003a16:	4290      	cmp	r0, r2
 8003a18:	d81d      	bhi.n	8003a56 <LL_SetFlashLatency+0x56>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <LL_SetFlashLatency+0x94>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4290      	cmp	r0, r2
 8003a20:	d801      	bhi.n	8003a26 <LL_SetFlashLatency+0x26>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003a22:	2000      	movs	r0, #0
 8003a24:	e005      	b.n	8003a32 <LL_SetFlashLatency+0x32>
 8003a26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        {
          latency = LL_FLASH_LATENCY_1;
 8003a2a:	2001      	movs	r0, #1
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8003a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a30:	d024      	beq.n	8003a7c <LL_SetFlashLatency+0x7c>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <LL_SetFlashLatency+0x98>)
 8003a34:	6813      	ldr	r3, [r2, #0]
 8003a36:	f023 0307 	bic.w	r3, r3, #7
 8003a3a:	4303      	orrs	r3, r0
 8003a3c:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8003a44:	4283      	cmp	r3, r0
 8003a46:	bf1c      	itt	ne
 8003a48:	6813      	ldrne	r3, [r2, #0]
 8003a4a:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8003a4e:	1ac0      	subs	r0, r0, r3
 8003a50:	bf18      	it	ne
 8003a52:	2001      	movne	r0, #1
 8003a54:	4770      	bx	lr
 8003a56:	681b      	ldr	r3, [r3, #0]
        latency = LL_FLASH_LATENCY_2;
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a5e:	e7e5      	b.n	8003a2c <LL_SetFlashLatency+0x2c>
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8003a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6a:	d1da      	bne.n	8003a22 <LL_SetFlashLatency+0x22>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <LL_SetFlashLatency+0x90>)
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	d808      	bhi.n	8003a84 <LL_SetFlashLatency+0x84>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <LL_SetFlashLatency+0x94>)
 8003a74:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003a76:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003a7a:	d9da      	bls.n	8003a32 <LL_SetFlashLatency+0x32>
 8003a7c:	2801      	cmp	r0, #1
 8003a7e:	bf38      	it	cc
 8003a80:	2001      	movcc	r0, #1
 8003a82:	e7d6      	b.n	8003a32 <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8003a84:	2002      	movs	r0, #2
 8003a86:	e7d4      	b.n	8003a32 <LL_SetFlashLatency+0x32>
    status = ERROR;
 8003a88:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8003a8a:	4770      	bx	lr
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	03938700 	.word	0x03938700
 8003a94:	01c9c380 	.word	0x01c9c380
 8003a98:	40023c00 	.word	0x40023c00

08003a9c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <z_sys_init_run_level+0x40>)
{
 8003a9e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003aa0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d800      	bhi.n	8003ab0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8003ab0:	e9d4 3500 	ldrd	r3, r5, [r4]
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	4798      	blx	r3
		if (dev != NULL) {
 8003ab8:	b16d      	cbz	r5, 8003ad6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8003aba:	b138      	cbz	r0, 8003acc <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8003abc:	2800      	cmp	r0, #0
 8003abe:	bfb8      	it	lt
 8003ac0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8003ac2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8003ac4:	28ff      	cmp	r0, #255	; 0xff
 8003ac6:	bfa8      	it	ge
 8003ac8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8003aca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8003acc:	68ea      	ldr	r2, [r5, #12]
 8003ace:	7853      	ldrb	r3, [r2, #1]
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003ad6:	3408      	adds	r4, #8
 8003ad8:	e7e7      	b.n	8003aaa <z_sys_init_run_level+0xe>
 8003ada:	bf00      	nop
 8003adc:	08006d98 	.word	0x08006d98

08003ae0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8003ae0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <bg_thread_main+0x2c>)
 8003ae4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8003ae6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8003ae8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8003aea:	f7ff ffd7 	bl	8003a9c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8003aee:	f000 fe65 	bl	80047bc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8003af2:	2004      	movs	r0, #4
 8003af4:	f7ff ffd2 	bl	8003a9c <z_sys_init_run_level>

	z_init_static_threads();
 8003af8:	f000 f91a 	bl	8003d30 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8003afc:	f7fd fb38 	bl	8001170 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8003b00:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <bg_thread_main+0x30>)
 8003b02:	7b13      	ldrb	r3, [r2, #12]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8003b0a:	bd08      	pop	{r3, pc}
 8003b0c:	20000947 	.word	0x20000947
 8003b10:	200006c0 	.word	0x200006c0

08003b14 <z_bss_zero>:
{
 8003b14:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8003b16:	4803      	ldr	r0, [pc, #12]	; (8003b24 <z_bss_zero+0x10>)
 8003b18:	4a03      	ldr	r2, [pc, #12]	; (8003b28 <z_bss_zero+0x14>)
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	1a12      	subs	r2, r2, r0
 8003b1e:	f002 fba1 	bl	8006264 <z_early_memset>
}
 8003b22:	bd08      	pop	{r3, pc}
 8003b24:	200000c0 	.word	0x200000c0
 8003b28:	2000094c 	.word	0x2000094c

08003b2c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8003b2e:	2300      	movs	r3, #0
{
 8003b30:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8003b32:	2201      	movs	r2, #1
 8003b34:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8003b38:	4e13      	ldr	r6, [pc, #76]	; (8003b88 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8003b3a:	4d14      	ldr	r5, [pc, #80]	; (8003b8c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	220f      	movs	r2, #15
 8003b40:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8003b44:	4912      	ldr	r1, [pc, #72]	; (8003b90 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8003b46:	2314      	movs	r3, #20
 8003b48:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8003b4c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8003b50:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8003b52:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8003b56:	fb00 1104 	mla	r1, r0, r4, r1
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <z_init_cpu+0x68>)
 8003b5c:	9500      	str	r5, [sp, #0]
 8003b5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 f886 	bl	8003c74 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003b68:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8003b6c:	60ee      	str	r6, [r5, #12]
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8003b74:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8003b78:	fb04 3303 	mla	r3, r4, r3, r3
 8003b7c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 8003b7e:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
 8003b80:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8003b82:	b006      	add	sp, #24
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	bf00      	nop
 8003b88:	20000640 	.word	0x20000640
 8003b8c:	20000904 	.word	0x20000904
 8003b90:	200011c0 	.word	0x200011c0
 8003b94:	0800626d 	.word	0x0800626d
 8003b98:	20000980 	.word	0x20000980

08003b9c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8003b9c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8003b9e:	2000      	movs	r0, #0
{
 8003ba0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8003ba2:	f7ff ff7b 	bl	8003a9c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003ba8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8003bac:	4d2b      	ldr	r5, [pc, #172]	; (8003c5c <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8003bae:	4e2c      	ldr	r6, [pc, #176]	; (8003c60 <z_cstart+0xc4>)
 8003bb0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003bb2:	4f2c      	ldr	r7, [pc, #176]	; (8003c64 <z_cstart+0xc8>)
 8003bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb8:	616b      	str	r3, [r5, #20]
 8003bba:	2400      	movs	r4, #0
 8003bbc:	23f0      	movs	r3, #240	; 0xf0
 8003bbe:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8003bc2:	77ec      	strb	r4, [r5, #31]
 8003bc4:	762c      	strb	r4, [r5, #24]
 8003bc6:	766c      	strb	r4, [r5, #25]
 8003bc8:	76ac      	strb	r4, [r5, #26]
 8003bca:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8003bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bd0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003bd4:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8003bd6:	f7fe fd31 	bl	800263c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8003bda:	f7fe fad1 	bl	8002180 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003be2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8003be4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8003be6:	f7fe fe0b 	bl	8002800 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8003bea:	f7fe fd71 	bl	80026d0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8003bee:	f240 1301 	movw	r3, #257	; 0x101
 8003bf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8003bf6:	ab06      	add	r3, sp, #24
 8003bf8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8003bfa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8003bfe:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8003c00:	f002 fafd 	bl	80061fe <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7ff ff49 	bl	8003a9c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8003c0a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8003c0c:	4d16      	ldr	r5, [pc, #88]	; (8003c68 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8003c0e:	f7ff ff45 	bl	8003a9c <z_sys_init_run_level>
	z_sched_init();
 8003c12:	f000 fb55 	bl	80042c0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 8003c18:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003c1a:	9305      	str	r3, [sp, #20]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4914      	ldr	r1, [pc, #80]	; (8003c70 <z_cstart+0xd4>)
 8003c20:	9400      	str	r4, [sp, #0]
 8003c22:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f81f 	bl	8003c74 <z_setup_new_thread>
 8003c36:	7b6a      	ldrb	r2, [r5, #13]
 8003c38:	4606      	mov	r6, r0
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8003c3e:	4628      	mov	r0, r5
 8003c40:	736a      	strb	r2, [r5, #13]
 8003c42:	f002 fb65 	bl	8006310 <z_ready_thread>
	z_init_cpu(0);
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7ff ff70 	bl	8003b2c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8003c4c:	463a      	mov	r2, r7
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	f7fe fb7d 	bl	8002350 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8003c56:	bf00      	nop
 8003c58:	200011c0 	.word	0x200011c0
 8003c5c:	e000ed00 	.word	0xe000ed00
 8003c60:	20000904 	.word	0x20000904
 8003c64:	08003ae1 	.word	0x08003ae1
 8003c68:	200006c0 	.word	0x200006c0
 8003c6c:	08007255 	.word	0x08007255
 8003c70:	20001340 	.word	0x20001340

08003c74 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8003c74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8003c78:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8003c7a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8003c7c:	2604      	movs	r6, #4
 8003c7e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8003c80:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003c82:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8003c84:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8003c88:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003c8a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8003c8c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8003c92:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003c94:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8003c98:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8003c9a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8003c9e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8003ca2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8003ca4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8003ca6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003ca8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003cac:	9202      	str	r2, [sp, #8]
 8003cae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cb0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8003cb2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cb6:	9200      	str	r2, [sp, #0]
 8003cb8:	4642      	mov	r2, r8
{
 8003cba:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003cbc:	f7fe fb16 	bl	80022ec <arch_new_thread>
	if (!_current) {
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8003cc2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	b103      	cbz	r3, 8003cca <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8003cca:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003ccc:	4640      	mov	r0, r8
 8003cce:	b004      	add	sp, #16
 8003cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd4:	20000904 	.word	0x20000904

08003cd8 <z_impl_k_thread_create>:
{
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8003cdc:	2500      	movs	r5, #0
 8003cde:	9505      	str	r5, [sp, #20]
 8003ce0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ce2:	9504      	str	r5, [sp, #16]
 8003ce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003ce6:	9503      	str	r5, [sp, #12]
 8003ce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003cea:	9502      	str	r5, [sp, #8]
{
 8003cec:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8003cf0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003cf2:	9501      	str	r5, [sp, #4]
 8003cf4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cf6:	9500      	str	r5, [sp, #0]
{
 8003cf8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8003cfa:	f7ff ffbb 	bl	8003c74 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8003cfe:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003d02:	bf08      	it	eq
 8003d04:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 8003d08:	d005      	beq.n	8003d16 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8003d0a:	ea56 0307 	orrs.w	r3, r6, r7
 8003d0e:	d105      	bne.n	8003d1c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 fa55 	bl	80041c0 <z_sched_start>
}
 8003d16:	4620      	mov	r0, r4
 8003d18:	b007      	add	sp, #28
 8003d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <z_impl_k_thread_create+0x54>)
 8003d1e:	463a      	mov	r2, r7
 8003d20:	4633      	mov	r3, r6
 8003d22:	f104 0018 	add.w	r0, r4, #24
 8003d26:	f000 fc37 	bl	8004598 <z_add_timeout>
 8003d2a:	e7f4      	b.n	8003d16 <z_impl_k_thread_create+0x3e>
 8003d2c:	08006375 	.word	0x08006375

08003d30 <z_init_static_threads>:
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	4c22      	ldr	r4, [pc, #136]	; (8003dbc <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8003d34:	4d22      	ldr	r5, [pc, #136]	; (8003dc0 <z_init_static_threads+0x90>)
{
 8003d36:	b087      	sub	sp, #28
 8003d38:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8003d3a:	42ae      	cmp	r6, r5
 8003d3c:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8003d40:	d30b      	bcc.n	8003d5a <z_init_static_threads+0x2a>
	k_sched_lock();
 8003d42:	f000 fa8d 	bl	8004260 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003d46:	4c1d      	ldr	r4, [pc, #116]	; (8003dbc <z_init_static_threads+0x8c>)
 8003d48:	4f1e      	ldr	r7, [pc, #120]	; (8003dc4 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8003d4a:	260a      	movs	r6, #10
 8003d4c:	42ac      	cmp	r4, r5
 8003d4e:	d320      	bcc.n	8003d92 <z_init_static_threads+0x62>
}
 8003d50:	b007      	add	sp, #28
 8003d52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8003d56:	f000 ba97 	b.w	8004288 <k_sched_unlock>
		z_setup_new_thread(
 8003d5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8003d64:	9304      	str	r3, [sp, #16]
 8003d66:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8003d82:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 8003d86:	f7ff ff75 	bl	8003c74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8003d8a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8003d8e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8003d90:	e7d2      	b.n	8003d38 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8003d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d94:	1c53      	adds	r3, r2, #1
 8003d96:	d009      	beq.n	8003dac <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8003d98:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003d9c:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8003da0:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8003da4:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8003da6:	d103      	bne.n	8003db0 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8003da8:	f000 fa0a 	bl	80041c0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003dac:	342c      	adds	r4, #44	; 0x2c
 8003dae:	e7cd      	b.n	8003d4c <z_init_static_threads+0x1c>
 8003db0:	4639      	mov	r1, r7
 8003db2:	3018      	adds	r0, #24
 8003db4:	f000 fbf0 	bl	8004598 <z_add_timeout>
 8003db8:	e7f8      	b.n	8003dac <z_init_static_threads+0x7c>
 8003dba:	bf00      	nop
 8003dbc:	08006944 	.word	0x08006944
 8003dc0:	08006944 	.word	0x08006944
 8003dc4:	08006375 	.word	0x08006375

08003dc8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4604      	mov	r4, r0
	__asm__ volatile(
 8003dcc:	f04f 0310 	mov.w	r3, #16
 8003dd0:	f3ef 8511 	mrs	r5, BASEPRI
 8003dd4:	f383 8812 	msr	BASEPRI_MAX, r3
 8003dd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8003ddc:	f002 face 	bl	800637c <z_unpend_first_thread>

	if (thread != NULL) {
 8003de0:	b148      	cbz	r0, 8003df6 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003de2:	2200      	movs	r2, #0
 8003de4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8003de6:	f002 fa93 	bl	8006310 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8003dea:	4629      	mov	r1, r5
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8003dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8003df2:	f000 b9d3 	b.w	800419c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8003df6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf18      	it	ne
 8003dfe:	3301      	addne	r3, #1
 8003e00:	60a3      	str	r3, [r4, #8]
}
 8003e02:	e7f2      	b.n	8003dea <z_impl_k_sem_give+0x22>
 8003e04:	20000948 	.word	0x20000948

08003e08 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8003e08:	b513      	push	{r0, r1, r4, lr}
 8003e0a:	f04f 0410 	mov.w	r4, #16
 8003e0e:	f3ef 8111 	mrs	r1, BASEPRI
 8003e12:	f384 8812 	msr	BASEPRI_MAX, r4
 8003e16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8003e1a:	6884      	ldr	r4, [r0, #8]
 8003e1c:	b144      	cbz	r4, 8003e30 <z_impl_k_sem_take+0x28>
		sem->count--;
 8003e1e:	3c01      	subs	r4, #1
 8003e20:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8003e22:	f381 8811 	msr	BASEPRI, r1
 8003e26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8003e2a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8003e30:	ea52 0403 	orrs.w	r4, r2, r3
 8003e34:	d106      	bne.n	8003e44 <z_impl_k_sem_take+0x3c>
 8003e36:	f381 8811 	msr	BASEPRI, r1
 8003e3a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8003e3e:	f06f 000f 	mvn.w	r0, #15
 8003e42:	e7f3      	b.n	8003e2c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8003e44:	e9cd 2300 	strd	r2, r3, [sp]
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4802      	ldr	r0, [pc, #8]	; (8003e54 <z_impl_k_sem_take+0x4c>)
 8003e4c:	f000 f988 	bl	8004160 <z_pend_curr>
	return ret;
 8003e50:	e7ec      	b.n	8003e2c <z_impl_k_sem_take+0x24>
 8003e52:	bf00      	nop
 8003e54:	20000948 	.word	0x20000948

08003e58 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4604      	mov	r4, r0
	__asm__ volatile(
 8003e5c:	f04f 0310 	mov.w	r3, #16
 8003e60:	f3ef 8511 	mrs	r5, BASEPRI
 8003e64:	f383 8812 	msr	BASEPRI_MAX, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 8003e70:	4620      	mov	r0, r4
 8003e72:	f002 fa83 	bl	800637c <z_unpend_first_thread>
		if (thread == NULL) {
 8003e76:	b118      	cbz	r0, 8003e80 <z_impl_k_sem_reset+0x28>
 8003e78:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 8003e7a:	f002 fa49 	bl	8006310 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 8003e7e:	e7f7      	b.n	8003e70 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 8003e80:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8003e82:	4629      	mov	r1, r5
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <z_impl_k_sem_reset+0x38>)
}
 8003e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8003e8a:	f000 b987 	b.w	800419c <z_reschedule>
 8003e8e:	bf00      	nop
 8003e90:	20000948 	.word	0x20000948

08003e94 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8003e94:	89c3      	ldrh	r3, [r0, #14]
 8003e96:	2b7f      	cmp	r3, #127	; 0x7f
 8003e98:	d812      	bhi.n	8003ec0 <sliceable+0x2c>
	int ret = slice_ticks;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <sliceable+0x30>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 8003e9e:	b163      	cbz	r3, 8003eba <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <sliceable+0x34>)
 8003ea2:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	db09      	blt.n	8003ec0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8003eac:	7b43      	ldrb	r3, [r0, #13]
 8003eae:	06db      	lsls	r3, r3, #27
 8003eb0:	d106      	bne.n	8003ec0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <sliceable+0x38>)
 8003eb4:	1ac3      	subs	r3, r0, r3
 8003eb6:	bf18      	it	ne
 8003eb8:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 8003eba:	f003 0001 	and.w	r0, r3, #1
 8003ebe:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e7fa      	b.n	8003eba <sliceable+0x26>
 8003ec4:	2000092c 	.word	0x2000092c
 8003ec8:	20000928 	.word	0x20000928
 8003ecc:	20000640 	.word	0x20000640

08003ed0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <slice_timeout+0x14>)
 8003ed2:	1ac0      	subs	r0, r0, r3
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <slice_timeout+0x18>)
 8003ed6:	10c0      	asrs	r0, r0, #3
 8003ed8:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <slice_timeout+0x1c>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000740 	.word	0x20000740
 8003ee8:	aaaaaaab 	.word	0xaaaaaaab
 8003eec:	20000948 	.word	0x20000948

08003ef0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
 8003ef0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
 8003ef4:	4c0e      	ldr	r4, [pc, #56]	; (8003f30 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
 8003ef6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
 8003ef8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003efc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
 8003f00:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
 8003f02:	4620      	mov	r0, r4
 8003f04:	f002 fa6c 	bl	80063e0 <z_abort_timeout>
	slice_expired[cpu] = false;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <z_reset_time_slice+0x44>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7ff ffc0 	bl	8003e94 <sliceable>
 8003f14:	b148      	cbz	r0, 8003f2a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8003f18:	4908      	ldr	r1, [pc, #32]	; (8003f3c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8003f1e:	4620      	mov	r0, r4
 8003f20:	17d3      	asrs	r3, r2, #31
	}
}
 8003f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8003f26:	f000 bb37 	b.w	8004598 <z_add_timeout>
}
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	20000904 	.word	0x20000904
 8003f30:	20000740 	.word	0x20000740
 8003f34:	20000948 	.word	0x20000948
 8003f38:	2000092c 	.word	0x2000092c
 8003f3c:	08003ed1 	.word	0x08003ed1

08003f40 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8003f40:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003f42:	4d0d      	ldr	r5, [pc, #52]	; (8003f78 <update_cache+0x38>)
 8003f44:	462b      	mov	r3, r5
 8003f46:	f853 4f18 	ldr.w	r4, [r3, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	d000      	beq.n	8003f50 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8003f4e:	b904      	cbnz	r4, 8003f52 <update_cache+0x12>
 8003f50:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8003f52:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8003f54:	b938      	cbnz	r0, 8003f66 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8003f56:	7b5a      	ldrb	r2, [r3, #13]
 8003f58:	06d2      	lsls	r2, r2, #27
 8003f5a:	d104      	bne.n	8003f66 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8003f5c:	69a2      	ldr	r2, [r4, #24]
 8003f5e:	b912      	cbnz	r2, 8003f66 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003f60:	89da      	ldrh	r2, [r3, #14]
 8003f62:	2a7f      	cmp	r2, #127	; 0x7f
 8003f64:	d805      	bhi.n	8003f72 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d002      	beq.n	8003f70 <update_cache+0x30>
			z_reset_time_slice(thread);
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7ff ffc0 	bl	8003ef0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8003f70:	4623      	mov	r3, r4
 8003f72:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20000904 	.word	0x20000904

08003f7c <move_thread_to_end_of_prio_q>:
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8003f7e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8003f82:	7b43      	ldrb	r3, [r0, #13]
 8003f84:	2a00      	cmp	r2, #0
{
 8003f86:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003f88:	da04      	bge.n	8003f94 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8003f90:	f002 f984 	bl	800629c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003f94:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <move_thread_to_end_of_prio_q+0x70>)
 8003f98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	734b      	strb	r3, [r1, #13]
 8003fa0:	f850 3f18 	ldr.w	r3, [r0, #24]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8003fa4:	69d4      	ldr	r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003fa6:	4283      	cmp	r3, r0
 8003fa8:	bf08      	it	eq
 8003faa:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003fac:	b923      	cbnz	r3, 8003fb8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 8003fae:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8003fb2:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8003fb4:	61d1      	str	r1, [r2, #28]
}
 8003fb6:	e00c      	b.n	8003fd2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8003fb8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8003fbc:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003fc0:	42b5      	cmp	r5, r6
 8003fc2:	d00e      	beq.n	8003fe2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003fc4:	42ae      	cmp	r6, r5
 8003fc6:	dd0c      	ble.n	8003fe2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003fc8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8003fca:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8003fce:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8003fd0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8003fd2:	6890      	ldr	r0, [r2, #8]
 8003fd4:	1a43      	subs	r3, r0, r1
 8003fd6:	4258      	negs	r0, r3
}
 8003fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8003fdc:	4158      	adcs	r0, r3
 8003fde:	f7ff bfaf 	b.w	8003f40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d0e3      	beq.n	8003fae <move_thread_to_end_of_prio_q+0x32>
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e7e0      	b.n	8003fac <move_thread_to_end_of_prio_q+0x30>
 8003fea:	bf00      	nop
 8003fec:	20000904 	.word	0x20000904

08003ff0 <ready_thread>:
{
 8003ff0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8003ff2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8003ff6:	7b42      	ldrb	r2, [r0, #13]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	db29      	blt.n	8004050 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003ffc:	06d3      	lsls	r3, r2, #27
 8003ffe:	d127      	bne.n	8004050 <ready_thread+0x60>
	return node->next != NULL;
 8004000:	6983      	ldr	r3, [r0, #24]
 8004002:	bb2b      	cbnz	r3, 8004050 <ready_thread+0x60>
	return list->head == list;
 8004004:	4913      	ldr	r1, [pc, #76]	; (8004054 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8004006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800400a:	7342      	strb	r2, [r0, #13]
 800400c:	460a      	mov	r2, r1
 800400e:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004012:	4294      	cmp	r4, r2
 8004014:	bf18      	it	ne
 8004016:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 8004018:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800401a:	b923      	cbnz	r3, 8004026 <ready_thread+0x36>
	node->prev = tail;
 800401c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8004020:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8004022:	61c8      	str	r0, [r1, #28]
}
 8004024:	e00c      	b.n	8004040 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 8004026:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800402a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800402e:	42b5      	cmp	r5, r6
 8004030:	d00a      	beq.n	8004048 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004032:	42ae      	cmp	r6, r5
 8004034:	dd08      	ble.n	8004048 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 8004036:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004038:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800403c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800403e:	6058      	str	r0, [r3, #4]
}
 8004040:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff bf7c 	b.w	8003f40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8004048:	42a3      	cmp	r3, r4
 800404a:	d0e7      	beq.n	800401c <ready_thread+0x2c>
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e7e4      	b.n	800401a <ready_thread+0x2a>
}
 8004050:	bc70      	pop	{r4, r5, r6}
 8004052:	4770      	bx	lr
 8004054:	20000904 	.word	0x20000904

08004058 <unready_thread>:
{
 8004058:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800405a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800405e:	7b43      	ldrb	r3, [r0, #13]
 8004060:	2a00      	cmp	r2, #0
{
 8004062:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8004064:	da04      	bge.n	8004070 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800406c:	f002 f916 	bl	800629c <sys_dlist_remove>
	update_cache(thread == _current);
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <unready_thread+0x2c>)
 8004072:	6898      	ldr	r0, [r3, #8]
 8004074:	1a43      	subs	r3, r0, r1
 8004076:	4258      	negs	r0, r3
 8004078:	4158      	adcs	r0, r3
}
 800407a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800407e:	f7ff bf5f 	b.w	8003f40 <update_cache>
 8004082:	bf00      	nop
 8004084:	20000904 	.word	0x20000904

08004088 <pend_locked>:
{
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4615      	mov	r5, r2
 800408c:	461c      	mov	r4, r3
 800408e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8004090:	f002 f916 	bl	80062c0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004094:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004098:	bf08      	it	eq
 800409a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800409e:	d008      	beq.n	80040b2 <pend_locked+0x2a>
 80040a0:	462a      	mov	r2, r5
 80040a2:	4623      	mov	r3, r4
 80040a4:	f106 0018 	add.w	r0, r6, #24
 80040a8:	4902      	ldr	r1, [pc, #8]	; (80040b4 <pend_locked+0x2c>)
}
 80040aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ae:	f000 ba73 	b.w	8004598 <z_add_timeout>
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	08006375 	.word	0x08006375

080040b8 <k_sched_time_slice_set>:
{
 80040b8:	b510      	push	{r4, lr}
 80040ba:	f04f 0310 	mov.w	r3, #16
 80040be:	f3ef 8411 	mrs	r4, BASEPRI
 80040c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80040c6:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 80040ca:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80040cc:	2800      	cmp	r0, #0
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	dd02      	ble.n	80040da <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	bfb8      	it	lt
 80040d8:	2302      	movlt	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80040da:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <k_sched_time_slice_set+0x3c>)
 80040dc:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <k_sched_time_slice_set+0x40>)
 80040e0:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <k_sched_time_slice_set+0x44>)
 80040e4:	6898      	ldr	r0, [r3, #8]
 80040e6:	f7ff ff03 	bl	8003ef0 <z_reset_time_slice>
	__asm__ volatile(
 80040ea:	f384 8811 	msr	BASEPRI, r4
 80040ee:	f3bf 8f6f 	isb	sy
}
 80040f2:	bd10      	pop	{r4, pc}
 80040f4:	2000092c 	.word	0x2000092c
 80040f8:	20000928 	.word	0x20000928
 80040fc:	20000904 	.word	0x20000904

08004100 <z_time_slice>:
{
 8004100:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004102:	f04f 0310 	mov.w	r3, #16
 8004106:	f3ef 8511 	mrs	r5, BASEPRI
 800410a:	f383 8812 	msr	BASEPRI_MAX, r3
 800410e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <z_time_slice+0x54>)
	if (pending_current == curr) {
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 8004116:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 8004118:	6810      	ldr	r0, [r2, #0]
 800411a:	42a0      	cmp	r0, r4
 800411c:	d106      	bne.n	800412c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 800411e:	f7ff fee7 	bl	8003ef0 <z_reset_time_slice>
	__asm__ volatile(
 8004122:	f385 8811 	msr	BASEPRI, r5
 8004126:	f3bf 8f6f 	isb	sy
}
 800412a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800412c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 800412e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8004130:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <z_time_slice+0x5c>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f3      	beq.n	8004122 <z_time_slice+0x22>
 800413a:	4620      	mov	r0, r4
 800413c:	f7ff feaa 	bl	8003e94 <sliceable>
 8004140:	2800      	cmp	r0, #0
 8004142:	d0ee      	beq.n	8004122 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 8004144:	7b63      	ldrb	r3, [r4, #13]
 8004146:	06db      	lsls	r3, r3, #27
 8004148:	d102      	bne.n	8004150 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff ff16 	bl	8003f7c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8004150:	4620      	mov	r0, r4
 8004152:	e7e4      	b.n	800411e <z_time_slice+0x1e>
 8004154:	20000904 	.word	0x20000904
 8004158:	20000924 	.word	0x20000924
 800415c:	20000948 	.word	0x20000948

08004160 <z_pend_curr>:
{
 8004160:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <z_pend_curr+0x34>)
 8004164:	4d0c      	ldr	r5, [pc, #48]	; (8004198 <z_pend_curr+0x38>)
 8004166:	6886      	ldr	r6, [r0, #8]
 8004168:	602e      	str	r6, [r5, #0]
{
 800416a:	460c      	mov	r4, r1
 800416c:	4611      	mov	r1, r2
 800416e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 8004172:	f04f 0610 	mov.w	r6, #16
 8004176:	f3ef 8511 	mrs	r5, BASEPRI
 800417a:	f386 8812 	msr	BASEPRI_MAX, r6
 800417e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 8004182:	6880      	ldr	r0, [r0, #8]
 8004184:	f7ff ff80 	bl	8004088 <pend_locked>
	ret = arch_swap(key);
 8004188:	4620      	mov	r0, r4
}
 800418a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800418e:	f7fe b859 	b.w	8002244 <arch_swap>
 8004192:	bf00      	nop
 8004194:	20000904 	.word	0x20000904
 8004198:	20000924 	.word	0x20000924

0800419c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800419c:	b949      	cbnz	r1, 80041b2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419e:	f3ef 8005 	mrs	r0, IPSR
 80041a2:	b930      	cbnz	r0, 80041b2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <z_reschedule+0x16>
 80041ae:	f7fe b849 	b.w	8002244 <arch_swap>
	__asm__ volatile(
 80041b2:	f381 8811 	msr	BASEPRI, r1
 80041b6:	f3bf 8f6f 	isb	sy
}
 80041ba:	4770      	bx	lr
 80041bc:	20000904 	.word	0x20000904

080041c0 <z_sched_start>:
{
 80041c0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80041c2:	f04f 0210 	mov.w	r2, #16
 80041c6:	f3ef 8411 	mrs	r4, BASEPRI
 80041ca:	f382 8812 	msr	BASEPRI_MAX, r2
 80041ce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80041d2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80041d4:	0751      	lsls	r1, r2, #29
 80041d6:	d404      	bmi.n	80041e2 <z_sched_start+0x22>
	__asm__ volatile(
 80041d8:	f384 8811 	msr	BASEPRI, r4
 80041dc:	f3bf 8f6f 	isb	sy
}
 80041e0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80041e8:	f7ff ff02 	bl	8003ff0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80041ec:	4621      	mov	r1, r4
 80041ee:	4802      	ldr	r0, [pc, #8]	; (80041f8 <z_sched_start+0x38>)
}
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80041f4:	f7ff bfd2 	b.w	800419c <z_reschedule>
 80041f8:	20000949 	.word	0x20000949

080041fc <z_impl_k_thread_suspend>:
{
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8004200:	3018      	adds	r0, #24
 8004202:	f002 f8ed 	bl	80063e0 <z_abort_timeout>
	__asm__ volatile(
 8004206:	f04f 0310 	mov.w	r3, #16
 800420a:	f3ef 8611 	mrs	r6, BASEPRI
 800420e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004212:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8004216:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 800421a:	7b63      	ldrb	r3, [r4, #13]
 800421c:	2a00      	cmp	r2, #0
 800421e:	da05      	bge.n	800422c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004226:	4620      	mov	r0, r4
 8004228:	f002 f838 	bl	800629c <sys_dlist_remove>
		update_cache(thread == _current);
 800422c:	4d0b      	ldr	r5, [pc, #44]	; (800425c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800422e:	7b63      	ldrb	r3, [r4, #13]
 8004230:	68a8      	ldr	r0, [r5, #8]
 8004232:	f043 0310 	orr.w	r3, r3, #16
 8004236:	7363      	strb	r3, [r4, #13]
 8004238:	1b03      	subs	r3, r0, r4
 800423a:	4258      	negs	r0, r3
 800423c:	4158      	adcs	r0, r3
 800423e:	f7ff fe7f 	bl	8003f40 <update_cache>
	__asm__ volatile(
 8004242:	f386 8811 	msr	BASEPRI, r6
 8004246:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800424a:	68ab      	ldr	r3, [r5, #8]
 800424c:	42a3      	cmp	r3, r4
 800424e:	d103      	bne.n	8004258 <z_impl_k_thread_suspend+0x5c>
}
 8004250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8004254:	f002 b8ba 	b.w	80063cc <z_reschedule_unlocked>
}
 8004258:	bd70      	pop	{r4, r5, r6, pc}
 800425a:	bf00      	nop
 800425c:	20000904 	.word	0x20000904

08004260 <k_sched_lock>:
	__asm__ volatile(
 8004260:	f04f 0310 	mov.w	r3, #16
 8004264:	f3ef 8111 	mrs	r1, BASEPRI
 8004268:	f383 8812 	msr	BASEPRI_MAX, r3
 800426c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <k_sched_lock+0x24>)
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	7bd3      	ldrb	r3, [r2, #15]
 8004276:	3b01      	subs	r3, #1
 8004278:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800427a:	f381 8811 	msr	BASEPRI, r1
 800427e:	f3bf 8f6f 	isb	sy
}
 8004282:	4770      	bx	lr
 8004284:	20000904 	.word	0x20000904

08004288 <k_sched_unlock>:
{
 8004288:	b510      	push	{r4, lr}
	__asm__ volatile(
 800428a:	f04f 0310 	mov.w	r3, #16
 800428e:	f3ef 8411 	mrs	r4, BASEPRI
 8004292:	f383 8812 	msr	BASEPRI_MAX, r3
 8004296:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <k_sched_unlock+0x34>)
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	7bd3      	ldrb	r3, [r2, #15]
 80042a0:	3301      	adds	r3, #1
 80042a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7ff fe4b 	bl	8003f40 <update_cache>
	__asm__ volatile(
 80042aa:	f384 8811 	msr	BASEPRI, r4
 80042ae:	f3bf 8f6f 	isb	sy
}
 80042b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80042b6:	f002 b889 	b.w	80063cc <z_reschedule_unlocked>
 80042ba:	bf00      	nop
 80042bc:	20000904 	.word	0x20000904

080042c0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80042c2:	2100      	movs	r1, #0
 80042c4:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 80042c8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80042cc:	4608      	mov	r0, r1
 80042ce:	f7ff bef3 	b.w	80040b8 <k_sched_time_slice_set>
 80042d2:	bf00      	nop
 80042d4:	20000904 	.word	0x20000904

080042d8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80042da:	f04f 0310 	mov.w	r3, #16
 80042de:	f3ef 8511 	mrs	r5, BASEPRI
 80042e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80042e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80042ea:	4919      	ldr	r1, [pc, #100]	; (8004350 <z_impl_k_yield+0x78>)
 80042ec:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80042ee:	7b43      	ldrb	r3, [r0, #13]
 80042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80042f6:	f001 ffd1 	bl	800629c <sys_dlist_remove>
	}
	queue_thread(_current);
 80042fa:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80042fc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 80042fe:	4608      	mov	r0, r1
 8004300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004304:	735a      	strb	r2, [r3, #13]
 8004306:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
 800430a:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800430c:	4282      	cmp	r2, r0
 800430e:	bf08      	it	eq
 8004310:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004312:	b922      	cbnz	r2, 800431e <z_impl_k_yield+0x46>
	node->prev = tail;
 8004314:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8004318:	6023      	str	r3, [r4, #0]
	list->tail = node;
 800431a:	61cb      	str	r3, [r1, #28]
}
 800431c:	e00c      	b.n	8004338 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 800431e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8004322:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8004326:	42be      	cmp	r6, r7
 8004328:	d00e      	beq.n	8004348 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800432a:	42b7      	cmp	r7, r6
 800432c:	dd0c      	ble.n	8004348 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 800432e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8004330:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8004334:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8004336:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8004338:	2001      	movs	r0, #1
 800433a:	f7ff fe01 	bl	8003f40 <update_cache>
 800433e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8004340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004344:	f7fd bf7e 	b.w	8002244 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8004348:	42a2      	cmp	r2, r4
 800434a:	d0e3      	beq.n	8004314 <z_impl_k_yield+0x3c>
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	e7e0      	b.n	8004312 <z_impl_k_yield+0x3a>
 8004350:	20000904 	.word	0x20000904

08004354 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8004354:	ea50 0301 	orrs.w	r3, r0, r1
{
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	4605      	mov	r5, r0
 800435e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8004360:	d103      	bne.n	800436a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8004362:	f7ff ffb9 	bl	80042d8 <z_impl_k_yield>
		k_yield();
		return 0;
 8004366:	2000      	movs	r0, #0
 8004368:	e02c      	b.n	80043c4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 800436a:	1c83      	adds	r3, r0, #2
 800436c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8004370:	db2a      	blt.n	80043c8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8004372:	f002 f84b 	bl	800640c <sys_clock_tick_get_32>
 8004376:	182c      	adds	r4, r5, r0
 8004378:	f04f 0310 	mov.w	r3, #16
 800437c:	f3ef 8811 	mrs	r8, BASEPRI
 8004380:	f383 8812 	msr	BASEPRI_MAX, r3
 8004384:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8004388:	4f11      	ldr	r7, [pc, #68]	; (80043d0 <z_tick_sleep+0x7c>)
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <z_tick_sleep+0x80>)
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8004390:	f7ff fe62 	bl	8004058 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8004394:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8004396:	4910      	ldr	r1, [pc, #64]	; (80043d8 <z_tick_sleep+0x84>)
 8004398:	462a      	mov	r2, r5
 800439a:	4633      	mov	r3, r6
 800439c:	3018      	adds	r0, #24
 800439e:	f000 f8fb 	bl	8004598 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80043a2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80043a4:	7b53      	ldrb	r3, [r2, #13]
 80043a6:	f043 0310 	orr.w	r3, r3, #16
 80043aa:	7353      	strb	r3, [r2, #13]
 80043ac:	4640      	mov	r0, r8
 80043ae:	f7fd ff49 	bl	8002244 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80043b2:	f002 f82b 	bl	800640c <sys_clock_tick_get_32>
 80043b6:	1a20      	subs	r0, r4, r0
 80043b8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80043bc:	2801      	cmp	r0, #1
 80043be:	f173 0300 	sbcs.w	r3, r3, #0
 80043c2:	dbd0      	blt.n	8004366 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80043c8:	f06f 0401 	mvn.w	r4, #1
 80043cc:	1a24      	subs	r4, r4, r0
 80043ce:	e7d3      	b.n	8004378 <z_tick_sleep+0x24>
 80043d0:	20000904 	.word	0x20000904
 80043d4:	20000924 	.word	0x20000924
 80043d8:	08006375 	.word	0x08006375

080043dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80043dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80043e0:	bf08      	it	eq
 80043e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80043e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80043e8:	d106      	bne.n	80043f8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <z_impl_k_sleep+0x2c>)
 80043ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80043ee:	f7ff ff05 	bl	80041fc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80043f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80043f8:	f7ff ffac 	bl	8004354 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80043fc:	220a      	movs	r2, #10
 80043fe:	2300      	movs	r3, #0
 8004400:	17c1      	asrs	r1, r0, #31
 8004402:	f7fc fb5f 	bl	8000ac4 <__aeabi_uldivmod>
	return ret;
 8004406:	e7f6      	b.n	80043f6 <z_impl_k_sleep+0x1a>
 8004408:	20000904 	.word	0x20000904

0800440c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <z_impl_z_current_get+0x8>)
 800440e:	6898      	ldr	r0, [r3, #8]
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000904 	.word	0x20000904

08004418 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8004418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	f04f 0310 	mov.w	r3, #16
 8004422:	f3ef 8611 	mrs	r6, BASEPRI
 8004426:	f383 8812 	msr	BASEPRI_MAX, r3
 800442a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800442e:	7b03      	ldrb	r3, [r0, #12]
 8004430:	07d9      	lsls	r1, r3, #31
 8004432:	d50b      	bpl.n	800444c <z_thread_abort+0x34>
	__asm__ volatile(
 8004434:	f386 8811 	msr	BASEPRI, r6
 8004438:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 800443c:	4040      	eors	r0, r0
 800443e:	f380 8811 	msr	BASEPRI, r0
 8004442:	f04f 0004 	mov.w	r0, #4
 8004446:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800444c:	7b43      	ldrb	r3, [r0, #13]
 800444e:	071a      	lsls	r2, r3, #28
 8004450:	d504      	bpl.n	800445c <z_thread_abort+0x44>
 8004452:	f386 8811 	msr	BASEPRI, r6
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	e7f5      	b.n	8004448 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800445c:	f023 0220 	bic.w	r2, r3, #32
 8004460:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8004464:	09d2      	lsrs	r2, r2, #7
 8004466:	d120      	bne.n	80044aa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8004468:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	b113      	cbz	r3, 8004474 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 800446e:	4620      	mov	r0, r4
 8004470:	f001 ff1c 	bl	80062ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8004474:	f104 0018 	add.w	r0, r4, #24
 8004478:	f001 ffb2 	bl	80063e0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800447c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8004480:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8004484:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004486:	42bd      	cmp	r5, r7
 8004488:	d000      	beq.n	800448c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800448a:	b9b5      	cbnz	r5, 80044ba <z_thread_abort+0xa2>
		update_cache(1);
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fd57 	bl	8003f40 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <z_thread_abort+0xbc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	42a3      	cmp	r3, r4
 8004498:	d1db      	bne.n	8004452 <z_thread_abort+0x3a>
 800449a:	f3ef 8305 	mrs	r3, IPSR
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1d7      	bne.n	8004452 <z_thread_abort+0x3a>
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7fd fece 	bl	8002244 <arch_swap>
	return ret;
 80044a8:	e7d3      	b.n	8004452 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80044aa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80044b4:	f001 fef2 	bl	800629c <sys_dlist_remove>
}
 80044b8:	e7d7      	b.n	800446a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 80044ba:	4628      	mov	r0, r5
 80044bc:	f001 fef6 	bl	80062ac <unpend_thread_no_timeout>
 80044c0:	f105 0018 	add.w	r0, r5, #24
 80044c4:	f001 ff8c 	bl	80063e0 <z_abort_timeout>
 80044c8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80044cc:	4628      	mov	r0, r5
 80044ce:	f7ff fd8f 	bl	8003ff0 <ready_thread>
 80044d2:	e7d7      	b.n	8004484 <z_thread_abort+0x6c>
 80044d4:	20000904 	.word	0x20000904

080044d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80044d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 80044da:	4806      	ldr	r0, [pc, #24]	; (80044f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80044dc:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <z_data_copy+0x20>)
 80044de:	4907      	ldr	r1, [pc, #28]	; (80044fc <z_data_copy+0x24>)
 80044e0:	1a12      	subs	r2, r2, r0
 80044e2:	f001 fec1 	bl	8006268 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80044e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <z_data_copy+0x28>)
 80044ec:	4905      	ldr	r1, [pc, #20]	; (8004504 <z_data_copy+0x2c>)
 80044ee:	4806      	ldr	r0, [pc, #24]	; (8004508 <z_data_copy+0x30>)
 80044f0:	f001 beba 	b.w	8006268 <z_early_memcpy>
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000096 	.word	0x20000096
 80044fc:	080072a0 	.word	0x080072a0
 8004500:	00000000 	.word	0x00000000
 8004504:	080072a0 	.word	0x080072a0
 8004508:	20000000 	.word	0x20000000

0800450c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <elapsed+0x10>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	b90b      	cbnz	r3, 8004516 <elapsed+0xa>
 8004512:	f7ff ba13 	b.w	800393c <sys_clock_elapsed>
}
 8004516:	2000      	movs	r0, #0
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000930 	.word	0x20000930

08004520 <next_timeout>:

static int32_t next_timeout(void)
{
 8004520:	b510      	push	{r4, lr}
	return list->head == list;
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <next_timeout+0x3c>)
 8004524:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004526:	429c      	cmp	r4, r3
 8004528:	d104      	bne.n	8004534 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800452a:	f7ff ffef 	bl	800450c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 800452e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 8004532:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8004534:	f7ff ffea 	bl	800450c <elapsed>
	if ((to == NULL) ||
 8004538:	2c00      	cmp	r4, #0
 800453a:	d0f8      	beq.n	800452e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800453c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8004540:	1a1b      	subs	r3, r3, r0
 8004542:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8004546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454a:	f172 0100 	sbcs.w	r1, r2, #0
 800454e:	daee      	bge.n	800452e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8004550:	2a00      	cmp	r2, #0
 8004552:	bfac      	ite	ge
 8004554:	4618      	movge	r0, r3
 8004556:	2000      	movlt	r0, #0
	return ret;
 8004558:	e7eb      	b.n	8004532 <next_timeout+0x12>
 800455a:	bf00      	nop
 800455c:	20000058 	.word	0x20000058

08004560 <remove_timeout>:
{
 8004560:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8004562:	b170      	cbz	r0, 8004582 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <remove_timeout+0x34>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4298      	cmp	r0, r3
 800456a:	d00a      	beq.n	8004582 <remove_timeout+0x22>
 800456c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 800456e:	b143      	cbz	r3, 8004582 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8004570:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8004574:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8004578:	1912      	adds	r2, r2, r4
 800457a:	eb41 0105 	adc.w	r1, r1, r5
 800457e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8004582:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8004586:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004588:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800458a:	2300      	movs	r3, #0
	node->prev = NULL;
 800458c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8004590:	bd30      	pop	{r4, r5, pc}
 8004592:	bf00      	nop
 8004594:	20000058 	.word	0x20000058

08004598 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459c:	bf08      	it	eq
 800459e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80045a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	461d      	mov	r5, r3
 80045a8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80045aa:	d05c      	beq.n	8004666 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80045ac:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80045ae:	f04f 0310 	mov.w	r3, #16
 80045b2:	f3ef 8711 	mrs	r7, BASEPRI
 80045b6:	f383 8812 	msr	BASEPRI_MAX, r3
 80045ba:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80045be:	3201      	adds	r2, #1
 80045c0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 80045c4:	da24      	bge.n	8004610 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80045c6:	492d      	ldr	r1, [pc, #180]	; (800467c <z_add_timeout+0xe4>)
 80045c8:	e9d1 2000 	ldrd	r2, r0, [r1]
 80045cc:	f06f 0301 	mvn.w	r3, #1
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045d6:	eb62 0000 	sbc.w	r0, r2, r0
 80045da:	1b9e      	subs	r6, r3, r6
 80045dc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 80045e0:	2e01      	cmp	r6, #1
 80045e2:	f170 0300 	sbcs.w	r3, r0, #0
 80045e6:	da01      	bge.n	80045ec <z_add_timeout+0x54>
 80045e8:	2601      	movs	r6, #1
 80045ea:	2000      	movs	r0, #0
 80045ec:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 80045f0:	4e23      	ldr	r6, [pc, #140]	; (8004680 <z_add_timeout+0xe8>)
 80045f2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 80045f6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80045f8:	45b4      	cmp	ip, r6
 80045fa:	bf08      	it	eq
 80045fc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8004600:	f1bc 0f00 	cmp.w	ip, #0
 8004604:	d10d      	bne.n	8004622 <z_add_timeout+0x8a>
	node->prev = tail;
 8004606:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 800460a:	602c      	str	r4, [r5, #0]
	list->tail = node;
 800460c:	6074      	str	r4, [r6, #4]
}
 800460e:	e01c      	b.n	800464a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8004610:	f7ff ff7c 	bl	800450c <elapsed>
 8004614:	3601      	adds	r6, #1
 8004616:	f145 0500 	adc.w	r5, r5, #0
 800461a:	1836      	adds	r6, r6, r0
 800461c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8004620:	e7e4      	b.n	80045ec <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8004622:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8004626:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800462a:	4293      	cmp	r3, r2
 800462c:	eb71 0e00 	sbcs.w	lr, r1, r0
 8004630:	da1a      	bge.n	8004668 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
 8004632:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8004634:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004638:	eb60 0001 	sbc.w	r0, r0, r1
 800463c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8004640:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8004644:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8004646:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 800464a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800464c:	42b3      	cmp	r3, r6
 800464e:	d006      	beq.n	800465e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8004650:	429c      	cmp	r4, r3
 8004652:	d104      	bne.n	800465e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
 8004654:	f7ff ff64 	bl	8004520 <next_timeout>
 8004658:	2100      	movs	r1, #0
 800465a:	f7ff f8ff 	bl	800385c <sys_clock_set_timeout>
	__asm__ volatile(
 800465e:	f387 8811 	msr	BASEPRI, r7
 8004662:	f3bf 8f6f 	isb	sy
		}
	}
}
 8004666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800466e:	45ac      	cmp	ip, r5
 8004670:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8004674:	d0c7      	beq.n	8004606 <z_add_timeout+0x6e>
 8004676:	f8dc c000 	ldr.w	ip, [ip]
 800467a:	e7c1      	b.n	8004600 <z_add_timeout+0x68>
 800467c:	20000758 	.word	0x20000758
 8004680:	20000058 	.word	0x20000058

08004684 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8004684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8004688:	f04f 0310 	mov.w	r3, #16
 800468c:	f3ef 8c11 	mrs	ip, BASEPRI
 8004690:	f383 8812 	msr	BASEPRI_MAX, r3
 8004694:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8004698:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800474c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 800469c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004750 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
 80046a0:	4f2c      	ldr	r7, [pc, #176]	; (8004754 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
 80046a2:	f8c9 0000 	str.w	r0, [r9]
 80046a6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
 80046aa:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80046ac:	4550      	cmp	r0, sl
 80046ae:	bf08      	it	eq
 80046b0:	2000      	moveq	r0, #0
 80046b2:	2500      	movs	r5, #0
		curr_tick += dt;
 80046b4:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 80046b8:	f8d9 3000 	ldr.w	r3, [r9]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 80046bc:	46e0      	mov	r8, ip
 80046be:	b380      	cbz	r0, 8004722 <sys_clock_announce+0x9e>
 80046c0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 80046c4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 80046c8:	42b3      	cmp	r3, r6
 80046ca:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 80046ce:	da05      	bge.n	80046dc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 80046d0:	1af6      	subs	r6, r6, r3
 80046d2:	eb6c 040e 	sbc.w	r4, ip, lr
 80046d6:	e9c0 6404 	strd	r6, r4, [r0, #16]
 80046da:	e022      	b.n	8004722 <sys_clock_announce+0x9e>
		curr_tick += dt;
 80046dc:	18b2      	adds	r2, r6, r2
 80046de:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 80046e2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 80046e6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 80046ea:	f7ff ff39 	bl	8004560 <remove_timeout>
	__asm__ volatile(
 80046ee:	f388 8811 	msr	BASEPRI, r8
 80046f2:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80046f6:	6883      	ldr	r3, [r0, #8]
 80046f8:	4798      	blx	r3
	__asm__ volatile(
 80046fa:	f04f 0310 	mov.w	r3, #16
 80046fe:	f3ef 8811 	mrs	r8, BASEPRI
 8004702:	f383 8812 	msr	BASEPRI_MAX, r3
 8004706:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 800470a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 800470e:	f8da 0000 	ldr.w	r0, [sl]
 8004712:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004714:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 8004716:	46c4      	mov	ip, r8
 8004718:	f8c9 3000 	str.w	r3, [r9]
 800471c:	d1ca      	bne.n	80046b4 <sys_clock_announce+0x30>
		curr_tick += dt;
 800471e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
 8004722:	189a      	adds	r2, r3, r2
 8004724:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
 8004728:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 800472a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 800472e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 8004732:	f7ff fef5 	bl	8004520 <next_timeout>
 8004736:	4621      	mov	r1, r4
 8004738:	f7ff f890 	bl	800385c <sys_clock_set_timeout>
	__asm__ volatile(
 800473c:	f388 8811 	msr	BASEPRI, r8
 8004740:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8004744:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8004748:	f7ff bcda 	b.w	8004100 <z_time_slice>
 800474c:	20000058 	.word	0x20000058
 8004750:	20000930 	.word	0x20000930
 8004754:	20000758 	.word	0x20000758

08004758 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8004758:	b510      	push	{r4, lr}
	__asm__ volatile(
 800475a:	f04f 0310 	mov.w	r3, #16
 800475e:	f3ef 8411 	mrs	r4, BASEPRI
 8004762:	f383 8812 	msr	BASEPRI_MAX, r3
 8004766:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 800476a:	f7ff fecf 	bl	800450c <elapsed>
 800476e:	4a06      	ldr	r2, [pc, #24]	; (8004788 <sys_clock_tick_get+0x30>)
 8004770:	4603      	mov	r3, r0
 8004772:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004776:	1818      	adds	r0, r3, r0
 8004778:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 800477c:	f384 8811 	msr	BASEPRI, r4
 8004780:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8004784:	bd10      	pop	{r4, pc}
 8004786:	bf00      	nop
 8004788:	20000758 	.word	0x20000758

0800478c <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 800478c:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800478e:	4604      	mov	r4, r0
 8004790:	b178      	cbz	r0, 80047b2 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8004792:	f7ff f8f1 	bl	8003978 <sys_clock_cycle_get_32>
 8004796:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8004798:	4806      	ldr	r0, [pc, #24]	; (80047b4 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <z_impl_k_busy_wait+0x2c>)
 800479c:	fba4 0100 	umull	r0, r1, r4, r0
 80047a0:	2300      	movs	r3, #0
 80047a2:	f7fc f98f 	bl	8000ac4 <__aeabi_uldivmod>
 80047a6:	4604      	mov	r4, r0
 80047a8:	f7ff f8e6 	bl	8003978 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80047ac:	1b43      	subs	r3, r0, r5
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	d3fa      	bcc.n	80047a8 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	0501bd00 	.word	0x0501bd00
 80047b8:	000f4240 	.word	0x000f4240

080047bc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <boot_banner+0x8>)
 80047be:	f000 b80d 	b.w	80047dc <printk>
 80047c2:	bf00      	nop
 80047c4:	0800725d 	.word	0x0800725d

080047c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80047c8:	4770      	bx	lr

080047ca <sensor_sample_fetch>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 80047ca:	6883      	ldr	r3, [r0, #8]
 80047cc:	2139      	movs	r1, #57	; 0x39
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4718      	bx	r3

080047d2 <sensor_channel_get.isra.0>:
	return api->channel_get(dev, chan, val);
 80047d2:	6883      	ldr	r3, [r0, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	4718      	bx	r3

080047d8 <arch_printk_char_out>:
}
 80047d8:	2000      	movs	r0, #0
 80047da:	4770      	bx	lr

080047dc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 80047dc:	b40f      	push	{r0, r1, r2, r3}
 80047de:	b507      	push	{r0, r1, r2, lr}
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80047e6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 80047e8:	f7fc fe30 	bl	800144c <vprintk>

	va_end(ap);
}
 80047ec:	b003      	add	sp, #12
 80047ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80047f2:	b004      	add	sp, #16
 80047f4:	4770      	bx	lr

080047f6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80047f6:	4604      	mov	r4, r0
 80047f8:	b508      	push	{r3, lr}
 80047fa:	4608      	mov	r0, r1
 80047fc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80047fe:	461a      	mov	r2, r3
 8004800:	47a0      	blx	r4
	return z_impl_z_current_get();
 8004802:	f7ff fe03 	bl	800440c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8004806:	f7fd ff4d 	bl	80026a4 <z_impl_k_thread_abort>

0800480a <_ldiv5>:
	uint32_t v_lo = *v;
 800480a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 800480e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8004810:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8004814:	fba2 2403 	umull	r2, r4, r2, r3
 8004818:	18d5      	adds	r5, r2, r3
 800481a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 800481e:	fba1 1303 	umull	r1, r3, r1, r3
 8004822:	1852      	adds	r2, r2, r1
 8004824:	eb44 0403 	adc.w	r4, r4, r3
 8004828:	1952      	adds	r2, r2, r5
 800482a:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 800482e:	1889      	adds	r1, r1, r2
 8004830:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8004834:	e9c0 1300 	strd	r1, r3, [r0]
}
 8004838:	bd30      	pop	{r4, r5, pc}

0800483a <_get_digit>:
{
 800483a:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 800483c:	680a      	ldr	r2, [r1, #0]
 800483e:	2a00      	cmp	r2, #0
{
 8004840:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8004842:	dd0f      	ble.n	8004864 <_get_digit+0x2a>
		--*digit_count;
 8004844:	3a01      	subs	r2, #1
 8004846:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	6844      	ldr	r4, [r0, #4]
 800484c:	200a      	movs	r0, #10
 800484e:	fba2 1200 	umull	r1, r2, r2, r0
 8004852:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8004856:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 8004858:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800485c:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8004860:	3030      	adds	r0, #48	; 0x30
}
 8004862:	bd10      	pop	{r4, pc}
		rval = '0';
 8004864:	2030      	movs	r0, #48	; 0x30
 8004866:	e7fc      	b.n	8004862 <_get_digit+0x28>

08004868 <encode_uint>:
{
 8004868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 800486e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8004870:	2b6f      	cmp	r3, #111	; 0x6f
{
 8004872:	4680      	mov	r8, r0
 8004874:	460f      	mov	r7, r1
 8004876:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8004878:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 800487c:	d029      	beq.n	80048d2 <encode_uint+0x6a>
 800487e:	d824      	bhi.n	80048ca <encode_uint+0x62>
		return 10;
 8004880:	2b58      	cmp	r3, #88	; 0x58
 8004882:	bf0c      	ite	eq
 8004884:	2610      	moveq	r6, #16
 8004886:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8004888:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 800488c:	4632      	mov	r2, r6
 800488e:	2300      	movs	r3, #0
 8004890:	4640      	mov	r0, r8
 8004892:	4639      	mov	r1, r7
 8004894:	f7fc f916 	bl	8000ac4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004898:	2a09      	cmp	r2, #9
 800489a:	b2d4      	uxtb	r4, r2
 800489c:	d81e      	bhi.n	80048dc <encode_uint+0x74>
 800489e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80048a0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80048a2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80048a4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80048a8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80048ac:	d301      	bcc.n	80048b2 <encode_uint+0x4a>
 80048ae:	45d1      	cmp	r9, sl
 80048b0:	d811      	bhi.n	80048d6 <encode_uint+0x6e>
	if (conv->flag_hash) {
 80048b2:	782b      	ldrb	r3, [r5, #0]
 80048b4:	069b      	lsls	r3, r3, #26
 80048b6:	d505      	bpl.n	80048c4 <encode_uint+0x5c>
		if (radix == 8) {
 80048b8:	2e08      	cmp	r6, #8
 80048ba:	d115      	bne.n	80048e8 <encode_uint+0x80>
			conv->altform_0 = true;
 80048bc:	78ab      	ldrb	r3, [r5, #2]
 80048be:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80048c2:	70ab      	strb	r3, [r5, #2]
}
 80048c4:	4648      	mov	r0, r9
 80048c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80048ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 80048ce:	2b70      	cmp	r3, #112	; 0x70
 80048d0:	e7d7      	b.n	8004882 <encode_uint+0x1a>
	switch (specifier) {
 80048d2:	2608      	movs	r6, #8
 80048d4:	e7d8      	b.n	8004888 <encode_uint+0x20>
		value /= radix;
 80048d6:	4680      	mov	r8, r0
 80048d8:	460f      	mov	r7, r1
 80048da:	e7d7      	b.n	800488c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80048dc:	f1bb 0f19 	cmp.w	fp, #25
 80048e0:	bf94      	ite	ls
 80048e2:	3437      	addls	r4, #55	; 0x37
 80048e4:	3457      	addhi	r4, #87	; 0x57
 80048e6:	e7db      	b.n	80048a0 <encode_uint+0x38>
		} else if (radix == 16) {
 80048e8:	2e10      	cmp	r6, #16
 80048ea:	d1eb      	bne.n	80048c4 <encode_uint+0x5c>
			conv->altform_0c = true;
 80048ec:	78ab      	ldrb	r3, [r5, #2]
 80048ee:	f043 0310 	orr.w	r3, r3, #16
 80048f2:	e7e6      	b.n	80048c2 <encode_uint+0x5a>

080048f4 <outs>:
{
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	4607      	mov	r7, r0
 80048fa:	4688      	mov	r8, r1
 80048fc:	4615      	mov	r5, r2
 80048fe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8004900:	4614      	mov	r4, r2
 8004902:	42b4      	cmp	r4, r6
 8004904:	d305      	bcc.n	8004912 <outs+0x1e>
 8004906:	b10e      	cbz	r6, 800490c <outs+0x18>
	return (int)count;
 8004908:	1b60      	subs	r0, r4, r5
 800490a:	e008      	b.n	800491e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800490c:	7823      	ldrb	r3, [r4, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0fa      	beq.n	8004908 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8004912:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004916:	4641      	mov	r1, r8
 8004918:	47b8      	blx	r7
		if (rc < 0) {
 800491a:	2800      	cmp	r0, #0
 800491c:	daf1      	bge.n	8004902 <outs+0xe>
}
 800491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004922 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8004922:	4770      	bx	lr

08004924 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8004924:	2000      	movs	r0, #0
 8004926:	4770      	bx	lr

08004928 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8004928:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800492a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800492e:	46a4      	mov	ip, r4

  return ret;
}
 8004930:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004932:	4760      	bx	ip

08004934 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004934:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004936:	6804      	ldr	r4, [r0, #0]
 8004938:	6880      	ldr	r0, [r0, #8]
 800493a:	46a4      	mov	ip, r4

  return ret;
}
 800493c:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800493e:	4760      	bx	ip

08004940 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004940:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004942:	2301      	movs	r3, #1
{
 8004944:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004946:	aa01      	add	r2, sp, #4
 8004948:	2120      	movs	r1, #32
{
 800494a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800494c:	f7ff ffec 	bl	8004928 <hts221_read_reg>

  if (ret == 0)
 8004950:	b958      	cbnz	r0, 800496a <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
 8004952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004956:	f365 0301 	bfi	r3, r5, #0, #2
 800495a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800495e:	aa01      	add	r2, sp, #4
 8004960:	2301      	movs	r3, #1
 8004962:	2120      	movs	r1, #32
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ffe5 	bl	8004934 <hts221_write_reg>
  }

  return ret;
}
 800496a:	b003      	add	sp, #12
 800496c:	bd30      	pop	{r4, r5, pc}

0800496e <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800496e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004970:	2301      	movs	r3, #1
{
 8004972:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004974:	aa01      	add	r2, sp, #4
 8004976:	2120      	movs	r1, #32
{
 8004978:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800497a:	f7ff ffd5 	bl	8004928 <hts221_read_reg>

  if (ret == 0)
 800497e:	b958      	cbnz	r0, 8004998 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
 8004980:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004984:	f365 0382 	bfi	r3, r5, #2, #1
 8004988:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800498c:	aa01      	add	r2, sp, #4
 800498e:	2301      	movs	r3, #1
 8004990:	2120      	movs	r1, #32
 8004992:	4620      	mov	r0, r4
 8004994:	f7ff ffce 	bl	8004934 <hts221_write_reg>
  }

  return ret;
}
 8004998:	b003      	add	sp, #12
 800499a:	bd30      	pop	{r4, r5, pc}

0800499c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800499c:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800499e:	2301      	movs	r3, #1
 80049a0:	210f      	movs	r1, #15
 80049a2:	f7ff bfc1 	b.w	8004928 <hts221_read_reg>

080049a6 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80049a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80049a8:	2301      	movs	r3, #1
{
 80049aa:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80049ac:	aa01      	add	r2, sp, #4
 80049ae:	2120      	movs	r1, #32
{
 80049b0:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80049b2:	f7ff ffb9 	bl	8004928 <hts221_read_reg>

  if (ret == 0)
 80049b6:	b958      	cbnz	r0, 80049d0 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
 80049b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80049bc:	f365 13c7 	bfi	r3, r5, #7, #1
 80049c0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80049c4:	aa01      	add	r2, sp, #4
 80049c6:	2301      	movs	r3, #1
 80049c8:	2120      	movs	r1, #32
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7ff ffb2 	bl	8004934 <hts221_write_reg>
  }

  return ret;
}
 80049d0:	b003      	add	sp, #12
 80049d2:	bd30      	pop	{r4, r5, pc}

080049d4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80049d4:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049d6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80049da:	46a4      	mov	ip, r4

  return ret;
}
 80049dc:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049de:	4760      	bx	ip

080049e0 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80049e0:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049e2:	6804      	ldr	r4, [r0, #0]
 80049e4:	6880      	ldr	r0, [r0, #8]
 80049e6:	46a4      	mov	ip, r4

  return ret;
}
 80049e8:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049ea:	4760      	bx	ip

080049ec <lis2mdl_mag_user_offset_set>:
  * @param  buff  buffer that contains data to write
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_user_offset_set(stmdev_ctx_t *ctx, int16_t *val)
{
 80049ec:	b507      	push	{r0, r1, r2, lr}
  uint8_t buff[6];
  int32_t ret;

  buff[1] = (uint8_t)((uint16_t)val[0] / 256U);
  buff[0] = (uint8_t)((uint16_t)val[0] - (buff[1] * 256U));
 80049ee:	880b      	ldrh	r3, [r1, #0]
 80049f0:	f8ad 3000 	strh.w	r3, [sp]
  buff[3] = (uint8_t)((uint16_t)val[1] / 256U);
  buff[2] = (uint8_t)((uint16_t)val[1] - (buff[3] * 256U));
 80049f4:	884b      	ldrh	r3, [r1, #2]
 80049f6:	f8ad 3002 	strh.w	r3, [sp, #2]
  buff[5] = (uint8_t)((uint16_t)val[2] / 256U);
  buff[4] = (uint8_t)((uint16_t)val[2] - (buff[5] * 256U));
 80049fa:	888b      	ldrh	r3, [r1, #4]
 80049fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  ret = lis2mdl_write_reg(ctx, LIS2MDL_OFFSET_X_REG_L, buff, 6);
 8004a00:	466a      	mov	r2, sp
 8004a02:	2306      	movs	r3, #6
 8004a04:	2145      	movs	r1, #69	; 0x45
 8004a06:	f7ff ffeb 	bl	80049e0 <lis2mdl_write_reg>

  return ret;
}
 8004a0a:	b003      	add	sp, #12
 8004a0c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a10 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a12:	2301      	movs	r3, #1
{
 8004a14:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a16:	aa01      	add	r2, sp, #4
 8004a18:	2160      	movs	r1, #96	; 0x60
{
 8004a1a:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a1c:	f7ff ffda 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004a20:	b958      	cbnz	r0, 8004a3a <lis2mdl_operating_mode_set+0x2a>
  {
    reg.md = (uint8_t)val;
 8004a22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a26:	f365 0301 	bfi	r3, r5, #0, #2
 8004a2a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a2e:	aa01      	add	r2, sp, #4
 8004a30:	2301      	movs	r3, #1
 8004a32:	2160      	movs	r1, #96	; 0x60
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff ffd3 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004a3a:	b003      	add	sp, #12
 8004a3c:	bd30      	pop	{r4, r5, pc}

08004a3e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004a3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a40:	2301      	movs	r3, #1
{
 8004a42:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a44:	aa01      	add	r2, sp, #4
 8004a46:	2160      	movs	r1, #96	; 0x60
{
 8004a48:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a4a:	f7ff ffc3 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004a4e:	b958      	cbnz	r0, 8004a68 <lis2mdl_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
 8004a50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a54:	f365 0383 	bfi	r3, r5, #2, #2
 8004a58:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a5c:	aa01      	add	r2, sp, #4
 8004a5e:	2301      	movs	r3, #1
 8004a60:	2160      	movs	r1, #96	; 0x60
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7ff ffbc 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004a68:	b003      	add	sp, #12
 8004a6a:	bd30      	pop	{r4, r5, pc}

08004a6c <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a6e:	2301      	movs	r3, #1
{
 8004a70:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a72:	aa01      	add	r2, sp, #4
 8004a74:	2160      	movs	r1, #96	; 0x60
{
 8004a76:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a78:	f7ff ffac 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004a7c:	b958      	cbnz	r0, 8004a96 <lis2mdl_offset_temp_comp_set+0x2a>
  {
    reg.comp_temp_en = val;
 8004a7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a82:	f365 13c7 	bfi	r3, r5, #7, #1
 8004a86:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004a8a:	aa01      	add	r2, sp, #4
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	2160      	movs	r1, #96	; 0x60
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ffa5 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004a96:	b003      	add	sp, #12
 8004a98:	bd30      	pop	{r4, r5, pc}

08004a9a <lis2mdl_set_rst_mode_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(stmdev_ctx_t *ctx,
                                 lis2mdl_set_rst_t val)
{
 8004a9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004a9c:	2301      	movs	r3, #1
{
 8004a9e:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004aa0:	aa01      	add	r2, sp, #4
 8004aa2:	2161      	movs	r1, #97	; 0x61
{
 8004aa4:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004aa6:	f7ff ff95 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004aaa:	b958      	cbnz	r0, 8004ac4 <lis2mdl_set_rst_mode_set+0x2a>
  {
    reg.set_rst = (uint8_t)val;
 8004aac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ab0:	f365 0342 	bfi	r3, r5, #1, #2
 8004ab4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004ab8:	aa01      	add	r2, sp, #4
 8004aba:	2301      	movs	r3, #1
 8004abc:	2161      	movs	r1, #97	; 0x61
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff ff8e 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004ac4:	b003      	add	sp, #12
 8004ac6:	bd30      	pop	{r4, r5, pc}

08004ac8 <lis2mdl_set_rst_sensor_single_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_sensor_single_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004aca:	2301      	movs	r3, #1
{
 8004acc:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004ace:	aa01      	add	r2, sp, #4
 8004ad0:	2161      	movs	r1, #97	; 0x61
{
 8004ad2:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004ad4:	f7ff ff7e 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004ad8:	b958      	cbnz	r0, 8004af2 <lis2mdl_set_rst_sensor_single_set+0x2a>
  {
    reg.off_canc_one_shot = val;
 8004ada:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ade:	f365 1304 	bfi	r3, r5, #4, #1
 8004ae2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8004ae6:	aa01      	add	r2, sp, #4
 8004ae8:	2301      	movs	r3, #1
 8004aea:	2161      	movs	r1, #97	; 0x61
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7ff ff77 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004af2:	b003      	add	sp, #12
 8004af4:	bd30      	pop	{r4, r5, pc}

08004af6 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004af8:	2301      	movs	r3, #1
{
 8004afa:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004afc:	aa01      	add	r2, sp, #4
 8004afe:	2162      	movs	r1, #98	; 0x62
{
 8004b00:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004b02:	f7ff ff67 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004b06:	b958      	cbnz	r0, 8004b20 <lis2mdl_block_data_update_set+0x2a>
  {
    reg.bdu = val;
 8004b08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b0c:	f365 1304 	bfi	r3, r5, #4, #1
 8004b10:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004b14:	aa01      	add	r2, sp, #4
 8004b16:	2301      	movs	r3, #1
 8004b18:	2162      	movs	r1, #98	; 0x62
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff ff60 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004b20:	b003      	add	sp, #12
 8004b22:	bd30      	pop	{r4, r5, pc}

08004b24 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004b24:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004b26:	2306      	movs	r3, #6
{
 8004b28:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004b2a:	466a      	mov	r2, sp
 8004b2c:	2168      	movs	r1, #104	; 0x68
 8004b2e:	f7ff ff51 	bl	80049d4 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004b32:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004b36:	f89d 3000 	ldrb.w	r3, [sp]
 8004b3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004b3e:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004b40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004b44:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004b48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004b4c:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004b4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004b52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004b5a:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd10      	pop	{r4, pc}

08004b60 <lis2mdl_temperature_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_temperature_raw_get(stmdev_ctx_t *ctx,  int16_t *val)
{
 8004b60:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
 8004b62:	2302      	movs	r3, #2
{
 8004b64:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
 8004b66:	aa01      	add	r2, sp, #4
 8004b68:	216e      	movs	r1, #110	; 0x6e
 8004b6a:	f7ff ff33 	bl	80049d4 <lis2mdl_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
 8004b6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004b72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004b7a:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd10      	pop	{r4, pc}

08004b80 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004b80:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004b82:	2301      	movs	r3, #1
 8004b84:	214f      	movs	r1, #79	; 0x4f
 8004b86:	f7ff bf25 	b.w	80049d4 <lis2mdl_read_reg>

08004b8a <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b8c:	2301      	movs	r3, #1
{
 8004b8e:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b90:	aa01      	add	r2, sp, #4
 8004b92:	2160      	movs	r1, #96	; 0x60
{
 8004b94:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b96:	f7ff ff1d 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004b9a:	b958      	cbnz	r0, 8004bb4 <lis2mdl_reset_set+0x2a>
  {
    reg.soft_rst = val;
 8004b9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ba0:	f365 1345 	bfi	r3, r5, #5, #1
 8004ba4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004ba8:	aa01      	add	r2, sp, #4
 8004baa:	2301      	movs	r3, #1
 8004bac:	2160      	movs	r1, #96	; 0x60
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff ff16 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004bb4:	b003      	add	sp, #12
 8004bb6:	bd30      	pop	{r4, r5, pc}

08004bb8 <lis2mdl_boot_set>:
  * @param  val   change the values of reboot in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bba:	2301      	movs	r3, #1
{
 8004bbc:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bbe:	aa01      	add	r2, sp, #4
 8004bc0:	2160      	movs	r1, #96	; 0x60
{
 8004bc2:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bc4:	f7ff ff06 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004bc8:	b958      	cbnz	r0, 8004be2 <lis2mdl_boot_set+0x2a>
  {
    reg.reboot = val;
 8004bca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004bce:	f365 1386 	bfi	r3, r5, #6, #1
 8004bd2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bd6:	aa01      	add	r2, sp, #4
 8004bd8:	2301      	movs	r3, #1
 8004bda:	2160      	movs	r1, #96	; 0x60
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff feff 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004be2:	b003      	add	sp, #12
 8004be4:	bd30      	pop	{r4, r5, pc}

08004be6 <lis2mdl_drdy_on_pin_set>:
  * @param  val   change the values of drdy_on_pin in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004be8:	2301      	movs	r3, #1
{
 8004bea:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004bec:	aa01      	add	r2, sp, #4
 8004bee:	2162      	movs	r1, #98	; 0x62
{
 8004bf0:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004bf2:	f7ff feef 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004bf6:	b958      	cbnz	r0, 8004c10 <lis2mdl_drdy_on_pin_set+0x2a>
  {
    reg.drdy_on_pin = val;
 8004bf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004bfc:	f365 0300 	bfi	r3, r5, #0, #1
 8004c00:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c04:	aa01      	add	r2, sp, #4
 8004c06:	2301      	movs	r3, #1
 8004c08:	2162      	movs	r1, #98	; 0x62
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff fee8 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004c10:	b003      	add	sp, #12
 8004c12:	bd30      	pop	{r4, r5, pc}

08004c14 <lis2mdl_spi_mode_set>:
  * @param  val      change the values of 4wspi in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_spi_mode_set(stmdev_ctx_t *ctx, lis2mdl_sim_t val)
{
 8004c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c16:	2301      	movs	r3, #1
{
 8004c18:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c1a:	aa01      	add	r2, sp, #4
 8004c1c:	2162      	movs	r1, #98	; 0x62
{
 8004c1e:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c20:	f7ff fed8 	bl	80049d4 <lis2mdl_read_reg>

  if (ret == 0)
 8004c24:	b958      	cbnz	r0, 8004c3e <lis2mdl_spi_mode_set+0x2a>
  {
    reg._4wspi = (uint8_t)val;
 8004c26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c2a:	f365 0382 	bfi	r3, r5, #2, #1
 8004c2e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c32:	aa01      	add	r2, sp, #4
 8004c34:	2301      	movs	r3, #1
 8004c36:	2162      	movs	r1, #98	; 0x62
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7ff fed1 	bl	80049e0 <lis2mdl_write_reg>
  }

  return ret;
}
 8004c3e:	b003      	add	sp, #12
 8004c40:	bd30      	pop	{r4, r5, pc}

08004c42 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8004c42:	f001 baf4 	b.w	800622e <z_fatal_error>

08004c46 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8004c46:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8004c48:	6800      	ldr	r0, [r0, #0]
 8004c4a:	f001 baf0 	b.w	800622e <z_fatal_error>

08004c4e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7ff bff6 	b.w	8004c42 <z_arm_fatal_error>

08004c56 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8004c56:	b508      	push	{r3, lr}
	handler();
 8004c58:	f7fd facc 	bl	80021f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8004c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8004c60:	f7fd bba0 	b.w	80023a4 <z_arm_exc_exit>

08004c64 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8004c64:	4603      	mov	r3, r0
	size_t n = 0;
 8004c66:	2000      	movs	r0, #0

	while (*s != '\0') {
 8004c68:	5c1a      	ldrb	r2, [r3, r0]
 8004c6a:	b902      	cbnz	r2, 8004c6e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8004c6c:	4770      	bx	lr
		n++;
 8004c6e:	3001      	adds	r0, #1
 8004c70:	e7fa      	b.n	8004c68 <strlen+0x4>

08004c72 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8004c72:	4603      	mov	r3, r0
	size_t n = 0;
 8004c74:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8004c76:	5c1a      	ldrb	r2, [r3, r0]
 8004c78:	b10a      	cbz	r2, 8004c7e <strnlen+0xc>
 8004c7a:	4288      	cmp	r0, r1
 8004c7c:	d100      	bne.n	8004c80 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8004c7e:	4770      	bx	lr
		n++;
 8004c80:	3001      	adds	r0, #1
 8004c82:	e7f8      	b.n	8004c76 <strnlen+0x4>

08004c84 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8004c84:	1e43      	subs	r3, r0, #1
 8004c86:	3901      	subs	r1, #1
 8004c88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004c8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004c90:	4282      	cmp	r2, r0
 8004c92:	d101      	bne.n	8004c98 <strcmp+0x14>
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	d1f7      	bne.n	8004c88 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8004c98:	1a10      	subs	r0, r2, r0
 8004c9a:	4770      	bx	lr

08004c9c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	1e43      	subs	r3, r0, #1
 8004ca0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	d100      	bne.n	8004ca8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8004ca6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8004ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cac:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8004cb0:	e7f7      	b.n	8004ca2 <memcpy+0x6>

08004cb2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8004cb2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8004cb4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8004cb6:	4603      	mov	r3, r0
	while (n > 0) {
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8004cbc:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x6>

08004cc4 <_stdout_hook_default>:
}
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc8:	4770      	bx	lr

08004cca <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
 8004cca:	f7fd bdcf 	b.w	800286c <z_impl_zephyr_fputc>

08004cce <stm32_exti_init>:
{
 8004cce:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8004cd0:	2206      	movs	r2, #6
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fd fe0d 	bl	80028f4 <stm32_fill_irq_table>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4611      	mov	r1, r2
 8004cde:	2006      	movs	r0, #6
 8004ce0:	f7fd fa70 	bl	80021c4 <z_arm_irq_priority_set>
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	2207      	movs	r2, #7
 8004cea:	f7fd fe03 	bl	80028f4 <stm32_fill_irq_table>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2007      	movs	r0, #7
 8004cf4:	f7fd fa66 	bl	80021c4 <z_arm_irq_priority_set>
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	f7fd fdf9 	bl	80028f4 <stm32_fill_irq_table>
 8004d02:	2200      	movs	r2, #0
 8004d04:	4611      	mov	r1, r2
 8004d06:	2008      	movs	r0, #8
 8004d08:	f7fd fa5c 	bl	80021c4 <z_arm_irq_priority_set>
 8004d0c:	2209      	movs	r2, #9
 8004d0e:	2101      	movs	r1, #1
 8004d10:	2003      	movs	r0, #3
 8004d12:	f7fd fdef 	bl	80028f4 <stm32_fill_irq_table>
 8004d16:	2200      	movs	r2, #0
 8004d18:	4611      	mov	r1, r2
 8004d1a:	2009      	movs	r0, #9
 8004d1c:	f7fd fa52 	bl	80021c4 <z_arm_irq_priority_set>
 8004d20:	220a      	movs	r2, #10
 8004d22:	2101      	movs	r1, #1
 8004d24:	2004      	movs	r0, #4
 8004d26:	f7fd fde5 	bl	80028f4 <stm32_fill_irq_table>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	200a      	movs	r0, #10
 8004d30:	f7fd fa48 	bl	80021c4 <z_arm_irq_priority_set>
 8004d34:	2105      	movs	r1, #5
 8004d36:	4608      	mov	r0, r1
 8004d38:	2217      	movs	r2, #23
 8004d3a:	f7fd fddb 	bl	80028f4 <stm32_fill_irq_table>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	4611      	mov	r1, r2
 8004d42:	2017      	movs	r0, #23
 8004d44:	f7fd fa3e 	bl	80021c4 <z_arm_irq_priority_set>
 8004d48:	2228      	movs	r2, #40	; 0x28
 8004d4a:	2106      	movs	r1, #6
 8004d4c:	200a      	movs	r0, #10
 8004d4e:	f7fd fdd1 	bl	80028f4 <stm32_fill_irq_table>
 8004d52:	2200      	movs	r2, #0
 8004d54:	4611      	mov	r1, r2
 8004d56:	2028      	movs	r0, #40	; 0x28
 8004d58:	f7fd fa34 	bl	80021c4 <z_arm_irq_priority_set>
}
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	bd08      	pop	{r3, pc}

08004d60 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004d60:	680b      	ldr	r3, [r1, #0]
 8004d62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004d66:	2a78      	cmp	r2, #120	; 0x78
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8004d68:	bf9f      	itttt	ls
 8004d6a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004d6e:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 8004d72:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8004d74:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8004d76:	bf9d      	ittte	ls
 8004d78:	430a      	orrls	r2, r1
	return 0;
 8004d7a:	2000      	movls	r0, #0
 8004d7c:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8004d7e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8004d82:	4770      	bx	lr

08004d84 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004d84:	680b      	ldr	r3, [r1, #0]
 8004d86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004d8a:	2a78      	cmp	r2, #120	; 0x78
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8004d8c:	bf9f      	itttt	ls
 8004d8e:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 8004d96:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8004d98:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8004d9a:	bf9d      	ittte	ls
 8004d9c:	438a      	bicls	r2, r1
	return 0;
 8004d9e:	2000      	movls	r0, #0
 8004da0:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8004da2:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8004da6:	4770      	bx	lr

08004da8 <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8004da8:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d803      	bhi.n	8004db6 <stm32_clock_control_configure+0xe>
 8004dae:	b92b      	cbnz	r3, 8004dbc <stm32_clock_control_configure+0x14>
 8004db0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004db4:	4770      	bx	lr
	switch (src_clk) {
 8004db6:	3b05      	subs	r3, #5
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d8f9      	bhi.n	8004db0 <stm32_clock_control_configure+0x8>
	if (pclken->enr == NO_SEL) {
 8004dbc:	684a      	ldr	r2, [r1, #4]
 8004dbe:	2aff      	cmp	r2, #255	; 0xff
 8004dc0:	d00d      	beq.n	8004dde <stm32_clock_control_configure+0x36>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8004dc2:	b2d3      	uxtb	r3, r2
 8004dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dc8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8004dcc:	f3c2 4102 	ubfx	r1, r2, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8004dd6:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 8004dda:	4302      	orrs	r2, r0
 8004ddc:	601a      	str	r2, [r3, #0]
		return 0;
 8004dde:	2000      	movs	r0, #0
 8004de0:	4770      	bx	lr

08004de2 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004de2:	6843      	ldr	r3, [r0, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004de6:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8004de8:	600b      	str	r3, [r1, #0]
}
 8004dea:	2000      	movs	r0, #0
 8004dec:	4770      	bx	lr

08004dee <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004dee:	6843      	ldr	r3, [r0, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8004df2:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8004df4:	4042      	eors	r2, r0
 8004df6:	400a      	ands	r2, r1
 8004df8:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8004dfa:	615a      	str	r2, [r3, #20]
}
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4770      	bx	lr

08004e00 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004e00:	6843      	ldr	r3, [r0, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
}
 8004e04:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8004e06:	6199      	str	r1, [r3, #24]
}
 8004e08:	4770      	bx	lr

08004e0a <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004e0a:	6843      	ldr	r3, [r0, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004e0e:	0409      	lsls	r1, r1, #16
 8004e10:	6199      	str	r1, [r3, #24]
}
 8004e12:	2000      	movs	r0, #0
 8004e14:	4770      	bx	lr

08004e16 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004e16:	6843      	ldr	r3, [r0, #4]
 8004e18:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004e1a:	6953      	ldr	r3, [r2, #20]
 8004e1c:	404b      	eors	r3, r1
 8004e1e:	6153      	str	r3, [r2, #20]
}
 8004e20:	2000      	movs	r0, #0
 8004e22:	4770      	bx	lr

08004e24 <gpio_stm32_manage_callback>:
{
 8004e24:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8004e26:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8004e28:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8004e2a:	b1f8      	cbz	r0, 8004e6c <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004e2c:	4288      	cmp	r0, r1
 8004e2e:	d119      	bne.n	8004e64 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8004e30:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8004e32:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8004e34:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8004e36:	42a1      	cmp	r1, r4
 8004e38:	d100      	bne.n	8004e3c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004e3a:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8004e40:	b12a      	cbz	r2, 8004e4e <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8004e42:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8004e44:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8004e46:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8004e48:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8004e4a:	b902      	cbnz	r2, 8004e4e <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8004e4c:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8004e4e:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8004e50:	e010      	b.n	8004e74 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004e52:	4281      	cmp	r1, r0
 8004e54:	d106      	bne.n	8004e64 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8004e56:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8004e58:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004e5a:	68d8      	ldr	r0, [r3, #12]
 8004e5c:	4281      	cmp	r1, r0
 8004e5e:	d1ed      	bne.n	8004e3c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004e60:	60dc      	str	r4, [r3, #12]
}
 8004e62:	e7eb      	b.n	8004e3c <gpio_stm32_manage_callback+0x18>
	return node->next;
 8004e64:	4604      	mov	r4, r0
 8004e66:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1f2      	bne.n	8004e52 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	d1e8      	bne.n	8004e42 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8004e70:	f06f 0015 	mvn.w	r0, #21
}
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8004e76:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004e78:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8004e7a:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004e7c:	6867      	ldr	r7, [r4, #4]
 8004e7e:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8004e80:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8004e82:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8004e86:	ea27 0700 	bic.w	r7, r7, r0
 8004e8a:	408b      	lsls	r3, r1
 8004e8c:	433b      	orrs	r3, r7
 8004e8e:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8004e94:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004e98:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8004e9c:	f04f 0e03 	mov.w	lr, #3
 8004ea0:	007f      	lsls	r7, r7, #1
 8004ea2:	fa0e f707 	lsl.w	r7, lr, r7
 8004ea6:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8004eae:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8004eb2:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8004eb6:	007f      	lsls	r7, r7, #1
 8004eb8:	40bb      	lsls	r3, r7
 8004eba:	ea43 030c 	orr.w	r3, r3, ip
 8004ebe:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004ec4:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004ec8:	68e7      	ldr	r7, [r4, #12]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa0e f303 	lsl.w	r3, lr, r3
 8004ed0:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8004ee0:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8004ee2:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8004eea:	2d20      	cmp	r5, #32
 8004eec:	60e2      	str	r2, [r4, #12]
 8004eee:	d116      	bne.n	8004f1e <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8004ef0:	2907      	cmp	r1, #7
 8004ef2:	dc2b      	bgt.n	8004f4c <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004ef8:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8004efa:	b32b      	cbz	r3, 8004f48 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8004efc:	fab3 f383 	clz	r3, r3
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	210f      	movs	r1, #15
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004f10:	fab3 f383 	clz	r3, r3
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	fa06 f303 	lsl.w	r3, r6, r3
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004f22:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004f26:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	fa90 f0a0 	rbit	r0, r0
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8004f30:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8004f34:	092d      	lsrs	r5, r5, #4
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	0040      	lsls	r0, r0, #1
 8004f3c:	ea22 0303 	bic.w	r3, r2, r3
 8004f40:	4085      	lsls	r5, r0
 8004f42:	431d      	orrs	r5, r3
 8004f44:	6025      	str	r5, [r4, #0]
}
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8004f48:	462b      	mov	r3, r5
 8004f4a:	e7d9      	b.n	8004f00 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004f4c:	0a03      	lsrs	r3, r0, #8
 8004f4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8004f54:	b182      	cbz	r2, 8004f78 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8004f56:	fab2 f282 	clz	r2, r2
 8004f5a:	0092      	lsls	r2, r2, #2
 8004f5c:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	fa07 f202 	lsl.w	r2, r7, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	ea21 0202 	bic.w	r2, r1, r2
 8004f70:	409e      	lsls	r6, r3
 8004f72:	4316      	orrs	r6, r2
 8004f74:	6266      	str	r6, [r4, #36]	; 0x24
}
 8004f76:	e7d2      	b.n	8004f1e <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8004f78:	462a      	mov	r2, r5
 8004f7a:	e7ee      	b.n	8004f5a <gpio_stm32_configure_raw.isra.0+0xe4>

08004f7c <gpio_stm32_config>:
{
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8004f80:	0390      	lsls	r0, r2, #14
{
 8004f82:	460d      	mov	r5, r1
 8004f84:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8004f86:	d517      	bpl.n	8004fb8 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004f88:	0791      	lsls	r1, r2, #30
 8004f8a:	d50e      	bpl.n	8004faa <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8004f8c:	075a      	lsls	r2, r3, #29
 8004f8e:	d52e      	bpl.n	8004fee <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8004f90:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8004f92:	06d8      	lsls	r0, r3, #27
 8004f94:	d50b      	bpl.n	8004fae <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004f9a:	0319      	lsls	r1, r3, #12
 8004f9c:	d51a      	bpl.n	8004fd4 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004f9e:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004fa0:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004fa2:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004fa4:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8004fa6:	618b      	str	r3, [r1, #24]
	return 0;
 8004fa8:	e00d      	b.n	8004fc6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8004faa:	2210      	movs	r2, #16
 8004fac:	e7f1      	b.n	8004f92 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004fae:	0699      	lsls	r1, r3, #26
 8004fb0:	d5f3      	bpl.n	8004f9a <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8004fb6:	e7f0      	b.n	8004f9a <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004fb8:	03da      	lsls	r2, r3, #15
 8004fba:	d513      	bpl.n	8004fe4 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004fbc:	06d8      	lsls	r0, r3, #27
 8004fbe:	d413      	bmi.n	8004fe8 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004fc0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fc4:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8004fc6:	6860      	ldr	r0, [r4, #4]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	f7ff ff53 	bl	8004e76 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8004fd0:	2000      	movs	r0, #0
}
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8004fd4:	035b      	lsls	r3, r3, #13
 8004fd6:	d5f6      	bpl.n	8004fc6 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004fd8:	2101      	movs	r1, #1
 8004fda:	40a9      	lsls	r1, r5
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff ff14 	bl	8004e0a <gpio_stm32_port_clear_bits_raw>
 8004fe2:	e7f0      	b.n	8004fc6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8004fe4:	2230      	movs	r2, #48	; 0x30
 8004fe6:	e7ee      	b.n	8004fc6 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fec:	e7eb      	b.n	8004fc6 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 8004fee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004ff2:	e7ee      	b.n	8004fd2 <gpio_stm32_config+0x56>

08004ff4 <gpio_stm32_isr>:
{
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004ffa:	b121      	cbz	r1, 8005006 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8004ffc:	2501      	movs	r5, #1
 8004ffe:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8005000:	680c      	ldr	r4, [r1, #0]
 8005002:	4085      	lsls	r5, r0
 8005004:	b901      	cbnz	r1, 8005008 <gpio_stm32_isr+0x14>
}
 8005006:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8005008:	688a      	ldr	r2, [r1, #8]
 800500a:	402a      	ands	r2, r5
 800500c:	d002      	beq.n	8005014 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800500e:	684b      	ldr	r3, [r1, #4]
 8005010:	4630      	mov	r0, r6
 8005012:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005014:	b11c      	cbz	r4, 800501e <gpio_stm32_isr+0x2a>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	4621      	mov	r1, r4
 800501a:	461c      	mov	r4, r3
 800501c:	e7f2      	b.n	8005004 <gpio_stm32_isr+0x10>
 800501e:	4623      	mov	r3, r4
 8005020:	e7fa      	b.n	8005018 <gpio_stm32_isr+0x24>

08005022 <gpio_stm32_configure>:
{
 8005022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005024:	461f      	mov	r7, r3
 8005026:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8005028:	6840      	ldr	r0, [r0, #4]
{
 800502a:	460e      	mov	r6, r1
 800502c:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800502e:	f7ff ff22 	bl	8004e76 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8005032:	2f11      	cmp	r7, #17
 8005034:	d107      	bne.n	8005046 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8005036:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8005038:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800503a:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 800503e:	d504      	bpl.n	800504a <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8005044:	6199      	str	r1, [r3, #24]
}
 8005046:	2000      	movs	r0, #0
 8005048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800504a:	4620      	mov	r0, r4
 800504c:	f7ff fedd 	bl	8004e0a <gpio_stm32_port_clear_bits_raw>
 8005050:	e7f9      	b.n	8005046 <gpio_stm32_configure+0x24>

08005052 <handle_txe>:
{
 8005052:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = dev->data;
 8005054:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8005056:	685b      	ldr	r3, [r3, #4]
	if (data->current.len) {
 8005058:	6c42      	ldr	r2, [r0, #68]	; 0x44
	I2C_TypeDef *i2c = cfg->i2c;
 800505a:	68db      	ldr	r3, [r3, #12]
	if (data->current.len) {
 800505c:	b18a      	cbz	r2, 8005082 <handle_txe+0x30>
		data->current.len--;
 800505e:	3a01      	subs	r2, #1
 8005060:	6442      	str	r2, [r0, #68]	; 0x44
		if (data->current.len == 0U) {
 8005062:	b91a      	cbnz	r2, 800506c <handle_txe+0x1a>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_BUF(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506a:	605a      	str	r2, [r3, #4]
		LL_I2C_TransmitData8(i2c, *data->current.buf);
 800506c:	6c82      	ldr	r2, [r0, #72]	; 0x48
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800506e:	6919      	ldr	r1, [r3, #16]
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005076:	430a      	orrs	r2, r1
 8005078:	611a      	str	r2, [r3, #16]
		data->current.buf++;
 800507a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800507c:	3301      	adds	r3, #1
 800507e:	6483      	str	r3, [r0, #72]	; 0x48
}
 8005080:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 8005082:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005084:	0791      	lsls	r1, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8005086:	bf42      	ittt	mi
 8005088:	681a      	ldrmi	r2, [r3, #0]
 800508a:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800508e:	601a      	strmi	r2, [r3, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8005090:	695a      	ldr	r2, [r3, #20]
		if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 8005092:	0752      	lsls	r2, r2, #29
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8005094:	bf48      	it	mi
 8005096:	691b      	ldrmi	r3, [r3, #16]
	z_impl_k_sem_give(sem);
 8005098:	f7fe be96 	b.w	8003dc8 <z_impl_k_sem_give>

0800509c <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800509c:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a4:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b4:	605a      	str	r2, [r3, #4]
}
 80050b6:	4770      	bx	lr

080050b8 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 80050b8:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80050c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80050c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050e0:	605a      	str	r2, [r3, #4]
}
 80050e2:	4770      	bx	lr

080050e4 <stm32_i2c_reset>:
{
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 80050e6:	6843      	ldr	r3, [r0, #4]
 80050e8:	68d9      	ldr	r1, [r3, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80050ea:	680b      	ldr	r3, [r1, #0]
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	600b      	str	r3, [r1, #0]
	stm32_i2c_disable_transfer_interrupts(dev);
 80050f2:	6840      	ldr	r0, [r0, #4]
 80050f4:	f7ff ffe0 	bl	80050b8 <stm32_i2c_disable_transfer_interrupts.isra.0>
	cr1 = LL_I2C_ReadReg(i2c, CR1);
 80050f8:	680f      	ldr	r7, [r1, #0]
	cr2 = LL_I2C_ReadReg(i2c, CR2);
 80050fa:	684e      	ldr	r6, [r1, #4]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 80050fc:	688b      	ldr	r3, [r1, #8]
	oar2 = LL_I2C_ReadReg(i2c, OAR2);
 80050fe:	68cd      	ldr	r5, [r1, #12]
	ccr = LL_I2C_ReadReg(i2c, CCR);
 8005100:	69cc      	ldr	r4, [r1, #28]
	trise = LL_I2C_ReadReg(i2c, TRISE);
 8005102:	6a08      	ldr	r0, [r1, #32]
	fltr = LL_I2C_ReadReg(i2c, FLTR);
 8005104:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  SET_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 8005106:	f8d1 c000 	ldr.w	ip, [r1]
 800510a:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 800510e:	f8c1 c000 	str.w	ip, [r1]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_SWRST);
 8005112:	f8d1 c000 	ldr.w	ip, [r1]
	oar1 = LL_I2C_ReadReg(i2c, OAR1);
 8005116:	b29b      	uxth	r3, r3
 8005118:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800511c:	b2bf      	uxth	r7, r7
 800511e:	b2b6      	uxth	r6, r6
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 8005120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005124:	b2ad      	uxth	r5, r5
 8005126:	b2a4      	uxth	r4, r4
 8005128:	b280      	uxth	r0, r0
 800512a:	b292      	uxth	r2, r2
 800512c:	f8c1 c000 	str.w	ip, [r1]
	LL_I2C_WriteReg(i2c, CR1, cr1);
 8005130:	600f      	str	r7, [r1, #0]
	LL_I2C_WriteReg(i2c, CR2, cr2);
 8005132:	604e      	str	r6, [r1, #4]
	LL_I2C_WriteReg(i2c, OAR1, oar1);
 8005134:	608b      	str	r3, [r1, #8]
	LL_I2C_WriteReg(i2c, OAR2, oar2);
 8005136:	60cd      	str	r5, [r1, #12]
	LL_I2C_WriteReg(i2c, CCR, ccr);
 8005138:	61cc      	str	r4, [r1, #28]
	LL_I2C_WriteReg(i2c, TRISE, trise);
 800513a:	6208      	str	r0, [r1, #32]
	LL_I2C_WriteReg(i2c, FLTR, fltr);
 800513c:	624a      	str	r2, [r1, #36]	; 0x24
}
 800513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005140 <msg_init.constprop.0>:
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	461f      	mov	r7, r3
	I2C_TypeDef *i2c = cfg->i2c;
 8005146:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8005148:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800514a:	68dd      	ldr	r5, [r3, #12]
static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
 800514c:	460e      	mov	r6, r1
 800514e:	4690      	mov	r8, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
 8005150:	4620      	mov	r0, r4
 8005152:	f7fe fe81 	bl	8003e58 <z_impl_k_sem_reset>
	data->current.len = msg->len;
 8005156:	6873      	ldr	r3, [r6, #4]
 8005158:	6463      	str	r3, [r4, #68]	; 0x44
	data->current.buf = msg->buf;
 800515a:	6833      	ldr	r3, [r6, #0]
 800515c:	64a3      	str	r3, [r4, #72]	; 0x48
	data->current.flags = msg->flags;
 800515e:	7a33      	ldrb	r3, [r6, #8]
 8005160:	62e3      	str	r3, [r4, #44]	; 0x2c
	data->current.is_write = (transfer == I2C_REQUEST_WRITE);
 8005162:	f087 0701 	eor.w	r7, r7, #1
	data->current.is_restart = 0U;
 8005166:	2300      	movs	r3, #0
	data->current.is_arlo = 0U;
 8005168:	e9c4 730c 	strd	r7, r3, [r4, #48]	; 0x30
	data->current.is_nack = 0U;
 800516c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	data->current.is_restart = 0U;
 8005170:	62a3      	str	r3, [r4, #40]	; 0x28
	data->current.msg = msg;
 8005172:	6426      	str	r6, [r4, #64]	; 0x40
	data->slave_address = slave;
 8005174:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005186:	602b      	str	r3, [r5, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800518e:	602b      	str	r3, [r5, #0]
	if (msg->flags & I2C_MSG_RESTART) {
 8005190:	7a33      	ldrb	r3, [r6, #8]
 8005192:	0759      	lsls	r1, r3, #29
 8005194:	d50b      	bpl.n	80051ae <msg_init.constprop.0+0x6e>
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 8005196:	682b      	ldr	r3, [r5, #0]
	if (cr1 & I2C_CR1_STOP) {
 8005198:	059a      	lsls	r2, r3, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 800519a:	bf41      	itttt	mi
 800519c:	f423 7300 	bicmi.w	r3, r3, #512	; 0x200
 80051a0:	041b      	lslmi	r3, r3, #16
 80051a2:	0c1b      	lsrmi	r3, r3, #16
 80051a4:	602b      	strmi	r3, [r5, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	602b      	str	r3, [r5, #0]
}
 80051ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051b2 <msg_end.constprop.0>:
static int32_t msg_end(const struct device *dev, uint8_t *next_msg_flags,
 80051b2:	b538      	push	{r3, r4, r5, lr}
	struct i2c_stm32_data *data = dev->data;
 80051b4:	6903      	ldr	r3, [r0, #16]
	if (data->current.is_nack || data->current.is_err ||
 80051b6:	e9d3 450d 	ldrd	r4, r5, [r3, #52]	; 0x34
	if (data->current.is_err) {
 80051ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	if (data->current.is_nack || data->current.is_err ||
 80051bc:	b125      	cbz	r5, 80051c8 <msg_end.constprop.0+0x16>
	if (data->current.is_arlo) {
 80051be:	2100      	movs	r1, #0
 80051c0:	bb04      	cbnz	r4, 8005204 <msg_end.constprop.0+0x52>
		data->current.is_nack = 0U;
 80051c2:	6399      	str	r1, [r3, #56]	; 0x38
	if (data->current.is_err) {
 80051c4:	b11a      	cbz	r2, 80051ce <msg_end.constprop.0+0x1c>
 80051c6:	e00f      	b.n	80051e8 <msg_end.constprop.0+0x36>
	if (data->current.is_nack || data->current.is_err ||
 80051c8:	b962      	cbnz	r2, 80051e4 <msg_end.constprop.0+0x32>
 80051ca:	b184      	cbz	r4, 80051ee <msg_end.constprop.0+0x3c>
		data->current.is_arlo = 0U;
 80051cc:	635a      	str	r2, [r3, #52]	; 0x34
	stm32_i2c_master_finish(dev);
 80051ce:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 80051d0:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 80051d2:	f7ff ff71 	bl	80050b8 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80051d6:	680b      	ldr	r3, [r1, #0]
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	600b      	str	r3, [r1, #0]
	return -EIO;
 80051de:	f06f 0004 	mvn.w	r0, #4
}
 80051e2:	e00e      	b.n	8005202 <msg_end.constprop.0+0x50>
	if (data->current.is_arlo) {
 80051e4:	b104      	cbz	r4, 80051e8 <msg_end.constprop.0+0x36>
		data->current.is_arlo = 0U;
 80051e6:	635d      	str	r5, [r3, #52]	; 0x34
		data->current.is_err = 0U;
 80051e8:	2200      	movs	r2, #0
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80051ec:	e7ef      	b.n	80051ce <msg_end.constprop.0+0x1c>
	if (!next_msg_flags) {
 80051ee:	b939      	cbnz	r1, 8005200 <msg_end.constprop.0+0x4e>
		stm32_i2c_master_finish(dev);
 80051f0:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 80051f2:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 80051f4:	f7ff ff60 	bl	80050b8 <stm32_i2c_disable_transfer_interrupts.isra.0>
 80051f8:	680b      	ldr	r3, [r1, #0]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	600b      	str	r3, [r1, #0]
	return 0;
 8005200:	2000      	movs	r0, #0
}
 8005202:	bd38      	pop	{r3, r4, r5, pc}
		data->current.is_arlo = 0U;
 8005204:	6359      	str	r1, [r3, #52]	; 0x34
	if (data->current.is_nack) {
 8005206:	e7dc      	b.n	80051c2 <msg_end.constprop.0+0x10>

08005208 <handle_rxne>:
{
 8005208:	4603      	mov	r3, r0
	struct i2c_stm32_data *data = dev->data;
 800520a:	6900      	ldr	r0, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800520c:	685b      	ldr	r3, [r3, #4]
	if (data->current.len > 0) {
 800520e:	6c42      	ldr	r2, [r0, #68]	; 0x44
	I2C_TypeDef *i2c = cfg->i2c;
 8005210:	68db      	ldr	r3, [r3, #12]
	if (data->current.len > 0) {
 8005212:	2a00      	cmp	r2, #0
 8005214:	d039      	beq.n	800528a <handle_rxne+0x82>
		switch (data->current.len) {
 8005216:	2a02      	cmp	r2, #2
 8005218:	d021      	beq.n	800525e <handle_rxne+0x56>
 800521a:	2a03      	cmp	r2, #3
 800521c:	d027      	beq.n	800526e <handle_rxne+0x66>
 800521e:	2a01      	cmp	r2, #1
 8005220:	d12a      	bne.n	8005278 <handle_rxne+0x70>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005230:	601a      	str	r2, [r3, #0]
			if (data->current.flags & I2C_MSG_STOP) {
 8005232:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005234:	0791      	lsls	r1, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8005236:	bf42      	ittt	mi
 8005238:	681a      	ldrmi	r2, [r3, #0]
 800523a:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800523e:	601a      	strmi	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005246:	605a      	str	r2, [r3, #4]
			data->current.len--;
 8005248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800524a:	3a01      	subs	r2, #1
 800524c:	6442      	str	r2, [r0, #68]	; 0x44
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800524e:	6c82      	ldr	r2, [r0, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	7013      	strb	r3, [r2, #0]
			data->current.buf++;
 8005254:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005256:	3301      	adds	r3, #1
 8005258:	6483      	str	r3, [r0, #72]	; 0x48
	z_impl_k_sem_give(sem);
 800525a:	f7fe bdb5 	b.w	8003dc8 <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005264:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005274:	605a      	str	r2, [r3, #4]
}
 8005276:	4770      	bx	lr
			data->current.len--;
 8005278:	3a01      	subs	r2, #1
 800527a:	6442      	str	r2, [r0, #68]	; 0x44
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800527c:	6c82      	ldr	r2, [r0, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	7013      	strb	r3, [r2, #0]
			data->current.buf++;
 8005282:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005284:	3301      	adds	r3, #1
 8005286:	6483      	str	r3, [r0, #72]	; 0x48
}
 8005288:	4770      	bx	lr
		if (data->current.flags & I2C_MSG_STOP) {
 800528a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800528c:	0792      	lsls	r2, r2, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800528e:	bf42      	ittt	mi
 8005290:	681a      	ldrmi	r2, [r3, #0]
 8005292:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 8005296:	601a      	strmi	r2, [r3, #0]
}
 8005298:	e7df      	b.n	800525a <handle_rxne+0x52>

0800529a <stm32_i2c_event_isr>:
{
 800529a:	b410      	push	{r4}
	I2C_TypeDef *i2c = cfg->i2c;
 800529c:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800529e:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80052a0:	68db      	ldr	r3, [r3, #12]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80052a2:	695c      	ldr	r4, [r3, #20]
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 80052a4:	07e4      	lsls	r4, r4, #31
{
 80052a6:	b085      	sub	sp, #20
 80052a8:	4601      	mov	r1, r0
	if (LL_I2C_IsActiveFlag_SB(i2c)) {
 80052aa:	d530      	bpl.n	800530e <stm32_i2c_event_isr+0x74>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 80052ac:	6a10      	ldr	r0, [r2, #32]
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 80052ae:	8c91      	ldrh	r1, [r2, #36]	; 0x24
	if (I2C_ADDR_10_BITS & data->dev_config) {
 80052b0:	f010 0001 	ands.w	r0, r0, #1
 80052b4:	d013      	beq.n	80052de <stm32_i2c_event_isr+0x44>
		if (data->current.is_restart == 0U) {
 80052b6:	6a94      	ldr	r4, [r2, #40]	; 0x28
		slave = (((saddr & 0x0300) >> 7) & 0xFF);
 80052b8:	11c9      	asrs	r1, r1, #7
 80052ba:	f001 0106 	and.w	r1, r1, #6
		if (data->current.is_restart == 0U) {
 80052be:	b954      	cbnz	r4, 80052d6 <stm32_i2c_event_isr+0x3c>
		uint8_t header = slave | HEADER;
 80052c0:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
 80052c4:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052cc:	430a      	orrs	r2, r1
 80052ce:	611a      	str	r2, [r3, #16]
}
 80052d0:	b005      	add	sp, #20
 80052d2:	bc10      	pop	{r4}
 80052d4:	4770      	bx	lr
			header |= I2C_REQUEST_READ;
 80052d6:	f041 01f1 	orr.w	r1, r1, #241	; 0xf1
			data->current.is_restart = 0U;
 80052da:	2000      	movs	r0, #0
 80052dc:	e7f2      	b.n	80052c4 <stm32_i2c_event_isr+0x2a>
	if (data->current.is_write) {
 80052de:	6b10      	ldr	r0, [r2, #48]	; 0x30
	slave = (saddr << 1) & 0xFF;
 80052e0:	0049      	lsls	r1, r1, #1
	if (data->current.is_write) {
 80052e2:	b120      	cbz	r0, 80052ee <stm32_i2c_event_isr+0x54>
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	b2c9      	uxtb	r1, r1
 80052e8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052ec:	e7ee      	b.n	80052cc <stm32_i2c_event_isr+0x32>
 80052ee:	6918      	ldr	r0, [r3, #16]
		LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
 80052f0:	f041 0101 	orr.w	r1, r1, #1
 80052f4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80052f8:	b2c9      	uxtb	r1, r1
 80052fa:	4301      	orrs	r1, r0
 80052fc:	6119      	str	r1, [r3, #16]
		if (data->current.len == 2) {
 80052fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005300:	2a02      	cmp	r2, #2
 8005302:	d1e5      	bne.n	80052d0 <stm32_i2c_event_isr+0x36>
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800530a:	601a      	str	r2, [r3, #0]
}
 800530c:	e7e0      	b.n	80052d0 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 800530e:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADD10(i2c)) {
 8005310:	0724      	lsls	r4, r4, #28
 8005312:	d505      	bpl.n	8005320 <stm32_i2c_event_isr+0x86>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8005314:	6919      	ldr	r1, [r3, #16]
 8005316:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800531a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800531e:	e7d5      	b.n	80052cc <stm32_i2c_event_isr+0x32>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8005320:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8005322:	07a4      	lsls	r4, r4, #30
 8005324:	d539      	bpl.n	800539a <stm32_i2c_event_isr+0x100>
	if (I2C_ADDR_10_BITS & data->dev_config) {
 8005326:	6a10      	ldr	r0, [r2, #32]
	if (data->current.is_write) {
 8005328:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (I2C_ADDR_10_BITS & data->dev_config) {
 800532a:	07c0      	lsls	r0, r0, #31
 800532c:	d515      	bpl.n	800535a <stm32_i2c_event_isr+0xc0>
		if (!data->current.is_write && data->current.is_restart) {
 800532e:	b9a9      	cbnz	r1, 800535c <stm32_i2c_event_isr+0xc2>
 8005330:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005332:	b1d0      	cbz	r0, 800536a <stm32_i2c_event_isr+0xd0>
			data->current.is_restart = 0U;
 8005334:	6291      	str	r1, [r2, #40]	; 0x28
  tmpreg = I2Cx->SR1;
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800533a:	9a01      	ldr	r2, [sp, #4]
  tmpreg = I2Cx->SR2;
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8005340:	9a01      	ldr	r2, [sp, #4]
	uint16_t cr1 = LL_I2C_ReadReg(i2c, CR1);
 8005342:	681a      	ldr	r2, [r3, #0]
	if (cr1 & I2C_CR1_STOP) {
 8005344:	0591      	lsls	r1, r2, #22
		LL_I2C_WriteReg(i2c, CR1, cr1 & ~I2C_CR1_STOP);
 8005346:	bf41      	itttt	mi
 8005348:	f422 7200 	bicmi.w	r2, r2, #512	; 0x200
 800534c:	0412      	lslmi	r2, r2, #16
 800534e:	0c12      	lsrmi	r2, r2, #16
 8005350:	601a      	strmi	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005358:	e7d7      	b.n	800530a <stm32_i2c_event_isr+0x70>
	if (data->current.is_write) {
 800535a:	b131      	cbz	r1, 800536a <stm32_i2c_event_isr+0xd0>
  tmpreg = I2Cx->SR1;
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8005360:	9a02      	ldr	r2, [sp, #8]
  tmpreg = I2Cx->SR2;
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 8005366:	9b02      	ldr	r3, [sp, #8]
}
 8005368:	e7b2      	b.n	80052d0 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 1U) {
 800536a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800536c:	2a01      	cmp	r2, #1
 800536e:	d10a      	bne.n	8005386 <stm32_i2c_event_isr+0xec>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005376:	601a      	str	r2, [r3, #0]
  tmpreg = I2Cx->SR1;
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800537c:	9a03      	ldr	r2, [sp, #12]
  tmpreg = I2Cx->SR2;
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8005382:	9b03      	ldr	r3, [sp, #12]
}
 8005384:	e7a4      	b.n	80052d0 <stm32_i2c_event_isr+0x36>
	} else if (data->current.len == 2U) {
 8005386:	2a02      	cmp	r2, #2
 8005388:	d1f6      	bne.n	8005378 <stm32_i2c_event_isr+0xde>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005390:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005398:	e7ed      	b.n	8005376 <stm32_i2c_event_isr+0xdc>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800539a:	695c      	ldr	r4, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_BTF(i2c)) {
 800539c:	0764      	lsls	r4, r4, #29
 800539e:	d53a      	bpl.n	8005416 <stm32_i2c_event_isr+0x17c>
	if (data->current.is_write) {
 80053a0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80053a2:	b124      	cbz	r4, 80053ae <stm32_i2c_event_isr+0x114>
		handle_txe(dev);
 80053a4:	4608      	mov	r0, r1
}
 80053a6:	b005      	add	sp, #20
 80053a8:	bc10      	pop	{r4}
		handle_txe(dev);
 80053aa:	f7ff be52 	b.w	8005052 <handle_txe>
		switch (data->current.len) {
 80053ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80053b0:	2902      	cmp	r1, #2
 80053b2:	d005      	beq.n	80053c0 <stm32_i2c_event_isr+0x126>
 80053b4:	2903      	cmp	r1, #3
 80053b6:	d020      	beq.n	80053fa <stm32_i2c_event_isr+0x160>
}
 80053b8:	b005      	add	sp, #20
 80053ba:	bc10      	pop	{r4}
		handle_rxne(dev);
 80053bc:	f7ff bf24 	b.w	8005208 <handle_rxne>
			if (data->current.flags & I2C_MSG_STOP) {
 80053c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053c2:	078c      	lsls	r4, r1, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80053c4:	bf42      	ittt	mi
 80053c6:	6819      	ldrmi	r1, [r3, #0]
 80053c8:	f441 7100 	orrmi.w	r1, r1, #512	; 0x200
 80053cc:	6019      	strmi	r1, [r3, #0]
				data->current.len--;
 80053ce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80053d0:	3901      	subs	r1, #1
 80053d2:	6451      	str	r1, [r2, #68]	; 0x44
				*data->current.buf = LL_I2C_ReceiveData8(i2c);
 80053d4:	6c91      	ldr	r1, [r2, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80053d6:	6918      	ldr	r0, [r3, #16]
 80053d8:	7008      	strb	r0, [r1, #0]
				data->current.buf++;
 80053da:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80053dc:	1c41      	adds	r1, r0, #1
 80053de:	6491      	str	r1, [r2, #72]	; 0x48
				data->current.len--;
 80053e0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80053e2:	3901      	subs	r1, #1
 80053e4:	6451      	str	r1, [r2, #68]	; 0x44
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	7043      	strb	r3, [r0, #1]
				data->current.buf++;
 80053ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80053ec:	3301      	adds	r3, #1
 80053ee:	6493      	str	r3, [r2, #72]	; 0x48
 80053f0:	4610      	mov	r0, r2
}
 80053f2:	b005      	add	sp, #20
 80053f4:	bc10      	pop	{r4}
 80053f6:	f7fe bce7 	b.w	8003dc8 <z_impl_k_sem_give>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80053fa:	6819      	ldr	r1, [r3, #0]
 80053fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005400:	6019      	str	r1, [r3, #0]
			data->current.len--;
 8005402:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005404:	3901      	subs	r1, #1
 8005406:	6451      	str	r1, [r2, #68]	; 0x44
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 8005408:	6c91      	ldr	r1, [r2, #72]	; 0x48
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	700b      	strb	r3, [r1, #0]
			data->current.buf++;
 800540e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005410:	3301      	adds	r3, #1
 8005412:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8005414:	e75c      	b.n	80052d0 <stm32_i2c_event_isr+0x36>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8005416:	6958      	ldr	r0, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_TXE(i2c) && data->current.is_write) {
 8005418:	0600      	lsls	r0, r0, #24
 800541a:	d502      	bpl.n	8005422 <stm32_i2c_event_isr+0x188>
 800541c:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800541e:	2800      	cmp	r0, #0
 8005420:	d1c0      	bne.n	80053a4 <stm32_i2c_event_isr+0x10a>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8005422:	695b      	ldr	r3, [r3, #20]
	} else if (LL_I2C_IsActiveFlag_RXNE(i2c) && !data->current.is_write) {
 8005424:	065b      	lsls	r3, r3, #25
 8005426:	f57f af53 	bpl.w	80052d0 <stm32_i2c_event_isr+0x36>
 800542a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f af4f 	bne.w	80052d0 <stm32_i2c_event_isr+0x36>
		handle_rxne(dev);
 8005432:	4608      	mov	r0, r1
 8005434:	e7c0      	b.n	80053b8 <stm32_i2c_event_isr+0x11e>

08005436 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8005436:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8005438:	6902      	ldr	r2, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800543a:	68db      	ldr	r3, [r3, #12]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 800543c:	6959      	ldr	r1, [r3, #20]
	if (LL_I2C_IsActiveFlag_AF(i2c)) {
 800543e:	f411 6f80 	tst.w	r1, #1024	; 0x400
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8005442:	6959      	ldr	r1, [r3, #20]
 8005444:	d00b      	beq.n	800545e <stm32_i2c_error_isr+0x28>
 8005446:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800544a:	6159      	str	r1, [r3, #20]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800544c:	6819      	ldr	r1, [r3, #0]
 800544e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005452:	6019      	str	r1, [r3, #0]
		data->current.is_nack = 1U;
 8005454:	2301      	movs	r3, #1
 8005456:	6393      	str	r3, [r2, #56]	; 0x38
	k_sem_give(&data->device_sync_sem);
 8005458:	6900      	ldr	r0, [r0, #16]
 800545a:	f7fe bcb5 	b.w	8003dc8 <z_impl_k_sem_give>
	if (LL_I2C_IsActiveFlag_ARLO(i2c)) {
 800545e:	f411 7f00 	tst.w	r1, #512	; 0x200
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	d005      	beq.n	8005472 <stm32_i2c_error_isr+0x3c>
 8005466:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800546a:	6159      	str	r1, [r3, #20]
		data->current.is_arlo = 1U;
 800546c:	2301      	movs	r3, #1
 800546e:	6353      	str	r3, [r2, #52]	; 0x34
		goto end;
 8005470:	e7f2      	b.n	8005458 <stm32_i2c_error_isr+0x22>
	if (LL_I2C_IsActiveFlag_BERR(i2c)) {
 8005472:	05c9      	lsls	r1, r1, #23
 8005474:	d506      	bpl.n	8005484 <stm32_i2c_error_isr+0x4e>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800547c:	6159      	str	r1, [r3, #20]
		data->current.is_err = 1U;
 800547e:	2301      	movs	r3, #1
 8005480:	63d3      	str	r3, [r2, #60]	; 0x3c
		goto end;
 8005482:	e7e9      	b.n	8005458 <stm32_i2c_error_isr+0x22>
}
 8005484:	4770      	bx	lr

08005486 <stm32_i2c_msg_write>:
{
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	4604      	mov	r4, r0
 800548a:	4615      	mov	r5, r2
 800548c:	461a      	mov	r2, r3
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 800548e:	2300      	movs	r3, #0
	struct i2c_stm32_data *data = dev->data;
 8005490:	6906      	ldr	r6, [r0, #16]
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_WRITE);
 8005492:	f7ff fe55 	bl	8005140 <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 8005496:	6860      	ldr	r0, [r4, #4]
 8005498:	f7ff fe00 	bl	800509c <stm32_i2c_enable_transfer_interrupts.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	2300      	movs	r3, #0
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7fe fcb0 	bl	8003e08 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 80054a8:	b928      	cbnz	r0, 80054b6 <stm32_i2c_msg_write+0x30>
	return msg_end(dev, next_msg_flags, __func__);
 80054aa:	4629      	mov	r1, r5
 80054ac:	4620      	mov	r0, r4
}
 80054ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return msg_end(dev, next_msg_flags, __func__);
 80054b2:	f7ff be7e 	b.w	80051b2 <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff fe14 	bl	80050e4 <stm32_i2c_reset>
}
 80054bc:	f06f 0004 	mvn.w	r0, #4
 80054c0:	bd70      	pop	{r4, r5, r6, pc}

080054c2 <stm32_i2c_msg_read>:
{
 80054c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c4:	4615      	mov	r5, r2
 80054c6:	461a      	mov	r2, r3
	I2C_TypeDef *i2c = cfg->i2c;
 80054c8:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 80054ca:	6907      	ldr	r7, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80054cc:	68de      	ldr	r6, [r3, #12]
{
 80054ce:	4604      	mov	r4, r0
	msg_init(dev, msg, next_msg_flags, saddr, I2C_REQUEST_READ);
 80054d0:	2301      	movs	r3, #1
 80054d2:	f7ff fe35 	bl	8005140 <msg_init.constprop.0>
	stm32_i2c_enable_transfer_interrupts(dev);
 80054d6:	6860      	ldr	r0, [r4, #4]
 80054d8:	f7ff fde0 	bl	800509c <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 80054dc:	6873      	ldr	r3, [r6, #4]
 80054de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054e2:	6073      	str	r3, [r6, #4]
 80054e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e8:	2300      	movs	r3, #0
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7fe fc8c 	bl	8003e08 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 80054f0:	b928      	cbnz	r0, 80054fe <stm32_i2c_msg_read+0x3c>
	return msg_end(dev, next_msg_flags, __func__);
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
}
 80054f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return msg_end(dev, next_msg_flags, __func__);
 80054fa:	f7ff be5a 	b.w	80051b2 <msg_end.constprop.0>
		stm32_i2c_reset(dev);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fdf0 	bl	80050e4 <stm32_i2c_reset>
}
 8005504:	f06f 0004 	mvn.w	r0, #4
 8005508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800550a <i2c_stm32_irq_config_func_0>:
			 POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,		\
			 &api_funcs);					\
									\
STM32_I2C_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_I2C_INIT)
 800550a:	b508      	push	{r3, lr}
 800550c:	2200      	movs	r2, #0
 800550e:	4611      	mov	r1, r2
 8005510:	201f      	movs	r0, #31
 8005512:	f7fc fe57 	bl	80021c4 <z_arm_irq_priority_set>
 8005516:	201f      	movs	r0, #31
 8005518:	f7fc fe46 	bl	80021a8 <arch_irq_enable>
 800551c:	2200      	movs	r2, #0
 800551e:	2020      	movs	r0, #32
 8005520:	4611      	mov	r1, r2
 8005522:	f7fc fe4f 	bl	80021c4 <z_arm_irq_priority_set>
 8005526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800552a:	2020      	movs	r0, #32
 800552c:	f7fc be3c 	b.w	80021a8 <arch_irq_enable>

08005530 <i2c_stm32_transfer>:
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 8005536:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 8005538:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 800553a:	f043 0304 	orr.w	r3, r3, #4
{
 800553e:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8005540:	720b      	strb	r3, [r1, #8]
{
 8005542:	b087      	sub	sp, #28
 8005544:	4607      	mov	r7, r0
 8005546:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8005548:	460a      	mov	r2, r1
 800554a:	2301      	movs	r3, #1
 800554c:	42ab      	cmp	r3, r5
 800554e:	d90c      	bls.n	800556a <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8005550:	f106 0810 	add.w	r8, r6, #16
 8005554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555c:	4640      	mov	r0, r8
 800555e:	f7fe fc53 	bl	8003e08 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8005562:	3414      	adds	r4, #20
	ret = pm_device_runtime_get(dev);
 8005564:	2300      	movs	r3, #0
 8005566:	ae03      	add	r6, sp, #12
	while (num_msgs > 0) {
 8005568:	e050      	b.n	800560c <i2c_stm32_transfer+0xdc>
			if (OPERATION(current) != OPERATION(next)) {
 800556a:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 800556c:	d20c      	bcs.n	8005588 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 800556e:	7d10      	ldrb	r0, [r2, #20]
 8005570:	ea80 0c01 	eor.w	ip, r0, r1
 8005574:	f01c 0f01 	tst.w	ip, #1
 8005578:	d001      	beq.n	800557e <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 800557a:	0740      	lsls	r0, r0, #29
 800557c:	d501      	bpl.n	8005582 <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 800557e:	0789      	lsls	r1, r1, #30
 8005580:	d505      	bpl.n	800558e <i2c_stm32_transfer+0x5e>
		return ret;
 8005582:	f06f 0315 	mvn.w	r3, #21
 8005586:	e048      	b.n	800561a <i2c_stm32_transfer+0xea>
			current->flags |= I2C_MSG_STOP;
 8005588:	f041 0102 	orr.w	r1, r1, #2
 800558c:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800558e:	3301      	adds	r3, #1
		current++;
 8005590:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e7da      	b.n	800554c <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8005596:	2d01      	cmp	r5, #1
 8005598:	bf14      	ite	ne
 800559a:	4623      	movne	r3, r4
 800559c:	2300      	moveq	r3, #0
 800559e:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 80055a0:	f1a4 0314 	sub.w	r3, r4, #20
 80055a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 80055ac:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 80055b0:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 80055b4:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 80055b8:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 80055bc:	9b04      	ldr	r3, [sp, #16]
 80055be:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 80055c0:	bf83      	ittte	hi
 80055c2:	23ff      	movhi	r3, #255	; 0xff
 80055c4:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 80055c6:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 80055ca:	9a01      	ldrls	r2, [sp, #4]
			msg.flags &= ~I2C_MSG_STOP;
 80055cc:	bf8a      	itet	hi
 80055ce:	f003 03fd 	andhi.w	r3, r3, #253	; 0xfd
			flagsp = &combine_flags;
 80055d2:	465b      	movls	r3, fp
 80055d4:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80055d8:	f013 0f01 	tst.w	r3, #1
			msg.flags &= ~I2C_MSG_STOP;
 80055dc:	f88d 3014 	strb.w	r3, [sp, #20]
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80055e0:	4631      	mov	r1, r6
 80055e2:	464b      	mov	r3, r9
 80055e4:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80055e6:	d11c      	bne.n	8005622 <i2c_stm32_transfer+0xf2>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80055e8:	f7ff ff4d 	bl	8005486 <stm32_i2c_msg_write>
		if (ret < 0) {
 80055ec:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80055ee:	4603      	mov	r3, r0
		if (ret < 0) {
 80055f0:	db0e      	blt.n	8005610 <i2c_stm32_transfer+0xe0>
		rest -= msg.len;
 80055f2:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 80055f4:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 80055f6:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 80055fa:	440a      	add	r2, r1
		msg.len = rest;
 80055fc:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	d1da      	bne.n	80055bc <i2c_stm32_transfer+0x8c>
		num_msgs--;
 8005606:	3d01      	subs	r5, #1
 8005608:	b2ed      	uxtb	r5, r5
 800560a:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 800560c:	2d00      	cmp	r5, #0
 800560e:	d1c2      	bne.n	8005596 <i2c_stm32_transfer+0x66>
 8005610:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 8005612:	4640      	mov	r0, r8
 8005614:	f7fe fbd8 	bl	8003dc8 <z_impl_k_sem_give>
}
 8005618:	9b01      	ldr	r3, [sp, #4]
}
 800561a:	4618      	mov	r0, r3
 800561c:	b007      	add	sp, #28
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 8005622:	f7ff ff4e 	bl	80054c2 <stm32_i2c_msg_read>
 8005626:	e7e1      	b.n	80055ec <i2c_stm32_transfer+0xbc>

08005628 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8005628:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 800562a:	6803      	ldr	r3, [r0, #0]
 800562c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 800562e:	7905      	ldrb	r5, [r0, #4]
 8005630:	6804      	ldr	r4, [r0, #0]
 8005632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005636:	42a3      	cmp	r3, r4
 8005638:	d302      	bcc.n	8005640 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 800563a:	f06f 0001 	mvn.w	r0, #1
}
 800563e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8005640:	795c      	ldrb	r4, [r3, #5]
 8005642:	428c      	cmp	r4, r1
 8005644:	d001      	beq.n	800564a <pinctrl_lookup_state+0x22>
		(*state)++;
 8005646:	3308      	adds	r3, #8
 8005648:	e7f0      	b.n	800562c <pinctrl_lookup_state+0x4>
			return 0;
 800564a:	2000      	movs	r0, #0
 800564c:	e7f7      	b.n	800563e <pinctrl_lookup_state+0x16>

0800564e <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800564e:	6843      	ldr	r3, [r0, #4]
 8005650:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 800565a:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 800565c:	2301      	movs	r3, #1
 800565e:	408b      	lsls	r3, r1
 8005660:	4203      	tst	r3, r0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	7013      	strb	r3, [r2, #0]
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 800566a:	2000      	movs	r0, #0
 800566c:	4770      	bx	lr

0800566e <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 800566e:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8005670:	6843      	ldr	r3, [r0, #4]
 8005672:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 800567c:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 800567e:	2301      	movs	r3, #1
 8005680:	408b      	lsls	r3, r1
 8005682:	4323      	orrs	r3, r4
 8005684:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 8005686:	2000      	movs	r0, #0
 8005688:	bd10      	pop	{r4, pc}

0800568a <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 800568a:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800568c:	6843      	ldr	r3, [r0, #4]
 800568e:	f3c1 144b 	ubfx	r4, r1, #5, #12
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8005698:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800569a:	2201      	movs	r2, #1
 800569c:	408a      	lsls	r2, r1
 800569e:	ea23 0302 	bic.w	r3, r3, r2
 80056a2:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4604      	mov	r4, r0
 80056ac:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 80056ae:	f7ff ffde 	bl	800566e <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 80056b2:	4629      	mov	r1, r5
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ffe8 	bl	800568a <reset_stm32_line_deassert>

	return 0;
}
 80056ba:	2000      	movs	r0, #0
 80056bc:	bd38      	pop	{r3, r4, r5, pc}

080056be <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 80056be:	2000      	movs	r0, #0
 80056c0:	4770      	bx	lr

080056c2 <hts221_sample_fetch>:
{
 80056c2:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
 80056c4:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
 80056c6:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
 80056c8:	6840      	ldr	r0, [r0, #4]
 80056ca:	eb0d 0203 	add.w	r2, sp, r3
 80056ce:	21a8      	movs	r1, #168	; 0xa8
 80056d0:	f7ff f92a 	bl	8004928 <hts221_read_reg>
	if (status < 0) {
 80056d4:	2800      	cmp	r0, #0
 80056d6:	db06      	blt.n	80056e6 <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
 80056d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80056dc:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
 80056de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80056e2:	8063      	strh	r3, [r4, #2]
	return 0;
 80056e4:	2000      	movs	r0, #0
}
 80056e6:	b002      	add	sp, #8
 80056e8:	bd10      	pop	{r4, pc}

080056ea <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
 80056ea:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
 80056ec:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
 80056ee:	6863      	ldr	r3, [r4, #4]
 80056f0:	f104 0208 	add.w	r2, r4, #8
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	2127      	movs	r1, #39	; 0x27
 80056f8:	2307      	movs	r3, #7
 80056fa:	47a8      	blx	r5
	if (status < 0) {
 80056fc:	2800      	cmp	r0, #0
 80056fe:	db04      	blt.n	800570a <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
 8005700:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
 8005702:	f013 0f0f 	tst.w	r3, #15
 8005706:	bf18      	it	ne
 8005708:	2000      	movne	r0, #0
}
 800570a:	bd38      	pop	{r3, r4, r5, pc}

0800570c <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
 800570c:	2939      	cmp	r1, #57	; 0x39
 800570e:	d101      	bne.n	8005714 <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
 8005710:	f7ff bfeb 	b.w	80056ea <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
 8005714:	2903      	cmp	r1, #3
 8005716:	d0fb      	beq.n	8005710 <lis2dh_sample_fetch+0x4>
	int status = -ENODATA;
 8005718:	290c      	cmp	r1, #12
}
 800571a:	bf0c      	ite	eq
 800571c:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 8005720:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
 8005724:	4770      	bx	lr

08005726 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
 8005726:	b410      	push	{r4}
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8005728:	6884      	ldr	r4, [r0, #8]
 800572a:	68a4      	ldr	r4, [r4, #8]
 800572c:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
 800572e:	bc10      	pop	{r4}
 8005730:	4760      	bx	ip

08005732 <lis2dh_i2c_write_data>:
{
 8005732:	b530      	push	{r4, r5, lr}
 8005734:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 8005736:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
 800573a:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 800573c:	f88d 1007 	strb.w	r1, [sp, #7]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
 8005740:	f10d 0107 	add.w	r1, sp, #7
 8005744:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
 8005746:	2101      	movs	r1, #1
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
 8005748:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
 800574a:	9103      	str	r1, [sp, #12]
{
 800574c:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
 800574e:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
 8005750:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
 8005752:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 8005756:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
 800575a:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800575c:	2202      	movs	r2, #2
 800575e:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
 8005762:	f7ff ffe0 	bl	8005726 <i2c_transfer>
}
 8005766:	b009      	add	sp, #36	; 0x24
 8005768:	bd30      	pop	{r4, r5, pc}

0800576a <lis2dh_i2c_read_data>:
{
 800576a:	b530      	push	{r4, r5, lr}
 800576c:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 800576e:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
 8005772:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 8005774:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005778:	f10d 0107 	add.w	r1, sp, #7
{
 800577c:	461d      	mov	r5, r3
 800577e:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8005780:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
 8005782:	6860      	ldr	r0, [r4, #4]
 8005784:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
 8005786:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
 8005788:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 800578c:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 800578e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8005790:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005794:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8005798:	a902      	add	r1, sp, #8
 800579a:	2202      	movs	r2, #2
 800579c:	f7ff ffc3 	bl	8005726 <i2c_transfer>
}
 80057a0:	b009      	add	sp, #36	; 0x24
 80057a2:	bd30      	pop	{r4, r5, pc}

080057a4 <lis2dh_i2c_write_reg>:
{
 80057a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct lis2dh_config *cfg = dev->config;
 80057a6:	6843      	ldr	r3, [r0, #4]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
 80057a8:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
 80057ac:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
 80057ae:	6858      	ldr	r0, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
 80057b0:	f88d 1000 	strb.w	r1, [sp]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
 80057b4:	891b      	ldrh	r3, [r3, #8]
	msg.len = num_bytes;
 80057b6:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80057b8:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
 80057bc:	a901      	add	r1, sp, #4
 80057be:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
 80057c0:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
 80057c4:	f7ff ffaf 	bl	8005726 <i2c_transfer>
}
 80057c8:	b005      	add	sp, #20
 80057ca:	f85d fb04 	ldr.w	pc, [sp], #4

080057ce <lis2dh_i2c_read_reg>:
{
 80057ce:	b510      	push	{r4, lr}
 80057d0:	b088      	sub	sp, #32
	const struct lis2dh_config *cfg = dev->config;
 80057d2:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 80057d4:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 80057d8:	f10d 0107 	add.w	r1, sp, #7
 80057dc:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 80057de:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 80057e0:	6858      	ldr	r0, [r3, #4]
 80057e2:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
 80057e4:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
 80057e6:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80057ea:	2207      	movs	r2, #7
 80057ec:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
 80057f0:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
 80057f2:	2202      	movs	r2, #2
 80057f4:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
 80057f6:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
 80057fa:	f7ff ff94 	bl	8005726 <i2c_transfer>
}
 80057fe:	b008      	add	sp, #32
 8005800:	bd10      	pop	{r4, pc}

08005802 <lis2dh_i2c_update_reg>:
{
 8005802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005806:	4698      	mov	r8, r3
	const struct lis2dh_config *cfg = dev->config;
 8005808:	6843      	ldr	r3, [r0, #4]
{
 800580a:	b088      	sub	sp, #32
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
 800580c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005810:	f893 a008 	ldrb.w	sl, [r3, #8]
 8005814:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8005818:	2300      	movs	r3, #0
	msg[0].len = num_write;
 800581a:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
 800581c:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 8005820:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
 8005824:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005828:	2307      	movs	r3, #7
 800582a:	460e      	mov	r6, r1
 800582c:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
 800582e:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005830:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8005834:	2202      	movs	r2, #2
 8005836:	4653      	mov	r3, sl
 8005838:	a902      	add	r1, sp, #8
 800583a:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
 800583c:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
 800583e:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
 8005840:	f7ff ff71 	bl	8005726 <i2c_transfer>
	if (rc != 0) {
 8005844:	b9b8      	cbnz	r0, 8005876 <lis2dh_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
 8005846:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800584a:	ea22 0304 	bic.w	r3, r2, r4
 800584e:	ea04 0408 	and.w	r4, r4, r8
 8005852:	431c      	orrs	r4, r3
	if (new_value == old_value) {
 8005854:	42a2      	cmp	r2, r4
 8005856:	d00e      	beq.n	8005876 <lis2dh_i2c_update_reg+0x74>
	msg.len = num_bytes;
 8005858:	2302      	movs	r3, #2
 800585a:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800585c:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
 8005860:	463a      	mov	r2, r7
 8005862:	4653      	mov	r3, sl
 8005864:	a902      	add	r1, sp, #8
 8005866:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
 8005868:	f88d 6004 	strb.w	r6, [sp, #4]
 800586c:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
 8005870:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
 8005872:	f7ff ff58 	bl	8005726 <i2c_transfer>
}
 8005876:	b008      	add	sp, #32
 8005878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800587c <get_single_mode_raw_data>:
	return 0;
}

static int get_single_mode_raw_data(const struct device *dev,
				    int16_t *raw_mag)
{
 800587c:	b570      	push	{r4, r5, r6, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
	const struct lis2mdl_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
 800587e:	6845      	ldr	r5, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
 8005880:	6906      	ldr	r6, [r0, #16]
{
 8005882:	460c      	mov	r4, r1
	int rc = 0;

	rc = lis2mdl_operating_mode_set(ctx, LIS2MDL_SINGLE_TRIGGER);
 8005884:	4628      	mov	r0, r5
 8005886:	2101      	movs	r1, #1
 8005888:	f7ff f8c2 	bl	8004a10 <lis2mdl_operating_mode_set>
	if (rc) {
 800588c:	b970      	cbnz	r0, 80058ac <get_single_mode_raw_data+0x30>
	return z_impl_k_sem_take(sem, timeout);
 800588e:	22c8      	movs	r2, #200	; 0xc8
 8005890:	2300      	movs	r3, #0
 8005892:	f106 000c 	add.w	r0, r6, #12
 8005896:	f7fe fab7 	bl	8003e08 <z_impl_k_sem_take>
		LOG_ERR("set single mode failed");
		return rc;
	}

	if (k_sem_take(&lis2mdl->fetch_sem, K_MSEC(SAMPLE_FETCH_TIMEOUT_MS))) {
 800589a:	b928      	cbnz	r0, 80058a8 <get_single_mode_raw_data+0x2c>
			SAMPLE_FETCH_TIMEOUT_MS);
		return -EIO;
	}

	/* fetch raw data sample */
	rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
	if (rc) {
		LOG_ERR("Failed to read sample");
		return rc;
	}
	return 0;
}
 80058a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
 80058a4:	f7ff b93e 	b.w	8004b24 <lis2mdl_magnetic_raw_get>
		return -EIO;
 80058a8:	f06f 0004 	mvn.w	r0, #4
}
 80058ac:	bd70      	pop	{r4, r5, r6, pc}

080058ae <lis2mdl_init>:
	.sample_fetch = lis2mdl_sample_fetch,
	.channel_get = lis2mdl_channel_get,
};

static int lis2mdl_init(const struct device *dev)
{
 80058ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
 80058b0:	6906      	ldr	r6, [r0, #16]
	const struct lis2mdl_config *cfg = dev->config;
 80058b2:	6845      	ldr	r5, [r0, #4]
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
	uint8_t wai;
	int rc = 0;

	lis2mdl->dev = dev;
 80058b4:	6030      	str	r0, [r6, #0]

	if (cfg->spi_4wires) {
 80058b6:	7dab      	ldrb	r3, [r5, #22]
 80058b8:	b95b      	cbnz	r3, 80058d2 <lis2mdl_init+0x24>
			return -EIO;
		}
	}

	/* check chip ID */
	if (lis2mdl_device_id_get(ctx, &wai) < 0) {
 80058ba:	f10d 0107 	add.w	r1, sp, #7
 80058be:	4628      	mov	r0, r5
 80058c0:	f7ff f95e 	bl	8004b80 <lis2mdl_device_id_get>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	da0b      	bge.n	80058e0 <lis2mdl_init+0x32>
			return -EIO;
 80058c8:	f06f 0404 	mvn.w	r4, #4
		}
	}
#endif

	return 0;
}
 80058cc:	4620      	mov	r0, r4
 80058ce:	b002      	add	sp, #8
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
		if (lis2mdl_spi_mode_set(ctx, LIS2MDL_SPI_4_WIRE) < 0) {
 80058d2:	2101      	movs	r1, #1
 80058d4:	4628      	mov	r0, r5
 80058d6:	f7ff f99d 	bl	8004c14 <lis2mdl_spi_mode_set>
 80058da:	2800      	cmp	r0, #0
 80058dc:	daed      	bge.n	80058ba <lis2mdl_init+0xc>
 80058de:	e7f3      	b.n	80058c8 <lis2mdl_init+0x1a>
	if (wai != LIS2MDL_ID) {
 80058e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d156      	bne.n	8005996 <lis2mdl_init+0xe8>
	if (lis2mdl_reset_set(ctx, PROPERTY_ENABLE) < 0) {
 80058e8:	2101      	movs	r1, #1
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7ff f94d 	bl	8004b8a <lis2mdl_reset_set>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	dbe9      	blt.n	80058c8 <lis2mdl_init+0x1a>
	z_impl_k_busy_wait(usec_to_wait);
 80058f4:	2064      	movs	r0, #100	; 0x64
 80058f6:	f7fe ff49 	bl	800478c <z_impl_k_busy_wait>
	if (cfg->spi_4wires) {
 80058fa:	7dab      	ldrb	r3, [r5, #22]
 80058fc:	b9f3      	cbnz	r3, 800593c <lis2mdl_init+0x8e>
	if (lis2mdl_block_data_update_set(ctx, PROPERTY_ENABLE) < 0) {
 80058fe:	2101      	movs	r1, #1
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff f8f8 	bl	8004af6 <lis2mdl_block_data_update_set>
 8005906:	2800      	cmp	r0, #0
 8005908:	dbde      	blt.n	80058c8 <lis2mdl_init+0x1a>
	if (lis2mdl_data_rate_set(ctx, LIS2MDL_ODR_10Hz)) {
 800590a:	2100      	movs	r1, #0
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff f896 	bl	8004a3e <lis2mdl_data_rate_set>
 8005912:	2800      	cmp	r0, #0
 8005914:	d1d8      	bne.n	80058c8 <lis2mdl_init+0x1a>
	if (cfg->cancel_offset) {
 8005916:	7d2b      	ldrb	r3, [r5, #20]
 8005918:	b9bb      	cbnz	r3, 800594a <lis2mdl_init+0x9c>
	if (lis2mdl_offset_temp_comp_set(ctx, PROPERTY_ENABLE)) {
 800591a:	2101      	movs	r1, #1
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff f8a5 	bl	8004a6c <lis2mdl_offset_temp_comp_set>
 8005922:	2800      	cmp	r0, #0
 8005924:	d1d0      	bne.n	80058c8 <lis2mdl_init+0x1a>
	if (cfg->cancel_offset && cfg->single_mode) {
 8005926:	7d2a      	ldrb	r2, [r5, #20]
 8005928:	7d6b      	ldrb	r3, [r5, #21]
 800592a:	b9aa      	cbnz	r2, 8005958 <lis2mdl_init+0xaa>
	if (cfg->single_mode) {
 800592c:	7d6b      	ldrb	r3, [r5, #21]
 800592e:	b9eb      	cbnz	r3, 800596c <lis2mdl_init+0xbe>
		rc = lis2mdl_operating_mode_set(ctx,
 8005930:	2100      	movs	r1, #0
 8005932:	4628      	mov	r0, r5
 8005934:	f7ff f86c 	bl	8004a10 <lis2mdl_operating_mode_set>
 8005938:	4604      	mov	r4, r0
		if (rc) {
 800593a:	e7c7      	b.n	80058cc <lis2mdl_init+0x1e>
		if (lis2mdl_spi_mode_set(ctx, LIS2MDL_SPI_4_WIRE) < 0) {
 800593c:	2101      	movs	r1, #1
 800593e:	4628      	mov	r0, r5
 8005940:	f7ff f968 	bl	8004c14 <lis2mdl_spi_mode_set>
 8005944:	2800      	cmp	r0, #0
 8005946:	dada      	bge.n	80058fe <lis2mdl_init+0x50>
 8005948:	e7be      	b.n	80058c8 <lis2mdl_init+0x1a>
		if (lis2mdl_set_rst_mode_set(ctx,
 800594a:	2101      	movs	r1, #1
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff f8a4 	bl	8004a9a <lis2mdl_set_rst_mode_set>
 8005952:	2800      	cmp	r0, #0
 8005954:	d0e1      	beq.n	800591a <lis2mdl_init+0x6c>
 8005956:	e7b7      	b.n	80058c8 <lis2mdl_init+0x1a>
	if (cfg->cancel_offset && cfg->single_mode) {
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0e9      	beq.n	8005930 <lis2mdl_init+0x82>
		rc = lis2mdl_set_rst_sensor_single_set(ctx,
 800595c:	2101      	movs	r1, #1
 800595e:	4628      	mov	r0, r5
 8005960:	f7ff f8b2 	bl	8004ac8 <lis2mdl_set_rst_sensor_single_set>
		if (rc) {
 8005964:	4604      	mov	r4, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d0e0      	beq.n	800592c <lis2mdl_init+0x7e>
 800596a:	e7af      	b.n	80058cc <lis2mdl_init+0x1e>
		rc = lis2mdl_drdy_on_pin_set(ctx, 1);
 800596c:	2101      	movs	r1, #1
 800596e:	4628      	mov	r0, r5
 8005970:	f7ff f939 	bl	8004be6 <lis2mdl_drdy_on_pin_set>
		if (rc) {
 8005974:	4604      	mov	r4, r0
 8005976:	2800      	cmp	r0, #0
 8005978:	d1a8      	bne.n	80058cc <lis2mdl_init+0x1e>
		rc = lis2mdl_boot_set(ctx, 1);
 800597a:	2101      	movs	r1, #1
 800597c:	4628      	mov	r0, r5
 800597e:	f7ff f91b 	bl	8004bb8 <lis2mdl_boot_set>
		if (rc) {
 8005982:	4604      	mov	r4, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d1a1      	bne.n	80058cc <lis2mdl_init+0x1e>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8005988:	2201      	movs	r2, #1
 800598a:	4601      	mov	r1, r0
 800598c:	f106 000c 	add.w	r0, r6, #12
 8005990:	f000 fc78 	bl	8006284 <z_impl_k_sem_init>
 8005994:	e79a      	b.n	80058cc <lis2mdl_init+0x1e>
		return -EINVAL;
 8005996:	f06f 0415 	mvn.w	r4, #21
 800599a:	e797      	b.n	80058cc <lis2mdl_init+0x1e>

0800599c <lis2mdl_sample_fetch_temp.isra.0>:
static int lis2mdl_sample_fetch_temp(const struct device *dev)
 800599c:	b513      	push	{r0, r1, r4, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
 800599e:	6904      	ldr	r4, [r0, #16]
	if (lis2mdl_temperature_raw_get(ctx, &raw_temp) < 0) {
 80059a0:	6840      	ldr	r0, [r0, #4]
 80059a2:	f10d 0106 	add.w	r1, sp, #6
 80059a6:	f7ff f8db 	bl	8004b60 <lis2mdl_temperature_raw_get>
 80059aa:	2800      	cmp	r0, #0
	lis2mdl->temp_sample = (sys_le16_to_cpu(raw_temp));
 80059ac:	bfa4      	itt	ge
 80059ae:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
 80059b2:	8163      	strhge	r3, [r4, #10]
}
 80059b4:	b002      	add	sp, #8
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <lis2mdl_sample_fetch_mag.isra.0>:
static int lis2mdl_sample_fetch_mag(const struct device *dev)
 80059b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct lis2mdl_config *cfg = dev->config;
 80059ba:	6846      	ldr	r6, [r0, #4]
	struct lis2mdl_data *lis2mdl = dev->data;
 80059bc:	6904      	ldr	r4, [r0, #16]
	if (cfg->single_mode) {
 80059be:	7d73      	ldrb	r3, [r6, #21]
static int lis2mdl_sample_fetch_mag(const struct device *dev)
 80059c0:	4605      	mov	r5, r0
		rc = get_single_mode_raw_data(dev, raw_mag);
 80059c2:	4669      	mov	r1, sp
	if (cfg->single_mode) {
 80059c4:	b373      	cbz	r3, 8005a24 <lis2mdl_sample_fetch_mag.isra.0+0x6c>
		rc = get_single_mode_raw_data(dev, raw_mag);
 80059c6:	f7ff ff59 	bl	800587c <get_single_mode_raw_data>
		if (rc) {
 80059ca:	bb48      	cbnz	r0, 8005a20 <lis2mdl_sample_fetch_mag.isra.0+0x68>
		lis2mdl->mag[0] = sys_le16_to_cpu(raw_mag[0]);
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	6063      	str	r3, [r4, #4]
		lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
 80059d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80059d4:	8123      	strh	r3, [r4, #8]
		if (cfg->cancel_offset) {
 80059d6:	7d33      	ldrb	r3, [r6, #20]
 80059d8:	b313      	cbz	r3, 8005a20 <lis2mdl_sample_fetch_mag.isra.0+0x68>
			rc = get_single_mode_raw_data(dev, raw_mag);
 80059da:	4669      	mov	r1, sp
 80059dc:	4628      	mov	r0, r5
 80059de:	f7ff ff4d 	bl	800587c <get_single_mode_raw_data>
			if (rc) {
 80059e2:	b9e8      	cbnz	r0, 8005a20 <lis2mdl_sample_fetch_mag.isra.0+0x68>
			lis2mdl->mag[0] += sys_le16_to_cpu(raw_mag[0]);
 80059e4:	88a3      	ldrh	r3, [r4, #4]
 80059e6:	f8bd 2000 	ldrh.w	r2, [sp]
			lis2mdl->mag[1] += sys_le16_to_cpu(raw_mag[1]);
 80059ea:	88e1      	ldrh	r1, [r4, #6]
			lis2mdl->mag[0] += sys_le16_to_cpu(raw_mag[0]);
 80059ec:	4413      	add	r3, r2
 80059ee:	b21b      	sxth	r3, r3
			lis2mdl->mag[1] += sys_le16_to_cpu(raw_mag[1]);
 80059f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
			lis2mdl->mag[0] += sys_le16_to_cpu(raw_mag[0]);
 80059f4:	80a3      	strh	r3, [r4, #4]
			lis2mdl->mag[1] += sys_le16_to_cpu(raw_mag[1]);
 80059f6:	4411      	add	r1, r2
			lis2mdl->mag[2] += sys_le16_to_cpu(raw_mag[2]);
 80059f8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80059fc:	8922      	ldrh	r2, [r4, #8]
			lis2mdl->mag[0] /= 2;
 80059fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005a02:	105b      	asrs	r3, r3, #1
			lis2mdl->mag[2] += sys_le16_to_cpu(raw_mag[2]);
 8005a04:	4402      	add	r2, r0
			lis2mdl->mag[0] /= 2;
 8005a06:	80a3      	strh	r3, [r4, #4]
			lis2mdl->mag[1] /= 2;
 8005a08:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8005a0c:	fa03 f181 	sxtah	r1, r3, r1
			lis2mdl->mag[2] /= 2;
 8005a10:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8005a14:	fa03 f282 	sxtah	r2, r3, r2
			lis2mdl->mag[1] /= 2;
 8005a18:	1049      	asrs	r1, r1, #1
			lis2mdl->mag[2] /= 2;
 8005a1a:	1052      	asrs	r2, r2, #1
			lis2mdl->mag[1] /= 2;
 8005a1c:	80e1      	strh	r1, [r4, #6]
			lis2mdl->mag[2] /= 2;
 8005a1e:	8122      	strh	r2, [r4, #8]
}
 8005a20:	b002      	add	sp, #8
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
		rc = lis2mdl_magnetic_raw_get(ctx, raw_mag);
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7ff f87d 	bl	8004b24 <lis2mdl_magnetic_raw_get>
		if (rc) {
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1f8      	bne.n	8005a20 <lis2mdl_sample_fetch_mag.isra.0+0x68>
		lis2mdl->mag[0] = sys_le16_to_cpu(raw_mag[0]);
 8005a2e:	9b00      	ldr	r3, [sp, #0]
 8005a30:	6063      	str	r3, [r4, #4]
		lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
 8005a32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005a36:	8123      	strh	r3, [r4, #8]
 8005a38:	e7f2      	b.n	8005a20 <lis2mdl_sample_fetch_mag.isra.0+0x68>

08005a3a <lis2mdl_sample_fetch>:
	switch (chan) {
 8005a3a:	290c      	cmp	r1, #12
{
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4604      	mov	r4, r0
	switch (chan) {
 8005a40:	d00b      	beq.n	8005a5a <lis2mdl_sample_fetch+0x20>
 8005a42:	d805      	bhi.n	8005a50 <lis2mdl_sample_fetch+0x16>
 8005a44:	3908      	subs	r1, #8
 8005a46:	2903      	cmp	r1, #3
 8005a48:	d90a      	bls.n	8005a60 <lis2mdl_sample_fetch+0x26>
 8005a4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005a4e:	e00a      	b.n	8005a66 <lis2mdl_sample_fetch+0x2c>
 8005a50:	2939      	cmp	r1, #57	; 0x39
 8005a52:	d1fa      	bne.n	8005a4a <lis2mdl_sample_fetch+0x10>
		lis2mdl_sample_fetch_mag(dev);
 8005a54:	f7ff ffb0 	bl	80059b8 <lis2mdl_sample_fetch_mag.isra.0>
		lis2mdl_sample_fetch_temp(dev);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7ff ff9f 	bl	800599c <lis2mdl_sample_fetch_temp.isra.0>
		break;
 8005a5e:	e001      	b.n	8005a64 <lis2mdl_sample_fetch+0x2a>
		lis2mdl_sample_fetch_mag(dev);
 8005a60:	f7ff ffaa 	bl	80059b8 <lis2mdl_sample_fetch_mag.isra.0>
	return 0;
 8005a64:	2000      	movs	r0, #0
}
 8005a66:	bd10      	pop	{r4, pc}

08005a68 <lis2mdl_attr_set>:
{
 8005a68:	b513      	push	{r0, r1, r4, lr}
 8005a6a:	460c      	mov	r4, r1
	switch (chan) {
 8005a6c:	2c0b      	cmp	r4, #11
{
 8005a6e:	4611      	mov	r1, r2
	switch (chan) {
 8005a70:	d804      	bhi.n	8005a7c <lis2mdl_attr_set+0x14>
 8005a72:	2c07      	cmp	r4, #7
 8005a74:	d804      	bhi.n	8005a80 <lis2mdl_attr_set+0x18>
 8005a76:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005a7a:	e027      	b.n	8005acc <lis2mdl_attr_set+0x64>
 8005a7c:	2c39      	cmp	r4, #57	; 0x39
 8005a7e:	d1fa      	bne.n	8005a76 <lis2mdl_attr_set+0xe>
	switch (attr) {
 8005a80:	b179      	cbz	r1, 8005aa2 <lis2mdl_attr_set+0x3a>
 8005a82:	2908      	cmp	r1, #8
 8005a84:	d1f7      	bne.n	8005a76 <lis2mdl_attr_set+0xe>
		offset[i] = sys_cpu_to_le16(val->val1);
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f8ad 2000 	strh.w	r2, [sp]
	return lis2mdl_mag_user_offset_set(ctx, offset);
 8005a8c:	4669      	mov	r1, sp
		offset[i] = sys_cpu_to_le16(val->val1);
 8005a8e:	689a      	ldr	r2, [r3, #8]
	return lis2mdl_mag_user_offset_set(ctx, offset);
 8005a90:	6840      	ldr	r0, [r0, #4]
		offset[i] = sys_cpu_to_le16(val->val1);
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005a98:	f8ad 3004 	strh.w	r3, [sp, #4]
	return lis2mdl_mag_user_offset_set(ctx, offset);
 8005a9c:	f7fe ffa6 	bl	80049ec <lis2mdl_mag_user_offset_set>
		return lis2mdl_set_hard_iron(dev, chan, val);
 8005aa0:	e014      	b.n	8005acc <lis2mdl_attr_set+0x64>
		return lis2mdl_set_odr(dev, val);
 8005aa2:	681b      	ldr	r3, [r3, #0]
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
 8005aa4:	6840      	ldr	r0, [r0, #4]
	switch (val->val1) {
 8005aa6:	2b32      	cmp	r3, #50	; 0x32
 8005aa8:	d012      	beq.n	8005ad0 <lis2mdl_attr_set+0x68>
 8005aaa:	dc06      	bgt.n	8005aba <lis2mdl_attr_set+0x52>
 8005aac:	2b0a      	cmp	r3, #10
 8005aae:	d007      	beq.n	8005ac0 <lis2mdl_attr_set+0x58>
 8005ab0:	2b14      	cmp	r3, #20
 8005ab2:	d00f      	beq.n	8005ad4 <lis2mdl_attr_set+0x6c>
 8005ab4:	f06f 0015 	mvn.w	r0, #21
 8005ab8:	e008      	b.n	8005acc <lis2mdl_attr_set+0x64>
 8005aba:	2b64      	cmp	r3, #100	; 0x64
 8005abc:	d1fa      	bne.n	8005ab4 <lis2mdl_attr_set+0x4c>
		odr = LIS2MDL_ODR_100Hz;
 8005abe:	2103      	movs	r1, #3
	if (lis2mdl_data_rate_set(ctx, odr)) {
 8005ac0:	f7fe ffbd 	bl	8004a3e <lis2mdl_data_rate_set>
		return -EIO;
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	bf18      	it	ne
 8005ac8:	f06f 0004 	mvnne.w	r0, #4
}
 8005acc:	b002      	add	sp, #8
 8005ace:	bd10      	pop	{r4, pc}
		odr = LIS2MDL_ODR_50Hz;
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	e7f5      	b.n	8005ac0 <lis2mdl_attr_set+0x58>
	switch (val->val1) {
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	e7f3      	b.n	8005ac0 <lis2mdl_attr_set+0x58>

08005ad8 <z_impl_i2c_transfer>:
{
 8005ad8:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8005ada:	6884      	ldr	r4, [r0, #8]
 8005adc:	68a4      	ldr	r4, [r4, #8]
 8005ade:	46a4      	mov	ip, r4
}
 8005ae0:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8005ae2:	4760      	bx	ip

08005ae4 <lps22hb_sample_fetch>:
{
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	b08b      	sub	sp, #44	; 0x2c
	const struct lps22hb_config *config = dev->config;
 8005ae8:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
 8005aea:	6905      	ldr	r5, [r0, #16]
	return i2c_burst_read(spec->bus, spec->addr,
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
 8005af0:	2228      	movs	r2, #40	; 0x28
 8005af2:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005af6:	f10d 0207 	add.w	r2, sp, #7
 8005afa:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
 8005afc:	2201      	movs	r2, #1
 8005afe:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
 8005b00:	aa02      	add	r2, sp, #8
 8005b02:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
 8005b04:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
 8005b06:	2400      	movs	r4, #0
	msg[1].len = num_read;
 8005b08:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005b0a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8005b0c:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005b10:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
 8005b14:	2202      	movs	r2, #2
 8005b16:	a904      	add	r1, sp, #16
 8005b18:	f7ff ffde 	bl	8005ad8 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LPS22HB_REG_PRESS_OUT_XL,
 8005b1c:	42a0      	cmp	r0, r4
 8005b1e:	db10      	blt.n	8005b42 <lps22hb_sample_fetch+0x5e>
				     ((uint32_t)(out[2]) << 16));
 8005b20:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
 8005b24:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
 8005b28:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
 8005b2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
 8005b2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
 8005b32:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
 8005b34:	602b      	str	r3, [r5, #0]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
 8005b36:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 8005b3a:	80ab      	strh	r3, [r5, #4]
	return 0;
 8005b3c:	4620      	mov	r0, r4
}
 8005b3e:	b00b      	add	sp, #44	; 0x2c
 8005b40:	bd30      	pop	{r4, r5, pc}
		return -EIO;
 8005b42:	f06f 0004 	mvn.w	r0, #4
 8005b46:	e7fa      	b.n	8005b3e <lps22hb_sample_fetch+0x5a>

08005b48 <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	b088      	sub	sp, #32
 8005b4e:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
 8005b50:	2300      	movs	r3, #0
	msg[0].len = num_write;
 8005b52:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
 8005b56:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 8005b5a:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
 8005b5e:	e9cd 3805 	strd	r3, r8, [sp, #20]
 8005b62:	f04f 0a10 	mov.w	sl, #16
	msg[0].buf = (uint8_t *)write_buf;
 8005b66:	ae01      	add	r6, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005b68:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	4614      	mov	r4, r2
 8005b70:	f88d a004 	strb.w	sl, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
 8005b74:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
 8005b76:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005b7a:	f88d 301c 	strb.w	r3, [sp, #28]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	460b      	mov	r3, r1
 8005b82:	a902      	add	r1, sp, #8
 8005b84:	f7ff ffa8 	bl	8005ad8 <z_impl_i2c_transfer>
	if (rc != 0) {
 8005b88:	b9b8      	cbnz	r0, 8005bba <i2c_reg_update_byte.constprop.0+0x72>
	new_value = (old_value & ~mask) | (value & mask);
 8005b8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005b8e:	ea22 0304 	bic.w	r3, r2, r4
 8005b92:	ea04 0409 	and.w	r4, r4, r9
 8005b96:	431c      	orrs	r4, r3
	if (new_value == old_value) {
 8005b98:	42a2      	cmp	r2, r4
 8005b9a:	d00e      	beq.n	8005bba <i2c_reg_update_byte.constprop.0+0x72>
	msg.len = num_bytes;
 8005b9c:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
 8005b9e:	f88d a004 	strb.w	sl, [sp, #4]
 8005ba2:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
 8005ba6:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
 8005ba8:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8005baa:	f88d 3010 	strb.w	r3, [sp, #16]
 8005bae:	462b      	mov	r3, r5
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	a902      	add	r1, sp, #8
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f7ff ff8f 	bl	8005ad8 <z_impl_i2c_transfer>
}
 8005bba:	b008      	add	sp, #32
 8005bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bc0 <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
 8005bc0:	b570      	push	{r4, r5, r6, lr}
	const struct lps22hb_config * const config = dev->config;

	if (!device_is_ready(config->i2c.bus)) {
 8005bc2:	6843      	ldr	r3, [r0, #4]
{
 8005bc4:	b088      	sub	sp, #32
 8005bc6:	4605      	mov	r5, r0
	if (!device_is_ready(config->i2c.bus)) {
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	f000 fb19 	bl	8006200 <z_device_is_ready>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d035      	beq.n	8005c3e <lps22hb_init+0x7e>
	const struct lps22hb_config *config = dev->config;
 8005bd2:	686e      	ldr	r6, [r5, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005bda:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8005bde:	6830      	ldr	r0, [r6, #0]
	msg[0].buf = (uint8_t *)write_buf;
 8005be0:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
 8005be2:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
 8005be6:	2201      	movs	r2, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8005be8:	88b3      	ldrh	r3, [r6, #4]
	msg[0].len = num_write;
 8005bea:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
 8005bec:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8005bf0:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005bf2:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8005bf4:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005bf8:	f88d 201c 	strb.w	r2, [sp, #28]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	a902      	add	r1, sp, #8
 8005c00:	f7ff ff6a 	bl	8005ad8 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LPS22HB_REG_WHO_AM_I,
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	db03      	blt.n	8005c10 <lps22hb_init+0x50>
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
 8005c08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c0c:	2bb1      	cmp	r3, #177	; 0xb1
 8005c0e:	d003      	beq.n	8005c18 <lps22hb_init+0x58>
		return -ENODEV;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
 8005c10:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8005c14:	b008      	add	sp, #32
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
 8005c18:	6868      	ldr	r0, [r5, #4]
	return i2c_reg_update_byte(spec->bus, spec->addr,
 8005c1a:	2330      	movs	r3, #48	; 0x30
 8005c1c:	7901      	ldrb	r1, [r0, #4]
 8005c1e:	6800      	ldr	r0, [r0, #0]
 8005c20:	2270      	movs	r2, #112	; 0x70
 8005c22:	f7ff ff91 	bl	8005b48 <i2c_reg_update_byte.constprop.0>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	dbf2      	blt.n	8005c10 <lps22hb_init+0x50>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	7931      	ldrb	r1, [r6, #4]
 8005c2e:	6830      	ldr	r0, [r6, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	f7ff ff89 	bl	8005b48 <i2c_reg_update_byte.constprop.0>
	if (i2c_reg_update_byte_dt(&config->i2c, LPS22HB_REG_CTRL_REG1,
 8005c36:	2800      	cmp	r0, #0
 8005c38:	dbea      	blt.n	8005c10 <lps22hb_init+0x50>
	return 0;
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	e7ea      	b.n	8005c14 <lps22hb_init+0x54>
		return -ENODEV;
 8005c3e:	f06f 0012 	mvn.w	r0, #18
 8005c42:	e7e7      	b.n	8005c14 <lps22hb_init+0x54>

08005c44 <lsm6dsl_accel_set_fs_raw>:
{
 8005c44:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
 8005c46:	6905      	ldr	r5, [r0, #16]
	if (data->hw_tf->update_reg(dev,
 8005c48:	6a2a      	ldr	r2, [r5, #32]
 8005c4a:	008b      	lsls	r3, r1, #2
 8005c4c:	68d6      	ldr	r6, [r2, #12]
{
 8005c4e:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
 8005c50:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8005c54:	220c      	movs	r2, #12
 8005c56:	2110      	movs	r1, #16
 8005c58:	47b0      	blx	r6
 8005c5a:	2800      	cmp	r0, #0
	data->accel_fs = fs;
 8005c5c:	bfa6      	itte	ge
 8005c5e:	f885 4026 	strbge.w	r4, [r5, #38]	; 0x26
	return 0;
 8005c62:	2000      	movge	r0, #0
		return -EIO;
 8005c64:	f06f 0004 	mvnlt.w	r0, #4
}
 8005c68:	bd70      	pop	{r4, r5, r6, pc}

08005c6a <lsm6dsl_gyro_set_fs_raw>:
{
 8005c6a:	b510      	push	{r4, lr}
		if (data->hw_tf->update_reg(dev,
 8005c6c:	6903      	ldr	r3, [r0, #16]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
	if (fs == GYRO_FULLSCALE_125) {
 8005c70:	2904      	cmp	r1, #4
		if (data->hw_tf->update_reg(dev,
 8005c72:	68dc      	ldr	r4, [r3, #12]
	if (fs == GYRO_FULLSCALE_125) {
 8005c74:	d109      	bne.n	8005c8a <lsm6dsl_gyro_set_fs_raw+0x20>
		if (data->hw_tf->update_reg(dev,
 8005c76:	2302      	movs	r3, #2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2111      	movs	r1, #17
 8005c7c:	47a0      	blx	r4
 8005c7e:	2800      	cmp	r0, #0
			return -EIO;
 8005c80:	bfb4      	ite	lt
 8005c82:	f06f 0004 	mvnlt.w	r0, #4
	return 0;
 8005c86:	2000      	movge	r0, #0
}
 8005c88:	bd10      	pop	{r4, pc}
		if (data->hw_tf->update_reg(dev,
 8005c8a:	0089      	lsls	r1, r1, #2
 8005c8c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8005c90:	220c      	movs	r2, #12
 8005c92:	e7f2      	b.n	8005c7a <lsm6dsl_gyro_set_fs_raw+0x10>

08005c94 <lsm6dsl_gyro_set_odr_raw>:
{
 8005c94:	b510      	push	{r4, lr}
	if (data->hw_tf->update_reg(dev,
 8005c96:	6902      	ldr	r2, [r0, #16]
 8005c98:	6a12      	ldr	r2, [r2, #32]
 8005c9a:	010b      	lsls	r3, r1, #4
 8005c9c:	68d4      	ldr	r4, [r2, #12]
 8005c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca2:	22f0      	movs	r2, #240	; 0xf0
 8005ca4:	2111      	movs	r1, #17
 8005ca6:	47a0      	blx	r4
	return 0;
 8005ca8:	2800      	cmp	r0, #0
}
 8005caa:	bfb4      	ite	lt
 8005cac:	f06f 0004 	mvnlt.w	r0, #4
 8005cb0:	2000      	movge	r0, #0
 8005cb2:	bd10      	pop	{r4, pc}

08005cb4 <lsm6dsl_channel_get>:
{
 8005cb4:	b570      	push	{r4, r5, r6, lr}
	switch (chan) {
 8005cb6:	2903      	cmp	r1, #3
	struct lsm6dsl_data *data = dev->data;
 8005cb8:	6905      	ldr	r5, [r0, #16]
{
 8005cba:	4614      	mov	r4, r2
	switch (chan) {
 8005cbc:	d905      	bls.n	8005cca <lsm6dsl_channel_get+0x16>
 8005cbe:	1f0b      	subs	r3, r1, #4
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d922      	bls.n	8005d0a <lsm6dsl_channel_get+0x56>
 8005cc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005cc8:	e00d      	b.n	8005ce6 <lsm6dsl_channel_get+0x32>
	return lsm6dsl_accel_get_channel(chan, val, data,
 8005cca:	68ee      	ldr	r6, [r5, #12]
	switch (chan) {
 8005ccc:	2902      	cmp	r1, #2
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8005cce:	4632      	mov	r2, r6
	switch (chan) {
 8005cd0:	d00a      	beq.n	8005ce8 <lsm6dsl_channel_get+0x34>
 8005cd2:	2903      	cmp	r1, #3
 8005cd4:	d00a      	beq.n	8005cec <lsm6dsl_channel_get+0x38>
 8005cd6:	2901      	cmp	r1, #1
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8005cd8:	bf14      	ite	ne
 8005cda:	6829      	ldrne	r1, [r5, #0]
		lsm6dsl_accel_convert(val, data->accel_sample_y, sensitivity);
 8005cdc:	6869      	ldreq	r1, [r5, #4]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7fb f8fa 	bl	8000ed8 <lsm6dsl_accel_convert>
	return 0;
 8005ce4:	2000      	movs	r0, #0
}
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
		lsm6dsl_accel_convert(val, data->accel_sample_z, sensitivity);
 8005ce8:	68a9      	ldr	r1, [r5, #8]
 8005cea:	e7f8      	b.n	8005cde <lsm6dsl_channel_get+0x2a>
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7fb f8f2 	bl	8000ed8 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 1, data->accel_sample_y,
 8005cf4:	6869      	ldr	r1, [r5, #4]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	f104 0008 	add.w	r0, r4, #8
 8005cfc:	f7fb f8ec 	bl	8000ed8 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 2, data->accel_sample_z,
 8005d00:	68a9      	ldr	r1, [r5, #8]
 8005d02:	4632      	mov	r2, r6
 8005d04:	f104 0010 	add.w	r0, r4, #16
 8005d08:	e7ea      	b.n	8005ce0 <lsm6dsl_channel_get+0x2c>
	switch (chan) {
 8005d0a:	2906      	cmp	r1, #6
 8005d0c:	d009      	beq.n	8005d22 <lsm6dsl_channel_get+0x6e>
 8005d0e:	2907      	cmp	r1, #7
 8005d10:	d009      	beq.n	8005d26 <lsm6dsl_channel_get+0x72>
 8005d12:	2905      	cmp	r1, #5
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
 8005d14:	bf14      	ite	ne
 8005d16:	6929      	ldrne	r1, [r5, #16]
		lsm6dsl_gyro_convert(val, data->gyro_sample_y, sensitivity);
 8005d18:	6969      	ldreq	r1, [r5, #20]
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7fb f914 	bl	8000f48 <lsm6dsl_gyro_convert.constprop.0>
		break;
 8005d20:	e7e0      	b.n	8005ce4 <lsm6dsl_channel_get+0x30>
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
 8005d22:	69a9      	ldr	r1, [r5, #24]
 8005d24:	e7f9      	b.n	8005d1a <lsm6dsl_channel_get+0x66>
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
 8005d26:	4610      	mov	r0, r2
 8005d28:	6929      	ldr	r1, [r5, #16]
 8005d2a:	f7fb f90d 	bl	8000f48 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 1, data->gyro_sample_y, sensitivity);
 8005d2e:	6969      	ldr	r1, [r5, #20]
 8005d30:	f104 0008 	add.w	r0, r4, #8
 8005d34:	f7fb f908 	bl	8000f48 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 2, data->gyro_sample_z, sensitivity);
 8005d38:	69a9      	ldr	r1, [r5, #24]
 8005d3a:	f104 0010 	add.w	r0, r4, #16
 8005d3e:	e7ed      	b.n	8005d1c <lsm6dsl_channel_get+0x68>

08005d40 <lsm6dsl_sample_fetch_gyro.isra.0>:
static int lsm6dsl_sample_fetch_gyro(const struct device *dev)
 8005d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
 8005d42:	6904      	ldr	r4, [r0, #16]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_G,
 8005d44:	6a23      	ldr	r3, [r4, #32]
 8005d46:	466a      	mov	r2, sp
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	2122      	movs	r1, #34	; 0x22
 8005d4c:	2306      	movs	r3, #6
 8005d4e:	47a8      	blx	r5
 8005d50:	2800      	cmp	r0, #0
 8005d52:	db08      	blt.n	8005d66 <lsm6dsl_sample_fetch_gyro.isra.0+0x26>
	data->gyro_sample_x = (int16_t)((uint16_t)(buf[0]) |
 8005d54:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005d58:	6123      	str	r3, [r4, #16]
	data->gyro_sample_y = (int16_t)((uint16_t)(buf[2]) |
 8005d5a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8005d5e:	6163      	str	r3, [r4, #20]
	data->gyro_sample_z = (int16_t)((uint16_t)(buf[4]) |
 8005d60:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005d64:	61a3      	str	r3, [r4, #24]
}
 8005d66:	b003      	add	sp, #12
 8005d68:	bd30      	pop	{r4, r5, pc}

08005d6a <lsm6dsl_sample_fetch_accel.isra.0>:
static int lsm6dsl_sample_fetch_accel(const struct device *dev)
 8005d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
 8005d6c:	6904      	ldr	r4, [r0, #16]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_XL,
 8005d6e:	6a23      	ldr	r3, [r4, #32]
 8005d70:	466a      	mov	r2, sp
 8005d72:	681d      	ldr	r5, [r3, #0]
 8005d74:	2128      	movs	r1, #40	; 0x28
 8005d76:	2306      	movs	r3, #6
 8005d78:	47a8      	blx	r5
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	db08      	blt.n	8005d90 <lsm6dsl_sample_fetch_accel.isra.0+0x26>
	data->accel_sample_x = (int16_t)((uint16_t)(buf[0]) |
 8005d7e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005d82:	6023      	str	r3, [r4, #0]
	data->accel_sample_y = (int16_t)((uint16_t)(buf[2]) |
 8005d84:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8005d88:	6063      	str	r3, [r4, #4]
	data->accel_sample_z = (int16_t)((uint16_t)(buf[4]) |
 8005d8a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005d8e:	60a3      	str	r3, [r4, #8]
}
 8005d90:	b003      	add	sp, #12
 8005d92:	bd30      	pop	{r4, r5, pc}

08005d94 <lsm6dsl_sample_fetch>:
	switch (chan) {
 8005d94:	2907      	cmp	r1, #7
{
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4604      	mov	r4, r0
	switch (chan) {
 8005d9a:	d00a      	beq.n	8005db2 <lsm6dsl_sample_fetch+0x1e>
 8005d9c:	2939      	cmp	r1, #57	; 0x39
 8005d9e:	d005      	beq.n	8005dac <lsm6dsl_sample_fetch+0x18>
 8005da0:	2903      	cmp	r1, #3
 8005da2:	d109      	bne.n	8005db8 <lsm6dsl_sample_fetch+0x24>
		lsm6dsl_sample_fetch_accel(dev);
 8005da4:	f7ff ffe1 	bl	8005d6a <lsm6dsl_sample_fetch_accel.isra.0>
	return 0;
 8005da8:	2000      	movs	r0, #0
}
 8005daa:	bd10      	pop	{r4, pc}
		lsm6dsl_sample_fetch_accel(dev);
 8005dac:	f7ff ffdd 	bl	8005d6a <lsm6dsl_sample_fetch_accel.isra.0>
		lsm6dsl_sample_fetch_gyro(dev);
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff ffc5 	bl	8005d40 <lsm6dsl_sample_fetch_gyro.isra.0>
		break;
 8005db6:	e7f7      	b.n	8005da8 <lsm6dsl_sample_fetch+0x14>
	switch (chan) {
 8005db8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005dbc:	e7f5      	b.n	8005daa <lsm6dsl_sample_fetch+0x16>

08005dbe <i2c_transfer>:
{
 8005dbe:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8005dc0:	6884      	ldr	r4, [r0, #8]
 8005dc2:	68a4      	ldr	r4, [r4, #8]
 8005dc4:	46a4      	mov	ip, r4
}
 8005dc6:	bc10      	pop	{r4}
 8005dc8:	4760      	bx	ip

08005dca <lsm6dsl_i2c_write_data>:
{
 8005dca:	b530      	push	{r4, r5, lr}
 8005dcc:	b089      	sub	sp, #36	; 0x24
	const struct lsm6dsl_config *cfg = dev->config;
 8005dce:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8005dd0:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
 8005dd4:	f10d 0107 	add.w	r1, sp, #7
 8005dd8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
 8005dda:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
 8005ddc:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
 8005dde:	9103      	str	r1, [sp, #12]
{
 8005de0:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
 8005de2:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
 8005de4:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
 8005de6:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8005dea:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
 8005dee:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8005df0:	2202      	movs	r2, #2
 8005df2:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
 8005df6:	f7ff ffe2 	bl	8005dbe <i2c_transfer>
}
 8005dfa:	b009      	add	sp, #36	; 0x24
 8005dfc:	bd30      	pop	{r4, r5, pc}

08005dfe <lsm6dsl_i2c_read_data>:
{
 8005dfe:	b530      	push	{r4, r5, lr}
 8005e00:	b089      	sub	sp, #36	; 0x24
	const struct lsm6dsl_config *cfg = dev->config;
 8005e02:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8005e04:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005e08:	f10d 0107 	add.w	r1, sp, #7
{
 8005e0c:	461d      	mov	r5, r3
 8005e0e:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8005e10:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
 8005e12:	6860      	ldr	r0, [r4, #4]
 8005e14:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
 8005e16:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr, value, len);
 8005e18:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8005e1c:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005e1e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8005e20:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005e24:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8005e28:	a902      	add	r1, sp, #8
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f7ff ffc7 	bl	8005dbe <i2c_transfer>
}
 8005e30:	b009      	add	sp, #36	; 0x24
 8005e32:	bd30      	pop	{r4, r5, pc}

08005e34 <lsm6dsl_i2c_read_reg>:
{
 8005e34:	b510      	push	{r4, lr}
 8005e36:	b088      	sub	sp, #32
	const struct lsm6dsl_config *cfg = dev->config;
 8005e38:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8005e3a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005e3e:	f10d 0107 	add.w	r1, sp, #7
 8005e42:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8005e44:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
 8005e46:	6858      	ldr	r0, [r3, #4]
 8005e48:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
 8005e4a:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
 8005e4c:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005e50:	2207      	movs	r2, #7
 8005e52:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
 8005e56:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
 8005e58:	2202      	movs	r2, #2
 8005e5a:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
 8005e5c:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
 8005e60:	f7ff ffad 	bl	8005dbe <i2c_transfer>
}
 8005e64:	b008      	add	sp, #32
 8005e66:	bd10      	pop	{r4, pc}

08005e68 <lsm6dsl_i2c_update_reg>:
{
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	4698      	mov	r8, r3
	const struct lsm6dsl_config *cfg = dev->config;
 8005e6e:	6843      	ldr	r3, [r0, #4]
{
 8005e70:	b088      	sub	sp, #32
	return i2c_reg_update_byte(spec->bus, spec->addr,
 8005e72:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005e76:	f893 a008 	ldrb.w	sl, [r3, #8]
 8005e7a:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8005e7e:	2300      	movs	r3, #0
	msg[0].len = num_write;
 8005e80:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
 8005e82:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
 8005e86:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
 8005e8a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005e8e:	2307      	movs	r3, #7
 8005e90:	460e      	mov	r6, r1
 8005e92:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
 8005e94:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005e96:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	4653      	mov	r3, sl
 8005e9e:	a902      	add	r1, sp, #8
 8005ea0:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
 8005ea2:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
 8005ea4:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
 8005ea6:	f7ff ff8a 	bl	8005dbe <i2c_transfer>
	if (rc != 0) {
 8005eaa:	b9b8      	cbnz	r0, 8005edc <lsm6dsl_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
 8005eac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005eb0:	ea22 0304 	bic.w	r3, r2, r4
 8005eb4:	ea04 0408 	and.w	r4, r4, r8
 8005eb8:	431c      	orrs	r4, r3
	if (new_value == old_value) {
 8005eba:	42a2      	cmp	r2, r4
 8005ebc:	d00e      	beq.n	8005edc <lsm6dsl_i2c_update_reg+0x74>
	msg.len = num_bytes;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8005ec2:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	4653      	mov	r3, sl
 8005eca:	a902      	add	r1, sp, #8
 8005ecc:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
 8005ece:	f88d 6004 	strb.w	r6, [sp, #4]
 8005ed2:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
 8005ed6:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
 8005ed8:	f7ff ff71 	bl	8005dbe <i2c_transfer>
}
 8005edc:	b008      	add	sp, #32
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ee2 <setup_irq.isra.0>:
static inline void setup_irq(const struct device *dev, bool enable)
 8005ee2:	b410      	push	{r4}
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8005ee8:	68c0      	ldr	r0, [r0, #12]
 8005eea:	7c19      	ldrb	r1, [r3, #16]
		: GPIO_INT_DISABLE;
 8005eec:	b192      	cbz	r2, 8005f14 <setup_irq.isra.0+0x32>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8005eee:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8005ef0:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	408b      	lsls	r3, r1
 8005ef8:	4213      	tst	r3, r2
 8005efa:	bf14      	ite	ne
 8005efc:	f04f 7270 	movne.w	r2, #62914560	; 0x3c00000
 8005f00:	f04f 62b8 	moveq.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8005f04:	69a4      	ldr	r4, [r4, #24]
 8005f06:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
 8005f0a:	46a4      	mov	ip, r4
 8005f0c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
 8005f10:	bc10      	pop	{r4}
 8005f12:	4760      	bx	ip
		: GPIO_INT_DISABLE;
 8005f14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
 8005f18:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8005f1a:	e7f3      	b.n	8005f04 <setup_irq.isra.0+0x22>

08005f1c <lsm6dsl_gpio_callback>:
{
 8005f1c:	b510      	push	{r4, lr}
	handle_irq(drv_data->dev);
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
	setup_irq(dev, false);
 8005f22:	2100      	movs	r1, #0
 8005f24:	6858      	ldr	r0, [r3, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 8005f26:	691c      	ldr	r4, [r3, #16]
	setup_irq(dev, false);
 8005f28:	f7ff ffdb 	bl	8005ee2 <setup_irq.isra.0>
	z_impl_k_sem_give(sem);
 8005f2c:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
}
 8005f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f34:	f7fd bf48 	b.w	8003dc8 <z_impl_k_sem_give>

08005f38 <lsm6dsl_thread>:
{
 8005f38:	b538      	push	{r3, r4, r5, lr}
	struct lsm6dsl_data *drv_data = dev->data;
 8005f3a:	6905      	ldr	r5, [r0, #16]
{
 8005f3c:	4604      	mov	r4, r0
		k_sem_take(&drv_data->gpio_sem, K_FOREVER);
 8005f3e:	f505 65a8 	add.w	r5, r5, #1344	; 0x540
	return z_impl_k_sem_take(sem, timeout);
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7fd ff5c 	bl	8003e08 <z_impl_k_sem_take>
	struct lsm6dsl_data *drv_data = dev->data;
 8005f50:	6921      	ldr	r1, [r4, #16]
	if (drv_data->data_ready_handler != NULL) {
 8005f52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f54:	b113      	cbz	r3, 8005f5c <lsm6dsl_thread+0x24>
		drv_data->data_ready_handler(dev,
 8005f56:	313c      	adds	r1, #60	; 0x3c
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4798      	blx	r3
	setup_irq(dev, true);
 8005f5c:	6860      	ldr	r0, [r4, #4]
 8005f5e:	2101      	movs	r1, #1
 8005f60:	f7ff ffbf 	bl	8005ee2 <setup_irq.isra.0>
	while (1) {
 8005f64:	e7ed      	b.n	8005f42 <lsm6dsl_thread+0xa>

08005f66 <lsm6dsl_trigger_set>:
{
 8005f66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct lsm6dsl_config *config = dev->config;
 8005f6a:	6845      	ldr	r5, [r0, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 8005f6c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (!config->int_gpio.port) {
 8005f70:	68eb      	ldr	r3, [r5, #12]
{
 8005f72:	4604      	mov	r4, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	4616      	mov	r6, r2
	if (!config->int_gpio.port) {
 8005f78:	b36b      	cbz	r3, 8005fd6 <lsm6dsl_trigger_set+0x70>
	setup_irq(dev, false);
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff ffb0 	bl	8005ee2 <setup_irq.isra.0>
	drv_data->data_ready_handler = handler;
 8005f82:	f8c8 6040 	str.w	r6, [r8, #64]	; 0x40
	if (handler == NULL) {
 8005f86:	b316      	cbz	r6, 8005fce <lsm6dsl_trigger_set+0x68>
	drv_data->data_ready_trigger = *trig;
 8005f88:	6838      	ldr	r0, [r7, #0]
 8005f8a:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
	setup_irq(dev, true);
 8005f8e:	6860      	ldr	r0, [r4, #4]
 8005f90:	2101      	movs	r1, #1
 8005f92:	f7ff ffa6 	bl	8005ee2 <setup_irq.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
 8005f96:	68e8      	ldr	r0, [r5, #12]
 8005f98:	7c2d      	ldrb	r5, [r5, #16]
	const struct gpio_driver_data *const data =
 8005f9a:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
 8005f9c:	6883      	ldr	r3, [r0, #8]
 8005f9e:	a901      	add	r1, sp, #4
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4798      	blx	r3
	if (ret == 0) {
 8005fa4:	b940      	cbnz	r0, 8005fb8 <lsm6dsl_trigger_set+0x52>
		*value ^= data->invert;
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	6832      	ldr	r2, [r6, #0]
 8005faa:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8005fac:	2301      	movs	r3, #1
 8005fae:	40ab      	lsls	r3, r5
 8005fb0:	421a      	tst	r2, r3
 8005fb2:	bf14      	ite	ne
 8005fb4:	2001      	movne	r0, #1
 8005fb6:	2000      	moveq	r0, #0
	if (gpio_pin_get_dt(&config->int_gpio) > 0) {
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	dd08      	ble.n	8005fce <lsm6dsl_trigger_set+0x68>
	setup_irq(dev, false);
 8005fbc:	6860      	ldr	r0, [r4, #4]
	struct lsm6dsl_data *drv_data = dev->data;
 8005fbe:	6925      	ldr	r5, [r4, #16]
	setup_irq(dev, false);
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	f7ff ff8e 	bl	8005ee2 <setup_irq.isra.0>
	z_impl_k_sem_give(sem);
 8005fc6:	f505 60a8 	add.w	r0, r5, #1344	; 0x540
 8005fca:	f7fd fefd 	bl	8003dc8 <z_impl_k_sem_give>
		return 0;
 8005fce:	2000      	movs	r0, #0
}
 8005fd0:	b002      	add	sp, #8
 8005fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
 8005fd6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005fda:	e7f9      	b.n	8005fd0 <lsm6dsl_trigger_set+0x6a>

08005fdc <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
 8005fdc:	b530      	push	{r4, r5, lr}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	4604      	mov	r4, r0
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
 8005fe2:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8005fe6:	f10d 0107 	add.w	r1, sp, #7
{
 8005fea:	461d      	mov	r5, r3
 8005fec:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8005fee:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
 8005ff0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8005ff4:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8005ff6:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8005ff8:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8005ffe:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8006002:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8006006:	6882      	ldr	r2, [r0, #8]
 8006008:	a902      	add	r1, sp, #8
 800600a:	6894      	ldr	r4, [r2, #8]
 800600c:	2202      	movs	r2, #2
 800600e:	47a0      	blx	r4
}
 8006010:	b009      	add	sp, #36	; 0x24
 8006012:	bd30      	pop	{r4, r5, pc}

08006014 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
 8006014:	b530      	push	{r4, r5, lr}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	4604      	mov	r4, r0
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
 800601a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
 800601e:	f10d 0107 	add.w	r1, sp, #7
{
 8006022:	461d      	mov	r5, r3
 8006024:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
 8006026:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
 8006028:	e9cd 2505 	strd	r2, r5, [sp, #20]
 800602c:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800602e:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
 8006030:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
 8006032:	6800      	ldr	r0, [r0, #0]
 8006034:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8006036:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800603a:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 800603e:	6881      	ldr	r1, [r0, #8]
 8006040:	688c      	ldr	r4, [r1, #8]
 8006042:	a902      	add	r1, sp, #8
 8006044:	47a0      	blx	r4
}
 8006046:	b009      	add	sp, #36	; 0x24
 8006048:	bd30      	pop	{r4, r5, pc}

0800604a <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 800604a:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800604c:	6803      	ldr	r3, [r0, #0]
 800604e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006050:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8006052:	6843      	ldr	r3, [r0, #4]
 8006054:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006056:	9b01      	ldr	r3, [sp, #4]
}
 8006058:	b002      	add	sp, #8
 800605a:	4770      	bx	lr

0800605c <uart_stm32_poll_in>:
{
 800605c:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800605e:	6843      	ldr	r3, [r0, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	071a      	lsls	r2, r3, #28
 8006066:	d501      	bpl.n	800606c <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8006068:	f7ff ffef 	bl	800604a <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800606c:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800606e:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006070:	bf43      	ittte	mi
 8006072:	6843      	ldrmi	r3, [r0, #4]
 8006074:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8006076:	2000      	movmi	r0, #0
		return -1;
 8006078:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800607c:	bd08      	pop	{r3, pc}

0800607e <uart_stm32_poll_out>:
{
 800607e:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8006080:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8006082:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006084:	6813      	ldr	r3, [r2, #0]
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	d5fc      	bpl.n	8006084 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800608a:	f04f 0210 	mov.w	r2, #16
 800608e:	f3ef 8311 	mrs	r3, BASEPRI
 8006092:	f382 8812 	msr	BASEPRI_MAX, r2
 8006096:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800609a:	6802      	ldr	r2, [r0, #0]
 800609c:	6814      	ldr	r4, [r2, #0]
 800609e:	0624      	lsls	r4, r4, #24
 80060a0:	d404      	bmi.n	80060ac <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80060aa:	e7ea      	b.n	8006082 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80060ac:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
}
 80060b6:	bd10      	pop	{r4, pc}

080060b8 <uart_stm32_err_check>:
{
 80060b8:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80060ba:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80060bc:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80060be:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80060c0:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80060c2:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80060c4:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80060c6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 80060ca:	bf48      	it	mi
 80060cc:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 80060d0:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80060d2:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 80060d4:	bf48      	it	mi
 80060d6:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 80060da:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 80060dc:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 80060de:	bf48      	it	mi
 80060e0:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 80060e4:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 80060e6:	bf42      	ittt	mi
 80060e8:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 80060ec:	f042 0208 	orrmi.w	r2, r2, #8
 80060f0:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 80060f2:	07d0      	lsls	r0, r2, #31
 80060f4:	d502      	bpl.n	80060fc <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 80060f6:	6808      	ldr	r0, [r1, #0]
 80060f8:	f7ff ffa7 	bl	800604a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 80060fc:	0793      	lsls	r3, r2, #30
 80060fe:	d502      	bpl.n	8006106 <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 8006100:	6808      	ldr	r0, [r1, #0]
 8006102:	f7ff ffa2 	bl	800604a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8006106:	0750      	lsls	r0, r2, #29
 8006108:	d502      	bpl.n	8006110 <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 800610a:	6808      	ldr	r0, [r1, #0]
 800610c:	f7ff ff9d 	bl	800604a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 8006110:	0693      	lsls	r3, r2, #26
 8006112:	d502      	bpl.n	800611a <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 8006114:	6808      	ldr	r0, [r1, #0]
 8006116:	f7ff ff98 	bl	800604a <LL_USART_ClearFlag_FE>
}
 800611a:	4610      	mov	r0, r2
 800611c:	bd08      	pop	{r3, pc}

0800611e <uart_stm32_set_baudrate>:
{
 800611e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8006120:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006122:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8006124:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 8006126:	6883      	ldr	r3, [r0, #8]
 8006128:	68db      	ldr	r3, [r3, #12]
{
 800612a:	460d      	mov	r5, r1
					   (clock_control_subsys_t)&config->pclken[0],
 800612c:	6861      	ldr	r1, [r4, #4]
 800612e:	b1f3      	cbz	r3, 800616e <uart_stm32_set_baudrate+0x50>
	return api->get_rate(dev, sys, rate);
 8006130:	aa01      	add	r2, sp, #4
 8006132:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8006134:	2800      	cmp	r0, #0
 8006136:	db1a      	blt.n	800616e <uart_stm32_set_baudrate+0x50>
		LL_USART_SetOverSampling(config->usart,
 8006138:	6822      	ldr	r2, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800613a:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800613c:	68d3      	ldr	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800613e:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006144:	60d3      	str	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006146:	fba0 0101 	umull	r0, r1, r0, r1
 800614a:	00aa      	lsls	r2, r5, #2
 800614c:	0fab      	lsrs	r3, r5, #30
 800614e:	f7fa fcb9 	bl	8000ac4 <__aeabi_uldivmod>
 8006152:	2264      	movs	r2, #100	; 0x64
 8006154:	fbb0 f1f2 	udiv	r1, r0, r2
 8006158:	fb02 0311 	mls	r3, r2, r1, r0
 800615c:	011b      	lsls	r3, r3, #4
		LL_USART_SetBaudRate(config->usart,
 800615e:	6824      	ldr	r4, [r4, #0]
 8006160:	3332      	adds	r3, #50	; 0x32
 8006162:	fbb3 f3f2 	udiv	r3, r3, r2
 8006166:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800616a:	b29b      	uxth	r3, r3
 800616c:	60a3      	str	r3, [r4, #8]
}
 800616e:	b003      	add	sp, #12
 8006170:	bd30      	pop	{r4, r5, pc}

08006172 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8006172:	6903      	ldr	r3, [r0, #16]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8006178:	6843      	ldr	r3, [r0, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d02f      	beq.n	80061e8 <uart_stm32_config_get+0x76>
 8006188:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 800618c:	f1dc 0300 	rsbs	r3, ip, #0
 8006190:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8006194:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 8006196:	6843      	ldr	r3, [r0, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80061a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a4:	d022      	beq.n	80061ec <uart_stm32_config_get+0x7a>
 80061a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061aa:	d021      	beq.n	80061f0 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80061b4:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 80061b6:	6843      	ldr	r3, [r0, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80061ba:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80061bc:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 80061be:	04d2      	lsls	r2, r2, #19
 80061c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061c4:	d516      	bpl.n	80061f4 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bf14      	ite	ne
 80061ca:	2303      	movne	r3, #3
 80061cc:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80061ce:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80061d0:	6843      	ldr	r3, [r0, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80061da:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80061de:	4253      	negs	r3, r2
 80061e0:	4153      	adcs	r3, r2
 80061e2:	71cb      	strb	r3, [r1, #7]
}
 80061e4:	2000      	movs	r0, #0
 80061e6:	4770      	bx	lr
	switch (parity) {
 80061e8:	2302      	movs	r3, #2
 80061ea:	e7d3      	b.n	8006194 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e7e1      	b.n	80061b4 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e7df      	b.n	80061b4 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf14      	ite	ne
 80061f8:	2302      	movne	r3, #2
 80061fa:	2303      	moveq	r3, #3
 80061fc:	e7e7      	b.n	80061ce <uart_stm32_config_get+0x5c>

080061fe <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 80061fe:	4770      	bx	lr

08006200 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8006200:	b140      	cbz	r0, 8006214 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8006202:	68c3      	ldr	r3, [r0, #12]
 8006204:	7858      	ldrb	r0, [r3, #1]
 8006206:	f010 0001 	ands.w	r0, r0, #1
 800620a:	bf1e      	ittt	ne
 800620c:	7818      	ldrbne	r0, [r3, #0]
 800620e:	fab0 f080 	clzne	r0, r0
 8006212:	0940      	lsrne	r0, r0, #5
}
 8006214:	4770      	bx	lr

08006216 <arch_system_halt>:
	__asm__ volatile(
 8006216:	f04f 0210 	mov.w	r2, #16
 800621a:	f3ef 8311 	mrs	r3, BASEPRI
 800621e:	f382 8812 	msr	BASEPRI_MAX, r2
 8006222:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8006226:	e7fe      	b.n	8006226 <arch_system_halt+0x10>

08006228 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8006228:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800622a:	f7ff fff4 	bl	8006216 <arch_system_halt>

0800622e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006230:	4605      	mov	r5, r0
 8006232:	460e      	mov	r6, r1
 8006234:	f04f 0310 	mov.w	r3, #16
 8006238:	f3ef 8711 	mrs	r7, BASEPRI
 800623c:	f383 8812 	msr	BASEPRI_MAX, r3
 8006240:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8006244:	f7fe f8e2 	bl	800440c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8006248:	4631      	mov	r1, r6
 800624a:	4604      	mov	r4, r0
 800624c:	4628      	mov	r0, r5
 800624e:	f7ff ffeb 	bl	8006228 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8006252:	f387 8811 	msr	BASEPRI, r7
 8006256:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800625a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800625c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006260:	f7fc ba20 	b.w	80026a4 <z_impl_k_thread_abort>

08006264 <z_early_memset>:
	(void) memset(dst, c, n);
 8006264:	f7fe bd25 	b.w	8004cb2 <memset>

08006268 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8006268:	f7fe bd18 	b.w	8004c9c <memcpy>

0800626c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800626c:	b508      	push	{r3, lr}
	__asm__ volatile(
 800626e:	f04f 0210 	mov.w	r2, #16
 8006272:	f3ef 8311 	mrs	r3, BASEPRI
 8006276:	f382 8812 	msr	BASEPRI_MAX, r2
 800627a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800627e:	f7fb ff85 	bl	800218c <arch_cpu_idle>
 8006282:	e7f4      	b.n	800626e <idle+0x2>

08006284 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8006284:	b13a      	cbz	r2, 8006296 <z_impl_k_sem_init+0x12>
 8006286:	428a      	cmp	r2, r1
 8006288:	d305      	bcc.n	8006296 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 800628a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 800628e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8006292:	2000      	movs	r0, #0
 8006294:	4770      	bx	lr
		return -EINVAL;
 8006296:	f06f 0015 	mvn.w	r0, #21
}
 800629a:	4770      	bx	lr

0800629c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 800629c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80062a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80062a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80062a4:	2300      	movs	r3, #0
	node->prev = NULL;
 80062a6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80062aa:	4770      	bx	lr

080062ac <unpend_thread_no_timeout>:
{
 80062ac:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80062ae:	f7ff fff5 	bl	800629c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80062b2:	7b43      	ldrb	r3, [r0, #13]
 80062b4:	f023 0302 	bic.w	r3, r3, #2
 80062b8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	6083      	str	r3, [r0, #8]
}
 80062be:	bd08      	pop	{r3, pc}

080062c0 <add_to_waitq_locked>:
{
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
	unready_thread(thread);
 80062c6:	f7fd fec7 	bl	8004058 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80062ca:	7b63      	ldrb	r3, [r4, #13]
 80062cc:	f043 0302 	orr.w	r3, r3, #2
 80062d0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80062d2:	b1e5      	cbz	r5, 800630e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 80062d4:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 80062d6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80062d8:	429d      	cmp	r5, r3
 80062da:	d109      	bne.n	80062f0 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 80062dc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80062de:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 80062e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80062e4:	606c      	str	r4, [r5, #4]
}
 80062e6:	e012      	b.n	800630e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80062e8:	686a      	ldr	r2, [r5, #4]
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d0f6      	beq.n	80062dc <add_to_waitq_locked+0x1c>
 80062ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f3      	beq.n	80062dc <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 80062f4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80062f8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 80062fc:	428a      	cmp	r2, r1
 80062fe:	d0f3      	beq.n	80062e8 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006300:	4291      	cmp	r1, r2
 8006302:	ddf1      	ble.n	80062e8 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8006304:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8006306:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800630a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800630c:	605c      	str	r4, [r3, #4]
}
 800630e:	bd38      	pop	{r3, r4, r5, pc}

08006310 <z_ready_thread>:
{
 8006310:	b510      	push	{r4, lr}
 8006312:	f04f 0310 	mov.w	r3, #16
 8006316:	f3ef 8411 	mrs	r4, BASEPRI
 800631a:	f383 8812 	msr	BASEPRI_MAX, r3
 800631e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8006322:	f7fd fe65 	bl	8003ff0 <ready_thread>
	__asm__ volatile(
 8006326:	f384 8811 	msr	BASEPRI, r4
 800632a:	f3bf 8f6f 	isb	sy
}
 800632e:	bd10      	pop	{r4, pc}

08006330 <z_sched_wake_thread>:
{
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4604      	mov	r4, r0
	__asm__ volatile(
 8006334:	f04f 0310 	mov.w	r3, #16
 8006338:	f3ef 8511 	mrs	r5, BASEPRI
 800633c:	f383 8812 	msr	BASEPRI_MAX, r3
 8006340:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8006344:	7b43      	ldrb	r3, [r0, #13]
 8006346:	f013 0f28 	tst.w	r3, #40	; 0x28
 800634a:	d10b      	bne.n	8006364 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 800634c:	6883      	ldr	r3, [r0, #8]
 800634e:	b10b      	cbz	r3, 8006354 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 8006350:	f7ff ffac 	bl	80062ac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8006354:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 8006356:	b951      	cbnz	r1, 800636e <z_sched_wake_thread+0x3e>
 8006358:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800635c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
 800635e:	4620      	mov	r0, r4
 8006360:	f7fd fe46 	bl	8003ff0 <ready_thread>
	__asm__ volatile(
 8006364:	f385 8811 	msr	BASEPRI, r5
 8006368:	f3bf 8f6f 	isb	sy
}
 800636c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800636e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
 8006372:	e7f3      	b.n	800635c <z_sched_wake_thread+0x2c>

08006374 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8006374:	2101      	movs	r1, #1
 8006376:	3818      	subs	r0, #24
 8006378:	f7ff bfda 	b.w	8006330 <z_sched_wake_thread>

0800637c <z_unpend_first_thread>:
{
 800637c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800637e:	f04f 0310 	mov.w	r3, #16
 8006382:	f3ef 8511 	mrs	r5, BASEPRI
 8006386:	f383 8812 	msr	BASEPRI_MAX, r3
 800638a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800638e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006390:	42a0      	cmp	r0, r4
 8006392:	d00d      	beq.n	80063b0 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8006394:	b134      	cbz	r4, 80063a4 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff ff88 	bl	80062ac <unpend_thread_no_timeout>
 800639c:	f104 0018 	add.w	r0, r4, #24
 80063a0:	f000 f81e 	bl	80063e0 <z_abort_timeout>
	__asm__ volatile(
 80063a4:	f385 8811 	msr	BASEPRI, r5
 80063a8:	f3bf 8f6f 	isb	sy
}
 80063ac:	4620      	mov	r0, r4
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	2400      	movs	r4, #0
 80063b2:	e7f7      	b.n	80063a4 <z_unpend_first_thread+0x28>

080063b4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80063b4:	4603      	mov	r3, r0
 80063b6:	b920      	cbnz	r0, 80063c2 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b8:	f3ef 8205 	mrs	r2, IPSR
 80063bc:	b90a      	cbnz	r2, 80063c2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 80063be:	f7fb bf41 	b.w	8002244 <arch_swap>
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
}
 80063ca:	4770      	bx	lr

080063cc <z_reschedule_unlocked>:
	__asm__ volatile(
 80063cc:	f04f 0310 	mov.w	r3, #16
 80063d0:	f3ef 8011 	mrs	r0, BASEPRI
 80063d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80063d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80063dc:	f7ff bfea 	b.w	80063b4 <z_reschedule_irqlock>

080063e0 <z_abort_timeout>:
{
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f04f 0210 	mov.w	r2, #16
 80063e6:	f3ef 8411 	mrs	r4, BASEPRI
 80063ea:	f382 8812 	msr	BASEPRI_MAX, r2
 80063ee:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80063f2:	6803      	ldr	r3, [r0, #0]
 80063f4:	b13b      	cbz	r3, 8006406 <z_abort_timeout+0x26>
			remove_timeout(to);
 80063f6:	f7fe f8b3 	bl	8004560 <remove_timeout>
			ret = 0;
 80063fa:	2000      	movs	r0, #0
	__asm__ volatile(
 80063fc:	f384 8811 	msr	BASEPRI, r4
 8006400:	f3bf 8f6f 	isb	sy
}
 8006404:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8006406:	f06f 0015 	mvn.w	r0, #21
 800640a:	e7f7      	b.n	80063fc <z_abort_timeout+0x1c>

0800640c <sys_clock_tick_get_32>:
{
 800640c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800640e:	f7fe f9a3 	bl	8004758 <sys_clock_tick_get>
}
 8006412:	bd08      	pop	{r3, pc}
